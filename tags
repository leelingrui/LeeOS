!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOW_IDMAP	kernel/src/fs/fs.rs	/^        const ALLOW_IDMAP = bit!(5);$/;"	c
ARDS_BUFFER	kernel/src/mm/memory.rs	/^const ARDS_BUFFER : *const c_void = 0x7c00 as *const c_void;$/;"	c
ATIME_MASK	kernel/src/fs/mount.rs	/^        const ATIME_MASK = 0x8 | 0x10 | 0x20;$/;"	c
ATOMIC	kernel/src/mm/page.rs	/^        const ATOMIC = Self::__HIGH.bits();$/;"	c
ATTR	kernel/src/kernel/console.rs	/^const ATTR : u8 = 0x7;$/;"	c
AddressSpace	kernel/src/fs/fs.rs	/^impl AddressSpace$/;"	i
AddressSpace	kernel/src/fs/fs.rs	/^pub struct AddressSpace$/;"	s
BEEPING	kernel/src/kernel/clock.rs	/^static mut BEEPING : bool = false;$/;"	c
BEEP_COUNTER	kernel/src/kernel/clock.rs	/^const BEEP_COUNTER : u64 = OSCILLATOR \/ BEEP_HZ as u64;$/;"	c
BEEP_HZ	kernel/src/kernel/clock.rs	/^const BEEP_HZ : u16 = 440;$/;"	c
BEEP_MS	kernel/src/kernel/clock.rs	/^const BEEP_MS : u8 = 100;$/;"	c
BEL	kernel/src/kernel/console.rs	/^const BEL : i8 = 0x7;$/;"	c
BINARY_MOUNTDATA	kernel/src/fs/fs.rs	/^        const BINARY_MOUNTDATA = bit!(1);$/;"	c
BLINK	kernel/src/kernel/console.rs	/^const BLINK : u8 = 0x80;$/;"	c
BOGO_INODE_SIZE	kernel/src/mm/shmem.rs	/^const BOGO_INODE_SIZE : i64 = 1024;$/;"	c
BOLD	kernel/src/kernel/console.rs	/^const BOLD : u8 = 0x0f;$/;"	c
BS	kernel/src/kernel/console.rs	/^const BS : i8 = 0x8;$/;"	c
BUILD	Makefile	/^BUILD:=.\/build$/;"	m
BUILTIN_APP	Makefile	/^BUILTIN_APP=$(BUILD)\/x86_64-unknown-leeos\/debug\/init$/;"	m
BUILTIN_APP_FILES	Makefile	/^BUILTIN_APP_FILES:=$(BUILTIN_SRC)\/bin\/init.rs $(BUILTIN_SRC)\/lib.rs $(BUILTIN_SRC)\/lang_items.rs$/;"	m
BUILTIN_SRC	Makefile	/^BUILTIN_SRC:=.\/builtins\/src$/;"	m
BitMap	kernel/src/kernel/bitmap.rs	/^impl BitMap {$/;"	i
BitMap	kernel/src/kernel/bitmap.rs	/^pub struct BitMap$/;"	s
BootSector	kernel/src/kernel/io.rs	/^struct BootSector$/;"	s
Buffer	kernel/src/kernel/buffer.rs	/^impl Buffer {$/;"	i
Buffer	kernel/src/kernel/buffer.rs	/^pub struct Buffer$/;"	s
CANT_MOUNT	kernel/src/fs/dcache.rs	/^        const CANT_MOUNT = 0x100;$/;"	c
CENTURY	kernel/src/kernel/time.rs	/^static mut CENTURY : u32 = 0;$/;"	c
CLOCK_COUNTER	kernel/src/kernel/clock.rs	/^const CLOCK_COUNTER : u64 = OSCILLATOR \/ HZ;$/;"	c
CLONE_CHILD_CLEARTID	kernel/src/mm/memory.rs	/^        const CLONE_CHILD_CLEARTID = 0x00200000;	\/* clear the TID in the child *\/$/;"	c
CLONE_CHILD_SETTID	kernel/src/mm/memory.rs	/^        const CLONE_CHILD_SETTID = 0x01000000;	\/* set the TID in the child *\/$/;"	c
CLONE_CLEAR_SIGHAND	kernel/src/mm/memory.rs	/^        const CLONE_CLEAR_SIGHAND = 0x100000000; \/* Clear any signal handler and reset to SIG_DFL. *\/$/;"	c
CLONE_DETACHED	kernel/src/mm/memory.rs	/^        const CLONE_DETACHED = 0x00400000;	\/* Unused, ignored *\/$/;"	c
CLONE_FILES	kernel/src/mm/memory.rs	/^        const CLONE_FILES = 0x00000400;	\/* set if open files shared between processes *\/$/;"	c
CLONE_FS	kernel/src/mm/memory.rs	/^        const CLONE_FS = 0x00000200;	\/* set if fs info shared between processes *\/$/;"	c
CLONE_INTO_CGROUP	kernel/src/mm/memory.rs	/^        const CLONE_INTO_CGROUP = 0x200000000; \/* Clone into a specific cgroup given the right permissions. *\/$/;"	c
CLONE_IO	kernel/src/mm/memory.rs	/^        const CLONE_IO = 0x80000000;	\/* Clone io context *\/$/;"	c
CLONE_NEWCGROUP	kernel/src/mm/memory.rs	/^        const CLONE_NEWCGROUP =	0x02000000;	\/* New cgroup namespace *\/$/;"	c
CLONE_NEWIPC	kernel/src/mm/memory.rs	/^        const CLONE_NEWIPC = 0x08000000;	\/* New ipc namespace *\/$/;"	c
CLONE_NEWNET	kernel/src/mm/memory.rs	/^        const CLONE_NEWNET = 0x40000000;	\/* New network namespace *\/$/;"	c
CLONE_NEWNS	kernel/src/mm/memory.rs	/^        const CLONE_NEWNS = 0x00020000;	\/* New mount namespace group *\/$/;"	c
CLONE_NEWPID	kernel/src/mm/memory.rs	/^        const CLONE_NEWPID = 0x20000000;	\/* New pid namespace *\/$/;"	c
CLONE_NEWTIME	kernel/src/mm/memory.rs	/^        const CLONE_NEWTIME = 0x00000080;	\/* New time namespace *\/$/;"	c
CLONE_NEWUSER	kernel/src/mm/memory.rs	/^        const CLONE_NEWUSER = 0x10000000;	\/* New user namespace *\/$/;"	c
CLONE_NEWUTS	kernel/src/mm/memory.rs	/^        const CLONE_NEWUTS = 0x04000000;	\/* New utsname namespace *\/$/;"	c
CLONE_PARENT	kernel/src/mm/memory.rs	/^        const CLONE_PARENT = 0x00008000;	\/* set if we want to have the same parent as the cloner *\/$/;"	c
CLONE_PARENT_SETTID	kernel/src/mm/memory.rs	/^        const CLONE_PARENT_SETTID =	0x00100000;	\/* set the TID in the parent *\/$/;"	c
CLONE_PIDFD	kernel/src/mm/memory.rs	/^        const CLONE_PIDFD =	0x00001000;	\/* set if a pidfd should be placed in parent *\/$/;"	c
CLONE_PTRACE	kernel/src/mm/memory.rs	/^        const CLONE_PTRACE = 0x00002000;	\/* set if we want to let tracing continue on the child too *\/$/;"	c
CLONE_SETTLS	kernel/src/mm/memory.rs	/^        const CLONE_SETTLS = 0x00080000;	\/* create a new TLS for the child *\/$/;"	c
CLONE_SIGHAND	kernel/src/mm/memory.rs	/^        const CLONE_SIGHAND = 0x00000800;	\/* set if signal handlers and blocked signals shared *\/$/;"	c
CLONE_SYSVSEM	kernel/src/mm/memory.rs	/^        const CLONE_SYSVSEM = 0x00040000;	\/* share system V SEM_UNDO semantics *\/$/;"	c
CLONE_THREAD	kernel/src/mm/memory.rs	/^        const CLONE_THREAD = 0x00010000;	\/* Same thread group? *\/$/;"	c
CLONE_UNTRACED	kernel/src/mm/memory.rs	/^        const CLONE_UNTRACED = 0x00800000;	\/* set if the tracing process can't force CLONE_PTRACE on this clone *\/$/;"	c
CLONE_VFORK	kernel/src/mm/memory.rs	/^        const CLONE_VFORK =	0x00004000;	\/* set if the parent wants the child to wake it up on mm_release *\/$/;"	c
CLONE_VM	kernel/src/mm/memory.rs	/^        const CLONE_VM = 0x00000100;	\/* set if VM shared between processes *\/$/;"	c
CMOS_A	kernel/src/kernel/io.rs	/^pub const CMOS_A : u8 = 0x0a;$/;"	c
CMOS_ADDR_PORT	kernel/src/kernel/io.rs	/^pub const CMOS_ADDR_PORT : u16 = 0x70;$/;"	c
CMOS_B	kernel/src/kernel/io.rs	/^pub const CMOS_B : u8 = 0x0b;$/;"	c
CMOS_C	kernel/src/kernel/io.rs	/^pub const CMOS_C : u8 = 0x0c;$/;"	c
CMOS_CENTURY	kernel/src/kernel/io.rs	/^pub const CMOS_CENTURY : u8 = 0x32;$/;"	c
CMOS_D	kernel/src/kernel/io.rs	/^pub const CMOS_D : u8 = 0x0d;$/;"	c
CMOS_DATA_PROT	kernel/src/kernel/io.rs	/^pub const CMOS_DATA_PROT : u16 = 0x71;$/;"	c
CMOS_DAY	kernel/src/kernel/io.rs	/^pub const CMOS_DAY : u8 = 0x7;$/;"	c
CMOS_HOUR	kernel/src/kernel/io.rs	/^pub const CMOS_HOUR : u8 = 0x4;$/;"	c
CMOS_MINUTE	kernel/src/kernel/io.rs	/^pub const CMOS_MINUTE : u8 = 0x02;$/;"	c
CMOS_MONTH	kernel/src/kernel/io.rs	/^pub const CMOS_MONTH : u8 = 0x8;$/;"	c
CMOS_NMI	kernel/src/kernel/io.rs	/^pub const CMOS_NMI : u8 = 0x80;$/;"	c
CMOS_SECOND	kernel/src/kernel/io.rs	/^pub const CMOS_SECOND : u8 = 0x00;$/;"	c
CMOS_WEEKDAY	kernel/src/kernel/io.rs	/^pub const CMOS_WEEKDAY : u8 = 0x6;$/;"	c
CMOS_YEAR	kernel/src/kernel/io.rs	/^pub const CMOS_YEAR : u8 = 0x9;$/;"	c
COMMON_CLEAR_SB_FLAG	kernel/src/fs/fs_context.rs	/^static COMMON_CLEAR_SB_FLAG : [ConstantTable; 5] = $/;"	c
COMMON_SET_SB_FLAG	kernel/src/fs/fs_context.rs	/^static COMMON_SET_SB_FLAG : [ConstantTable; 6] = $/;"	c
CONSOLE	kernel/src/kernel/console.rs	/^pub static mut CONSOLE : Console = Console::new();$/;"	c
CONTROLLERS	kernel/src/kernel/io.rs	/^pub static mut CONTROLLERS : [IdeCtrlT; IDE_CTRL_NR] = [IdeCtrlT::new(), IdeCtrlT::new()];$/;"	c
CR	kernel/src/kernel/console.rs	/^const CR : i8 = 0xd;$/;"	c
CR0_AM	kernel/src/kernel/cpu.rs	/^        const CR0_AM = 1 << 18; \/\/ Alignment Mask 对齐掩码$/;"	c
CR0_CD	kernel/src/kernel/cpu.rs	/^        const CR0_CD = 1 << 30; \/\/ Cache Disable 禁用内存缓冲$/;"	c
CR0_EM	kernel/src/kernel/cpu.rs	/^        const CR0_EM = 1 << 2;  \/\/ Emulation 启用模拟，表示没有 FPU$/;"	c
CR0_ET	kernel/src/kernel/cpu.rs	/^        const CR0_ET = 1 << 3;  \/\/ Extension Type 保留$/;"	c
CR0_MP	kernel/src/kernel/cpu.rs	/^        const CR0_MP = 1 << 1;  \/\/ Monitor Coprocessor$/;"	c
CR0_NE	kernel/src/kernel/cpu.rs	/^        const CR0_NE = 1 << 5;  \/\/ Numeric Error 启用内部浮点错误报告$/;"	c
CR0_NW	kernel/src/kernel/cpu.rs	/^        const CR0_NW = 1 << 29; \/\/ Not Write-Through 不是直写$/;"	c
CR0_PE	kernel/src/kernel/cpu.rs	/^        const CR0_PE = 1 << 0; \/\/ Protection Enable 启用保护模式$/;"	c
CR0_PG	kernel/src/kernel/cpu.rs	/^        const CR0_PG = 1 << 31; \/\/ Paging 启用分页$/;"	c
CR0_TS	kernel/src/kernel/cpu.rs	/^        const CR0_TS = 1 << 3;  \/\/ Task Switch 任务切换，延迟保存浮点环境$/;"	c
CR0_WP	kernel/src/kernel/cpu.rs	/^        const CR0_WP = 1 << 16; \/\/ Write Protect 写保护（禁止超级用户写入只读页）帮助写时复制$/;"	c
CRC16_TABLE	kernel/src/crypto/crc16.rs	/^const CRC16_TABLE : [u16; 256] = [$/;"	c
CRC32C_TABLE_LE	kernel/src/crypto/crc32table.rs	/^pub const CRC32C_TABLE_LE : [[u32; 256]; 8] = [$/;"	c
CRT_ADDR_REG	kernel/src/kernel/console.rs	/^const CRT_ADDR_REG : u16 = 0x3d4;$/;"	c
CRT_CURSOR_H	kernel/src/kernel/console.rs	/^const CRT_CURSOR_H : u8 = 0xe;$/;"	c
CRT_CURSOR_L	kernel/src/kernel/console.rs	/^const CRT_CURSOR_L : u8 = 0xf;$/;"	c
CRT_DATA_REG	kernel/src/kernel/console.rs	/^const CRT_DATA_REG : u16 = 0x3d5;$/;"	c
CRT_START_ADDR_H	kernel/src/kernel/console.rs	/^const CRT_START_ADDR_H : u8 = 0xC; \/\/ 显示内存起始位置 - 高位$/;"	c
CRT_START_ADDR_L	kernel/src/kernel/console.rs	/^const CRT_START_ADDR_L : u8 = 0xD; \/\/ 显示内存起始位置 - 低位$/;"	c
CSIGNAL	kernel/src/mm/memory.rs	/^        const CSIGNAL = 0x000000ff;	\/* signal mask to be sent at exit *\/$/;"	c
CloneFlags	kernel/src/mm/memory.rs	/^    pub struct CloneFlags : u64$/;"	s
CompareFunc	kernel/src/fs/dcache.rs	/^pub type CompareFunc = fn(&DEntry, u32, &c_char, &QStr) -> i64;$/;"	T
Console	kernel/src/kernel/console.rs	/^impl Console$/;"	i
Console	kernel/src/kernel/console.rs	/^pub struct Console$/;"	s
ConstantTable	kernel/src/fs/fs_context.rs	/^impl ConstantTable {$/;"	i
ConstantTable	kernel/src/fs/fs_context.rs	/^struct ConstantTable$/;"	s
CpuVersion	kernel/src/kernel/cpu.rs	/^    pub struct CpuVersion : u32$/;"	s
CpuidResult	kernel/src/kernel/cpu.rs	/^pub struct CpuidResult$/;"	s
Cr0RegLabel	kernel/src/kernel/cpu.rs	/^    pub struct Cr0RegLabel : u64$/;"	s
DAY	kernel/src/kernel/time.rs	/^const DAY : u64 = 24 * HOUR;$/;"	c
DEBUG	Makefile	/^DEBUG:=$/;"	m
DEF_HASH_VERSION_HALF_MD4	kernel/src/fs/ext4.rs	/^const DEF_HASH_VERSION_HALF_MD4 : u8 = 0;$/;"	c
DEF_HASH_VERSION_LEGACY	kernel/src/fs/ext4.rs	/^const DEF_HASH_VERSION_LEGACY : u8 = 0;$/;"	c
DEF_HASH_VERSION_TEA	kernel/src/fs/ext4.rs	/^const DEF_HASH_VERSION_TEA : u8 = 0;$/;"	c
DEF_HASH_VERSION_UHALF_MD4	kernel/src/fs/ext4.rs	/^const DEF_HASH_VERSION_UHALF_MD4 : u8 = 0;$/;"	c
DEF_HASH_VERSION_ULAGACY	kernel/src/fs/ext4.rs	/^const DEF_HASH_VERSION_ULAGACY : u8 = 0;$/;"	c
DEF_HASH_VERSION_UTEA	kernel/src/fs/ext4.rs	/^const DEF_HASH_VERSION_UTEA : u8 = 0;$/;"	c
DEL	kernel/src/kernel/console.rs	/^const DEL : i8 = 0x7f;$/;"	c
DENTRY_KILLED	kernel/src/fs/dcache.rs	/^        const DENTRY_KILLED = 0x4000;$/;"	c
DEVICES	kernel/src/kernel/device.rs	/^static mut DEVICES : BTreeMap<DevT, Vec<Device>> = BTreeMap::<DevT, Vec<Device>>::new();$/;"	c
DEVICES_DRIVER	kernel/src/kernel/device.rs	/^static mut DEVICES_DRIVER : BTreeMap<DevT, Driver> = BTreeMap::<DevT, Driver>::new();$/;"	c
DEV_CMD_SECTOR_COUNT	kernel/src/kernel/device.rs	/^pub const DEV_CMD_SECTOR_COUNT : i64 = 2;$/;"	c
DEV_CMD_SECTOR_START	kernel/src/kernel/device.rs	/^pub const DEV_CMD_SECTOR_START : i64 = 1;$/;"	c
DEV_FS	kernel/src/mm/shmem.rs	/^pub static mut DEV_FS : *mut ShmemSbInfo = null_mut();$/;"	c
DEV_NAME_LEN	kernel/src/kernel/device.rs	/^pub const DEV_NAME_LEN : usize = 64;$/;"	c
DEV_NULL	kernel/src/kernel/device.rs	/^pub const DEV_NULL : u32 = 0;$/;"	c
DEntry	kernel/src/fs/dcache.rs	/^impl DEntry$/;"	i
DEntry	kernel/src/fs/dcache.rs	/^pub struct DEntry$/;"	s
DEntryFlags	kernel/src/fs/dcache.rs	/^    pub struct DEntryFlags : u32$/;"	s
DEntryOperations	kernel/src/fs/dcache.rs	/^impl DEntryOperations {$/;"	i
DEntryOperations	kernel/src/fs/dcache.rs	/^pub struct DEntryOperations$/;"	s
DISALLOW_NOTIFY_PERM	kernel/src/fs/fs.rs	/^        const DISALLOW_NOTIFY_PERM = bit!(4);$/;"	c
DISCONNECTED	kernel/src/fs/dcache.rs	/^        const DISCONNECTED = 0x20;$/;"	c
DONTCACHE	kernel/src/fs/dcache.rs	/^        const DONTCACHE = 0x80;$/;"	c
DOOMED	kernel/src/fs/mount.rs	/^        const DOOMED = 0x1000000;$/;"	c
Default for SpinLock	kernel/src/kernel/semaphore.rs	/^impl Default for SpinLock {$/;"	i
DeleteFunc	kernel/src/fs/dcache.rs	/^pub type DeleteFunc = fn(&mut DEntry) -> i64;$/;"	T
DescriptorT	kernel/src/kernel/global.rs	/^    pub struct DescriptorT(u64);$/;"	s
DescriptorT	kernel/src/kernel/interrupt.rs	/^    pub struct DescriptorT(u128);$/;"	s
DescriptorT	kernel/src/kernel/interrupt.rs	/^impl DescriptorT$/;"	i
DevReqType	kernel/src/kernel/device.rs	/^pub enum DevReqType$/;"	g
DevT	kernel/src/kernel/device.rs	/^pub type DevT = u32;$/;"	T
Device	kernel/src/kernel/device.rs	/^impl Device {$/;"	i
Device	kernel/src/kernel/device.rs	/^pub struct Device$/;"	s
DeviceIoCtlFn	kernel/src/kernel/device.rs	/^pub type DeviceIoCtlFn = fn(dev : *mut c_void, cmd : i64, args : *mut c_void, flags : u32) -> i64;$/;"	T
DeviceReadFn	kernel/src/kernel/device.rs	/^pub type DeviceReadFn = fn(dev : *mut c_void, idx : Idx, count : usize, buf : *mut c_void, flags : u32) -> i64;$/;"	T
DeviceType	kernel/src/kernel/device.rs	/^pub enum DeviceType {$/;"	g
DeviceWriteFn	kernel/src/kernel/device.rs	/^pub type DeviceWriteFn = fn(dev : *mut c_void, idx : Idx, count : usize, buf : *mut c_void,  flags : u32) -> i64;$/;"	T
DirEntry	kernel/src/fs/file.rs	/^impl DirEntry {$/;"	i
DirEntry	kernel/src/fs/file.rs	/^pub struct DirEntry$/;"	s
Display for Pml4Entry	kernel/src/mm/memory.rs	/^impl Display for Pml4Entry {$/;"	i
DptByte	kernel/src/fs/ntfs.rs	/^pub struct DptByte $/;"	s
Driver	kernel/src/kernel/device.rs	/^struct Driver$/;"	s
E2BIG	kernel/src/kernel/errno_base.rs	/^pub const E2BIG : Err = 7;	\/* Argument list too long *\/$/;"	c
E820Map	kernel/src/mm/memory.rs	/^struct E820Map$/;"	s
EACCES	kernel/src/kernel/errno_base.rs	/^pub const EACCES : Err = 13;	\/* Permission denied *\/$/;"	c
EAGAIN	kernel/src/kernel/errno_base.rs	/^pub const EAGAIN : Err = 11;	\/* Try again *\/$/;"	c
EBADCOOKIE	kernel/src/kernel/errno_base.rs	/^pub const EBADCOOKIE : Err = 523;	\/* Cookie is stale *\/$/;"	c
EBADF	kernel/src/kernel/errno_base.rs	/^pub const EBADF : Err = 9;	\/* Bad file number *\/$/;"	c
EBADHANDLE	kernel/src/kernel/errno_base.rs	/^pub const EBADHANDLE : Err = 521;	\/* Illegal NFS file handle *\/$/;"	c
EBADTYPE	kernel/src/kernel/errno_base.rs	/^pub const EBADTYPE : Err = 527;	\/* Type not supported by server *\/$/;"	c
EBUSY	kernel/src/kernel/errno_base.rs	/^pub const EBUSY : Err = 16;	\/* Device or resource busy *\/$/;"	c
ECHILD	kernel/src/kernel/errno_base.rs	/^pub const ECHILD : Err = 10;	\/* No child processes *\/$/;"	c
ECX_AESNI	kernel/src/kernel/cpu.rs	/^        const ECX_AESNI = 0x2000000;$/;"	c
ECX_AVX	kernel/src/kernel/cpu.rs	/^        const ECX_AVX = 0x10000000;$/;"	c
ECX_CMPXCHG16B	kernel/src/kernel/cpu.rs	/^        const ECX_CMPXCHG16B = 0x2000;$/;"	c
ECX_CNXT_ID	kernel/src/kernel/cpu.rs	/^        const ECX_CNXT_ID = 0x400;$/;"	c
ECX_DCA	kernel/src/kernel/cpu.rs	/^        const ECX_DCA = 0x40000;$/;"	c
ECX_DS_CPL	kernel/src/kernel/cpu.rs	/^        const ECX_DS_CPL = 0x10;$/;"	c
ECX_DTES64	kernel/src/kernel/cpu.rs	/^        const ECX_DTES64 = 0x4;$/;"	c
ECX_EIST	kernel/src/kernel/cpu.rs	/^        const ECX_EIST = 0x80;$/;"	c
ECX_F16C	kernel/src/kernel/cpu.rs	/^        const ECX_F16C = 0x20000000;$/;"	c
ECX_FMA	kernel/src/kernel/cpu.rs	/^        const ECX_FMA = 0x1000;$/;"	c
ECX_MONITOR	kernel/src/kernel/cpu.rs	/^        const ECX_MONITOR = 0x8;$/;"	c
ECX_MOVBE	kernel/src/kernel/cpu.rs	/^        const ECX_MOVBE = 0x400000;$/;"	c
ECX_OSXSAVE	kernel/src/kernel/cpu.rs	/^        const ECX_OSXSAVE = 0x8000000;$/;"	c
ECX_PCID	kernel/src/kernel/cpu.rs	/^        const ECX_PCID = 0x20000;$/;"	c
ECX_PCLMULQDQ	kernel/src/kernel/cpu.rs	/^        const ECX_PCLMULQDQ = 0x2;$/;"	c
ECX_PDCM	kernel/src/kernel/cpu.rs	/^        const ECX_PDCM = 0x8000;$/;"	c
ECX_POPCNT	kernel/src/kernel/cpu.rs	/^        const ECX_POPCNT = 0x800000;$/;"	c
ECX_RDRAND	kernel/src/kernel/cpu.rs	/^        const ECX_RDRAND = 0x40000000;$/;"	c
ECX_SDBG	kernel/src/kernel/cpu.rs	/^        const ECX_SDBG = 0x800;$/;"	c
ECX_SMX	kernel/src/kernel/cpu.rs	/^        const ECX_SMX = 0x40;$/;"	c
ECX_SSE3	kernel/src/kernel/cpu.rs	/^        const ECX_SSE3 = 0x1;$/;"	c
ECX_SSE4_1	kernel/src/kernel/cpu.rs	/^        const ECX_SSE4_1 = 0x80000;$/;"	c
ECX_SSE4_2	kernel/src/kernel/cpu.rs	/^        const ECX_SSE4_2 = 0x100000;$/;"	c
ECX_SSS3	kernel/src/kernel/cpu.rs	/^        const ECX_SSS3 = 0x200;$/;"	c
ECX_TM2	kernel/src/kernel/cpu.rs	/^        const ECX_TM2 = 0x100;$/;"	c
ECX_TSCD	kernel/src/kernel/cpu.rs	/^        const ECX_TSCD = 0x1000000;$/;"	c
ECX_VMX	kernel/src/kernel/cpu.rs	/^        const ECX_VMX = 0x20;$/;"	c
ECX_X2APIC	kernel/src/kernel/cpu.rs	/^        const ECX_X2APIC = 0x200000;$/;"	c
ECX_XSAVE	kernel/src/kernel/cpu.rs	/^        const ECX_XSAVE = 0x4000000;$/;"	c
ECX_XTPR	kernel/src/kernel/cpu.rs	/^        const ECX_XTPR = 0x4000;$/;"	c
EDOM	kernel/src/kernel/errno_base.rs	/^pub const EDOM : Err = 33;	\/* Math argument out of domain of func *\/$/;"	c
EDX_ACPI	kernel/src/kernel/cpu.rs	/^        const EDX_ACPI = 0x400000;     \/\/ 22 Thermal Monitor and Clock Ctrl$/;"	c
EDX_APIC	kernel/src/kernel/cpu.rs	/^        const EDX_APIC = 0x200;     \/\/ 9 APIC on Chip$/;"	c
EDX_CLFSH	kernel/src/kernel/cpu.rs	/^        const EDX_CLFSH = 0x80000;    \/\/ 19 CLFLUSH instruction$/;"	c
EDX_CMOV	kernel/src/kernel/cpu.rs	/^        const EDX_CMOV = 0x8000;     \/\/ 15 Conditional Move\/Compare Instruction$/;"	c
EDX_CX8	kernel/src/kernel/cpu.rs	/^        const EDX_CX8 = 0x100;      \/\/ 8 CMPXCHG8B Inst.$/;"	c
EDX_DE	kernel/src/kernel/cpu.rs	/^        const EDX_DE = 0x4;       \/\/ 2 Debugging Extensions$/;"	c
EDX_DS	kernel/src/kernel/cpu.rs	/^        const EDX_DS = 0x200000;       \/\/ 21 Debug Store$/;"	c
EDX_FPU	kernel/src/kernel/cpu.rs	/^        const EDX_FPU = 0x1;      \/\/ 0 x87 FPU on Chip$/;"	c
EDX_FXSR	kernel/src/kernel/cpu.rs	/^        const EDX_FXSR = 0x1000000;     \/\/ 24 FXSAVE\/FXRSTOR$/;"	c
EDX_HTT	kernel/src/kernel/cpu.rs	/^        const EDX_HTT = 0x10000000;      \/\/ 28 Multi-threading$/;"	c
EDX_MCA	kernel/src/kernel/cpu.rs	/^        const EDX_MCA = 0x4000;      \/\/ 14 Machine Check Architecture$/;"	c
EDX_MCE	kernel/src/kernel/cpu.rs	/^        const EDX_MCE = 0x80;      \/\/ 7 Machine Check Exception$/;"	c
EDX_MMX	kernel/src/kernel/cpu.rs	/^        const EDX_MMX = 0x800000;      \/\/ 23 MMX Technology$/;"	c
EDX_MSR	kernel/src/kernel/cpu.rs	/^        const EDX_MSR = 0x20;      \/\/ 5 RDMSR and WRMSR Support$/;"	c
EDX_MTRR	kernel/src/kernel/cpu.rs	/^        const EDX_MTRR = 0x1000;     \/\/ 12 Memory Type Range Registers$/;"	c
EDX_PAE	kernel/src/kernel/cpu.rs	/^        const EDX_PAE = 0x40;      \/\/ 6 Physical Address Extensions$/;"	c
EDX_PAT	kernel/src/kernel/cpu.rs	/^        const EDX_PAT = 0x10000;      \/\/ 16 Page Attribute Table$/;"	c
EDX_PBE	kernel/src/kernel/cpu.rs	/^        const EDX_PBE = 0x80000000;      \/\/ 31 Pend. Brk. EN.$/;"	c
EDX_PGE	kernel/src/kernel/cpu.rs	/^        const EDX_PGE = 0x2000;      \/\/ 13 PTE Global Bit$/;"	c
EDX_PSE	kernel/src/kernel/cpu.rs	/^        const EDX_PSE = 0x8;      \/\/ 3 Page Size Extensions$/;"	c
EDX_PSE36	kernel/src/kernel/cpu.rs	/^        const EDX_PSE36 = 0x20000;    \/\/ 17 Page Size Extension$/;"	c
EDX_PSN	kernel/src/kernel/cpu.rs	/^        const EDX_PSN = 0x40000;      \/\/ 18 Processor Serial Number$/;"	c
EDX_SEP	kernel/src/kernel/cpu.rs	/^        const EDX_SEP = 0x800;      \/\/ 11 SYSENTER and SYSEXIT$/;"	c
EDX_SS	kernel/src/kernel/cpu.rs	/^        const EDX_SS = 0x8000000;       \/\/ 27 Self Snoop$/;"	c
EDX_SSE	kernel/src/kernel/cpu.rs	/^        const EDX_SSE = 0x2000000;      \/\/ 25 SSE Extensions$/;"	c
EDX_SSE2	kernel/src/kernel/cpu.rs	/^        const EDX_SSE2 = 0x4000000;     \/\/ 26 SSE2 Extensions$/;"	c
EDX_TM	kernel/src/kernel/cpu.rs	/^        const EDX_TM = 0x20000000;       \/\/ 29 Therm. Monitor$/;"	c
EDX_TSC	kernel/src/kernel/cpu.rs	/^        const EDX_TSC = 0x10;      \/\/ 4 Time Stamp Counter$/;"	c
EDX_VME	kernel/src/kernel/cpu.rs	/^        const EDX_VME = 0x2;      \/\/ 1 Virtual-8086 Mode Enhancement$/;"	c
EEXIST	kernel/src/kernel/errno_base.rs	/^pub const EEXIST : Err = 17;	\/* File exists *\/$/;"	c
EFAULT	kernel/src/kernel/errno_base.rs	/^pub const EFAULT : Err = 14;	\/* Bad address *\/$/;"	c
EFBIG	kernel/src/kernel/errno_base.rs	/^pub const EFBIG : Err = 27;	\/* File too large *\/$/;"	c
EINTR	kernel/src/kernel/errno_base.rs	/^pub const EINTR : Err = 4;	\/* Interrupted system call *\/$/;"	c
EINVAL	kernel/src/kernel/errno_base.rs	/^pub const EINVAL : Err = 22;	\/* Invalid argument *\/$/;"	c
EIO	kernel/src/kernel/errno_base.rs	/^pub const EIO : Err = 5;	\/* I\/O error *\/$/;"	c
EIOCBQUEUED	kernel/src/kernel/errno_base.rs	/^pub const EIOCBQUEUED : Err = 529;	\/* iocb queued, will get completion event *\/$/;"	c
EISDIR	kernel/src/kernel/errno_base.rs	/^pub const EISDIR : Err = 21;	\/* Is a directory *\/$/;"	c
EI_NIDENT	kernel/src/kernel/elf64.rs	/^const EI_NIDENT : usize = 0x10;$/;"	c
EJUKEBOX	kernel/src/kernel/errno_base.rs	/^pub const EJUKEBOX : Err = 528;	\/* Request initiated, but will not complete before timeout *\/$/;"	c
EMFILE	kernel/src/kernel/errno_base.rs	/^pub const EMFILE : Err = 24;	\/* Too many open files *\/$/;"	c
EMLINK	kernel/src/kernel/errno_base.rs	/^pub const EMLINK : Err = 31;	\/* Too many links *\/$/;"	c
EM_386	kernel/src/kernel/elf64.rs	/^const EM_386 : u16 = 3;            \/\/ Intel 386$/;"	c
EM_56800EX	kernel/src/kernel/elf64.rs	/^const EM_56800EX : u16 = 200;       \/\/ Freescale 56800EX Digital Signal Controller (DSC)$/;"	c
EM_68HC05	kernel/src/kernel/elf64.rs	/^const EM_68HC05 : u16 = 72;        \/\/ Motorola MC68HC05 Microcontroller$/;"	c
EM_68HC08	kernel/src/kernel/elf64.rs	/^const EM_68HC08 : u16 = 71;        \/\/ Motorola MC68HC08 Microcontroller$/;"	c
EM_68HC11	kernel/src/kernel/elf64.rs	/^const EM_68HC11 : u16 = 70;        \/\/ Motorola MC68HC11 Microcontroller$/;"	c
EM_68HC12	kernel/src/kernel/elf64.rs	/^const EM_68HC12 : u16 = 53;        \/\/ Motorola M68HC12$/;"	c
EM_68HC16	kernel/src/kernel/elf64.rs	/^const EM_68HC16 : u16 = 69;        \/\/ Motorola MC68HC16 Microcontroller$/;"	c
EM_68K	kernel/src/kernel/elf64.rs	/^const EM_68K : u16 = 4;            \/\/ Motorola 68000$/;"	c
EM_78KOR	kernel/src/kernel/elf64.rs	/^const EM_78KOR : u16 = 199;         \/\/ Renesas 78KOR family$/;"	c
EM_8051	kernel/src/kernel/elf64.rs	/^const EM_8051 : u16 = 165;          \/\/ Intel 8051 and variants$/;"	c
EM_860	kernel/src/kernel/elf64.rs	/^const EM_860 : u16 = 7;            \/\/ Intel 80860$/;"	c
EM_88K	kernel/src/kernel/elf64.rs	/^const EM_88K : u16 = 5;            \/\/ Motorola 88000$/;"	c
EM_960	kernel/src/kernel/elf64.rs	/^const EM_960 : u16 = 19;           \/\/ Intel 80960$/;"	c
EM_AARCH64	kernel/src/kernel/elf64.rs	/^const EM_AARCH64 : u16 = 183;       \/\/ ARM AArch64$/;"	c
EM_ALPHA	kernel/src/kernel/elf64.rs	/^const EM_ALPHA : u16 = 41;         \/\/ DEC Alpha$/;"	c
EM_ALTERA_NIOS2	kernel/src/kernel/elf64.rs	/^const EM_ALTERA_NIOS2 : u16 = 113; \/\/ Altera Nios II soft-core processor$/;"	c
EM_AMDGPU	kernel/src/kernel/elf64.rs	/^const EM_AMDGPU : u16 = 224;        \/\/ AMD GPU architecture$/;"	c
EM_ARC	kernel/src/kernel/elf64.rs	/^const EM_ARC : u16 = 45;           \/\/ Argonaut RISC Core$/;"	c
EM_ARCA	kernel/src/kernel/elf64.rs	/^const EM_ARCA : u16 = 109;         \/\/ Arca RISC Microprocessor$/;"	c
EM_ARC_COMPACT	kernel/src/kernel/elf64.rs	/^const EM_ARC_COMPACT : u16 = 93;   \/\/ ARC International ARCompact processor (old$/;"	c
EM_ARC_COMPACT2	kernel/src/kernel/elf64.rs	/^const EM_ARC_COMPACT2 : u16 = 195;  \/\/ Synopsys ARCompact V2$/;"	c
EM_ARM	kernel/src/kernel/elf64.rs	/^const EM_ARM : u16 = 40;           \/\/ ARM$/;"	c
EM_AVR	kernel/src/kernel/elf64.rs	/^const EM_AVR : u16 = 83;           \/\/ Atmel AVR 8-bit microcontroller$/;"	c
EM_AVR32	kernel/src/kernel/elf64.rs	/^const EM_AVR32 : u16 = 185;         \/\/ Atmel Corporation 32-bit microprocessor family$/;"	c
EM_BA1	kernel/src/kernel/elf64.rs	/^const EM_BA1 : u16 = 201;           \/\/ Beyond BA1 CPU architecture$/;"	c
EM_BA2	kernel/src/kernel/elf64.rs	/^const EM_BA2 : u16 = 202;           \/\/ Beyond BA2 CPU architecture$/;"	c
EM_BLACKFIN	kernel/src/kernel/elf64.rs	/^const EM_BLACKFIN : u16 = 106;     \/\/ Analog Devices Blackfin (DSP) processor$/;"	c
EM_BPF	kernel/src/kernel/elf64.rs	/^const EM_BPF : u16 = 247;           \/\/ Linux kernel bpf virtual machine$/;"	c
EM_C166	kernel/src/kernel/elf64.rs	/^const EM_C166 : u16 = 116;         \/\/ Infineon C16x\/XC16x processor$/;"	c
EM_CDP	kernel/src/kernel/elf64.rs	/^const EM_CDP : u16 = 215;           \/\/ Paneve CDP architecture family$/;"	c
EM_CE	kernel/src/kernel/elf64.rs	/^const EM_CE : u16 = 119;           \/\/ Freescale Communication Engine RISC core$/;"	c
EM_CLOUDSHIELD	kernel/src/kernel/elf64.rs	/^const EM_CLOUDSHIELD : u16 = 192;   \/\/ CloudShield architecture family$/;"	c
EM_COGE	kernel/src/kernel/elf64.rs	/^const EM_COGE : u16 = 216;          \/\/ Cognitive Smart Memory Processor$/;"	c
EM_COLDFIRE	kernel/src/kernel/elf64.rs	/^const EM_COLDFIRE : u16 = 52;      \/\/ Motorola ColdFire$/;"	c
EM_COOL	kernel/src/kernel/elf64.rs	/^const EM_COOL : u16 = 217;          \/\/ iCelero CoolEngine$/;"	c
EM_COREA_1ST	kernel/src/kernel/elf64.rs	/^const EM_COREA_1ST : u16 = 193;     \/\/ KIPO-KAIST Core-A 1st generation processor family$/;"	c
EM_COREA_2ND	kernel/src/kernel/elf64.rs	/^const EM_COREA_2ND : u16 = 194;     \/\/ KIPO-KAIST Core-A 2nd generation processor family$/;"	c
EM_CR	kernel/src/kernel/elf64.rs	/^const EM_CR : u16 = 103;           \/\/ National Semiconductor CompactRISC microprocessor$/;"	c
EM_CR16	kernel/src/kernel/elf64.rs	/^const EM_CR16 : u16 = 177;          \/\/ National Semiconductor CompactRISC CR16 16-bit$/;"	c
EM_CRAYNV2	kernel/src/kernel/elf64.rs	/^const EM_CRAYNV2 : u16 = 172;       \/\/ Cray Inc. NV2 vector architecture$/;"	c
EM_CRIS	kernel/src/kernel/elf64.rs	/^const EM_CRIS : u16 = 76;          \/\/ Axis Communications 32-bit embedded processor$/;"	c
EM_CRX	kernel/src/kernel/elf64.rs	/^const EM_CRX : u16 = 114;          \/\/ National Semiconductor CompactRISC CRX$/;"	c
EM_CSKY	kernel/src/kernel/elf64.rs	/^const EM_CSKY : u16 = 252;          \/\/ C-SKY 32-bit processor$/;"	c
EM_CSR_KALIMBA	kernel/src/kernel/elf64.rs	/^const EM_CSR_KALIMBA : u16 = 219;   \/\/ CSR Kalimba architecture family$/;"	c
EM_CUDA	kernel/src/kernel/elf64.rs	/^const EM_CUDA : u16 = 190;          \/\/ NVIDIA CUDA architecture$/;"	c
EM_CYPRESS_M8C	kernel/src/kernel/elf64.rs	/^const EM_CYPRESS_M8C : u16 = 161;   \/\/ Cypress M8C microprocessor$/;"	c
EM_D10V	kernel/src/kernel/elf64.rs	/^const EM_D10V : u16 = 85;          \/\/ Mitsubishi D10V$/;"	c
EM_D30V	kernel/src/kernel/elf64.rs	/^const EM_D30V : u16 = 86;          \/\/ Mitsubishi D30V$/;"	c
EM_DSP24	kernel/src/kernel/elf64.rs	/^const EM_DSP24 : u16 = 136;        \/\/ New Japan Radio (NJR) 24-bit DSP Processor$/;"	c
EM_DSPIC30F	kernel/src/kernel/elf64.rs	/^const EM_DSPIC30F : u16 = 118;     \/\/ Microchip Technology dsPIC30F Digital Signal$/;"	c
EM_DXP	kernel/src/kernel/elf64.rs	/^const EM_DXP : u16 = 112;          \/\/ Icera Semiconductor Inc. Deep Execution Processor$/;"	c
EM_ECOG1	kernel/src/kernel/elf64.rs	/^const EM_ECOG1 : u16 = 168;         \/\/ Cyan Technology eCOG1X family$/;"	c
EM_ECOG16	kernel/src/kernel/elf64.rs	/^const EM_ECOG16 : u16 = 176;        \/\/ Cyan Technology eCOG16 family$/;"	c
EM_ECOG1X	kernel/src/kernel/elf64.rs	/^const EM_ECOG1X : u16 = 168;        \/\/ Cyan Technology eCOG1X family$/;"	c
EM_ECOG2	kernel/src/kernel/elf64.rs	/^const EM_ECOG2 : u16 = 134;        \/\/ Cyan Technology eCOG2 microprocessor$/;"	c
EM_ETPU	kernel/src/kernel/elf64.rs	/^const EM_ETPU : u16 = 178;          \/\/ Freescale Extended Time Processing Unit$/;"	c
EM_EXCESS	kernel/src/kernel/elf64.rs	/^const EM_EXCESS : u16 = 111;       \/\/ eXcess: 16\/32\/64-bit configurable embedded CPU$/;"	c
EM_F2MC16	kernel/src/kernel/elf64.rs	/^const EM_F2MC16 : u16 = 104;       \/\/ Fujitsu F2MC16$/;"	c
EM_FIREPATH	kernel/src/kernel/elf64.rs	/^const EM_FIREPATH : u16 = 78;      \/\/ Element 14 64-bit DSP Processor$/;"	c
EM_FR20	kernel/src/kernel/elf64.rs	/^const EM_FR20 : u16 = 37;          \/\/ Fujitsu FR20$/;"	c
EM_FR30	kernel/src/kernel/elf64.rs	/^const EM_FR30 : u16 = 84;          \/\/ Fujitsu FR30$/;"	c
EM_FX66	kernel/src/kernel/elf64.rs	/^const EM_FX66 : u16 = 66;          \/\/ Siemens FX66 microcontroller$/;"	c
EM_H8S	kernel/src/kernel/elf64.rs	/^const EM_H8S : u16 = 48;           \/\/ Hitachi H8S$/;"	c
EM_H8_300	kernel/src/kernel/elf64.rs	/^const EM_H8_300 : u16 = 46;        \/\/ Hitachi H8\/300$/;"	c
EM_H8_300H	kernel/src/kernel/elf64.rs	/^const EM_H8_300H : u16 = 47;       \/\/ Hitachi H8\/300H$/;"	c
EM_H8_500	kernel/src/kernel/elf64.rs	/^const EM_H8_500 : u16 = 49;        \/\/ Hitachi H8\/500$/;"	c
EM_HEXAGON	kernel/src/kernel/elf64.rs	/^const EM_HEXAGON : u16 = 164;       \/\/ Qualcomm Hexagon processor$/;"	c
EM_HUANY	kernel/src/kernel/elf64.rs	/^const EM_HUANY : u16 = 81;         \/\/ Harvard University machine-independent object files$/;"	c
EM_IAMCU	kernel/src/kernel/elf64.rs	/^const EM_IAMCU : u16 = 6;          \/\/ Intel MCU$/;"	c
EM_IA_64	kernel/src/kernel/elf64.rs	/^const EM_IA_64 : u16 = 50;         \/\/ Intel IA-64 processor architecture$/;"	c
EM_INTEL205	kernel/src/kernel/elf64.rs	/^const EM_INTEL205 : u16 = 205;      \/\/ Reserved by Intel$/;"	c
EM_INTEL206	kernel/src/kernel/elf64.rs	/^const EM_INTEL206 : u16 = 206;      \/\/ Reserved by Intel$/;"	c
EM_INTEL207	kernel/src/kernel/elf64.rs	/^const EM_INTEL207 : u16 = 207;      \/\/ Reserved by Intel$/;"	c
EM_INTEL208	kernel/src/kernel/elf64.rs	/^const EM_INTEL208 : u16 = 208;      \/\/ Reserved by Intel$/;"	c
EM_INTEL209	kernel/src/kernel/elf64.rs	/^const EM_INTEL209 : u16 = 209;      \/\/ Reserved by Intel$/;"	c
EM_IP2K	kernel/src/kernel/elf64.rs	/^const EM_IP2K : u16 = 101;         \/\/ Ubicom IP2xxx microcontroller family$/;"	c
EM_JAVELIN	kernel/src/kernel/elf64.rs	/^const EM_JAVELIN : u16 = 77;       \/\/ Infineon Technologies 32-bit embedded processor$/;"	c
EM_K10M	kernel/src/kernel/elf64.rs	/^const EM_K10M : u16 = 181;          \/\/ Intel K10M$/;"	c
EM_KM32	kernel/src/kernel/elf64.rs	/^const EM_KM32 : u16 = 210;          \/\/ KM211 KM32 32-bit processor$/;"	c
EM_KMX16	kernel/src/kernel/elf64.rs	/^const EM_KMX16 : u16 = 212;         \/\/ KM211 KMX16 16-bit processor$/;"	c
EM_KMX32	kernel/src/kernel/elf64.rs	/^const EM_KMX32 : u16 = 211;         \/\/ KM211 KMX32 32-bit processor$/;"	c
EM_KMX8	kernel/src/kernel/elf64.rs	/^const EM_KMX8 : u16 = 213;          \/\/ KM211 KMX8 8-bit processor$/;"	c
EM_KVARC	kernel/src/kernel/elf64.rs	/^const EM_KVARC : u16 = 214;         \/\/ KM211 KVARC processor$/;"	c
EM_L10M	kernel/src/kernel/elf64.rs	/^const EM_L10M : u16 = 180;          \/\/ Intel L10M$/;"	c
EM_LANAI	kernel/src/kernel/elf64.rs	/^const EM_LANAI : u16 = 244;         \/\/ Lanai 32-bit processor$/;"	c
EM_LATTICEMICO32	kernel/src/kernel/elf64.rs	/^const EM_LATTICEMICO32 : u16 = 138; \/\/ RISC processor for Lattice FPGA architecture$/;"	c
EM_LOONGARCH	kernel/src/kernel/elf64.rs	/^const EM_LOONGARCH : u16  = 258;     \/\/ LoongArch$/;"	c
EM_M16C	kernel/src/kernel/elf64.rs	/^const EM_M16C : u16 = 117;         \/\/ Renesas M16C series microprocessors$/;"	c
EM_M32	kernel/src/kernel/elf64.rs	/^const EM_M32 : u16 = 1;            \/\/ AT&T WE 32100$/;"	c
EM_M32C	kernel/src/kernel/elf64.rs	/^const EM_M32C : u16 = 120;         \/\/ Renesas M32C series microprocessors$/;"	c
EM_M32R	kernel/src/kernel/elf64.rs	/^const EM_M32R : u16 = 88;          \/\/ Mitsubishi M32R$/;"	c
EM_MANIK	kernel/src/kernel/elf64.rs	/^const EM_MANIK : u16 = 171;         \/\/ M2000 Reconfigurable RISC Microprocessor$/;"	c
EM_MAX	kernel/src/kernel/elf64.rs	/^const EM_MAX : u16 = 102;          \/\/ MAX Processor$/;"	c
EM_MAXQ30	kernel/src/kernel/elf64.rs	/^const EM_MAXQ30 : u16 = 169;        \/\/ Dallas Semiconductor MAXQ30 Core Micro-controllers$/;"	c
EM_MCHP_PIC	kernel/src/kernel/elf64.rs	/^const EM_MCHP_PIC : u16 = 204;      \/\/ Microchip 8-bit PIC(r) family$/;"	c
EM_MCST_ELBRUS	kernel/src/kernel/elf64.rs	/^const EM_MCST_ELBRUS : u16 = 175;   \/\/ MCST Elbrus general purpose hardware architecture$/;"	c
EM_ME16	kernel/src/kernel/elf64.rs	/^const EM_ME16 : u16 = 59;          \/\/ Toyota ME16 processor$/;"	c
EM_METAG	kernel/src/kernel/elf64.rs	/^const EM_METAG : u16 = 174;         \/\/ Imagination Technologies META processor$/;"	c
EM_MICROBLAZE	kernel/src/kernel/elf64.rs	/^const EM_MICROBLAZE : u16 = 189;    \/\/ Xilinx MicroBlaze 32-bit RISC soft processor core$/;"	c
EM_MIPS	kernel/src/kernel/elf64.rs	/^const EM_MIPS : u16 = 8;           \/\/ MIPS R3000$/;"	c
EM_MIPS_RS3_LE	kernel/src/kernel/elf64.rs	/^const EM_MIPS_RS3_LE : u16 = 10;   \/\/ MIPS RS3000 Little-endian$/;"	c
EM_MIPS_X	kernel/src/kernel/elf64.rs	/^const EM_MIPS_X : u16 = 51;        \/\/ Stanford MIPS-X$/;"	c
EM_MMA	kernel/src/kernel/elf64.rs	/^const EM_MMA : u16 = 54;           \/\/ Fujitsu MMA Multimedia Accelerator$/;"	c
EM_MMDSP_PLUS	kernel/src/kernel/elf64.rs	/^const EM_MMDSP_PLUS : u16 = 160;    \/\/ STMicroelectronics 64bit VLIW Data Signal Processor$/;"	c
EM_MMIX	kernel/src/kernel/elf64.rs	/^const EM_MMIX : u16 = 80;          \/\/ Donald Knuth's educational 64-bit processor$/;"	c
EM_MN10200	kernel/src/kernel/elf64.rs	/^const EM_MN10200 : u16 = 90;       \/\/ Matsushita MN10200$/;"	c
EM_MN10300	kernel/src/kernel/elf64.rs	/^const EM_MN10300 : u16 = 89;       \/\/ Matsushita MN10300$/;"	c
EM_MSP430	kernel/src/kernel/elf64.rs	/^const EM_MSP430 : u16 = 105;       \/\/ Texas Instruments embedded microcontroller msp430$/;"	c
EM_NCPU	kernel/src/kernel/elf64.rs	/^const EM_NCPU : u16 = 56;          \/\/ Sony nCPU embedded RISC processor$/;"	c
EM_NDR1	kernel/src/kernel/elf64.rs	/^const EM_NDR1 : u16 = 57;          \/\/ Denso NDR1 microprocessor$/;"	c
EM_NDS32	kernel/src/kernel/elf64.rs	/^const EM_NDS32 : u16 = 167;         \/\/ Andes Technology compact code size embedded RISC$/;"	c
EM_NONE	kernel/src/kernel/elf64.rs	/^const EM_NONE : u16 = 0;           \/\/ No machine$/;"	c
EM_NORC	kernel/src/kernel/elf64.rs	/^const EM_NORC : u16 = 218;          \/\/ Nanoradio Optimized RISC$/;"	c
EM_NS32K	kernel/src/kernel/elf64.rs	/^const EM_NS32K : u16 = 97;         \/\/ National Semiconductor 32000 series$/;"	c
EM_OPEN8	kernel/src/kernel/elf64.rs	/^const EM_OPEN8 : u16 = 196;         \/\/ Open8 8-bit RISC soft processor core$/;"	c
EM_OPENRISC	kernel/src/kernel/elf64.rs	/^const EM_OPENRISC : u16 = 92;      \/\/ OpenRISC 32-bit embedded processor$/;"	c
EM_PARISC	kernel/src/kernel/elf64.rs	/^const EM_PARISC : u16 = 15;        \/\/ Hewlett-Packard PA-RISC$/;"	c
EM_PCP	kernel/src/kernel/elf64.rs	/^const EM_PCP : u16 = 55;           \/\/ Siemens PCP$/;"	c
EM_PDP10	kernel/src/kernel/elf64.rs	/^const EM_PDP10 : u16 = 64;         \/\/ Digital Equipment Corp. PDP-10$/;"	c
EM_PDP11	kernel/src/kernel/elf64.rs	/^const EM_PDP11 : u16 = 65;         \/\/ Digital Equipment Corp. PDP-11$/;"	c
EM_PDSP	kernel/src/kernel/elf64.rs	/^const EM_PDSP : u16 = 63;          \/\/ Sony DSP Processor$/;"	c
EM_PJ	kernel/src/kernel/elf64.rs	/^const EM_PJ : u16 = 91;            \/\/ picoJava$/;"	c
EM_PPC	kernel/src/kernel/elf64.rs	/^const EM_PPC : u16 = 20;           \/\/ PowerPC$/;"	c
EM_PPC64	kernel/src/kernel/elf64.rs	/^const EM_PPC64 : u16 = 21;         \/\/ PowerPC64$/;"	c
EM_PRISM	kernel/src/kernel/elf64.rs	/^const EM_PRISM : u16 = 82;         \/\/ SiTera Prism$/;"	c
EM_R32C	kernel/src/kernel/elf64.rs	/^const EM_R32C : u16 = 162;          \/\/ Renesas R32C series microprocessors$/;"	c
EM_RCE	kernel/src/kernel/elf64.rs	/^const EM_RCE : u16 = 39;           \/\/ Motorola RCE$/;"	c
EM_RH32	kernel/src/kernel/elf64.rs	/^const EM_RH32 : u16 = 38;          \/\/ TRW RH-32$/;"	c
EM_RISCV	kernel/src/kernel/elf64.rs	/^const EM_RISCV : u16 = 243;         \/\/ RISC-V$/;"	c
EM_RL78	kernel/src/kernel/elf64.rs	/^const EM_RL78 : u16 = 197;          \/\/ Renesas RL78 family$/;"	c
EM_RS08	kernel/src/kernel/elf64.rs	/^const EM_RS08 : u16 = 132;         \/\/ Freescale RS08 embedded processor$/;"	c
EM_RX	kernel/src/kernel/elf64.rs	/^const EM_RX : u16 = 173;            \/\/ Renesas RX family$/;"	c
EM_S370	kernel/src/kernel/elf64.rs	/^const EM_S370 : u16 = 9;           \/\/ IBM System\/370$/;"	c
EM_S390	kernel/src/kernel/elf64.rs	/^const EM_S390 : u16 = 22;          \/\/ IBM System\/390$/;"	c
EM_SCORE7	kernel/src/kernel/elf64.rs	/^const EM_SCORE7 : u16 = 135;       \/\/ Sunplus S+core7 RISC processor$/;"	c
EM_SEP	kernel/src/kernel/elf64.rs	/^const EM_SEP : u16 = 108;          \/\/ Sharp embedded microprocessor$/;"	c
EM_SE_C17	kernel/src/kernel/elf64.rs	/^const EM_SE_C17 : u16 = 139;        \/\/ Seiko Epson C17 family$/;"	c
EM_SE_C33	kernel/src/kernel/elf64.rs	/^const EM_SE_C33 : u16 = 107;       \/\/ S1C33 Family of Seiko Epson processors$/;"	c
EM_SH	kernel/src/kernel/elf64.rs	/^const EM_SH : u16 = 42;            \/\/ Hitachi SH$/;"	c
EM_SHARC	kernel/src/kernel/elf64.rs	/^const EM_SHARC : u16 = 133;        \/\/ Analog Devices SHARC family of 32-bit DSP$/;"	c
EM_SLE9X	kernel/src/kernel/elf64.rs	/^const EM_SLE9X : u16 = 179;         \/\/ Infineon Technologies SLE9X core$/;"	c
EM_SNP1K	kernel/src/kernel/elf64.rs	/^const EM_SNP1K : u16 = 99;         \/\/ Trebia SNP 1000 processor$/;"	c
EM_SPARC	kernel/src/kernel/elf64.rs	/^const EM_SPARC : u16 = 2;          \/\/ SPARC$/;"	c
EM_SPARC32PLUS	kernel/src/kernel/elf64.rs	/^const EM_SPARC32PLUS : u16 = 18;   \/\/ Enhanced instruction set SPARC$/;"	c
EM_SPARCV9	kernel/src/kernel/elf64.rs	/^const EM_SPARCV9 : u16 = 43;       \/\/ SPARC V9$/;"	c
EM_SPU	kernel/src/kernel/elf64.rs	/^const EM_SPU : u16 = 23;           \/\/ IBM SPU\/SPC$/;"	c
EM_ST100	kernel/src/kernel/elf64.rs	/^const EM_ST100 : u16 = 60;         \/\/ STMicroelectronics ST100 processor$/;"	c
EM_ST19	kernel/src/kernel/elf64.rs	/^const EM_ST19 : u16 = 74;          \/\/ STMicroelectronics ST19 8-bit microcontroller$/;"	c
EM_ST200	kernel/src/kernel/elf64.rs	/^const EM_ST200 : u16 = 100;        \/\/ STMicroelectronics (www.st.com) ST200$/;"	c
EM_ST7	kernel/src/kernel/elf64.rs	/^const EM_ST7 : u16 = 68;           \/\/ STMicroelectronics ST7 8-bit microcontroller$/;"	c
EM_ST9PLUS	kernel/src/kernel/elf64.rs	/^const EM_ST9PLUS : u16 = 67;       \/\/ STMicroelectronics ST9+ 8\/16 bit microcontroller$/;"	c
EM_STARCORE	kernel/src/kernel/elf64.rs	/^const EM_STARCORE : u16 = 58;      \/\/ Motorola Star*Core processor$/;"	c
EM_STM8	kernel/src/kernel/elf64.rs	/^const EM_STM8 : u16 = 186;          \/\/ STMicroeletronics STM8 8-bit microcontroller$/;"	c
EM_STXP7X	kernel/src/kernel/elf64.rs	/^const EM_STXP7X : u16 = 166;        \/\/ STMicroelectronics STxP7x family of configurable$/;"	c
EM_SVX	kernel/src/kernel/elf64.rs	/^const EM_SVX : u16 = 73;           \/\/ Silicon Graphics SVx$/;"	c
EM_TILE64	kernel/src/kernel/elf64.rs	/^const EM_TILE64 : u16 = 187;        \/\/ Tilera TILE64 multicore architecture family$/;"	c
EM_TILEGX	kernel/src/kernel/elf64.rs	/^const EM_TILEGX : u16 = 191;        \/\/ Tilera TILE-Gx multicore architecture family$/;"	c
EM_TILEPRO	kernel/src/kernel/elf64.rs	/^const EM_TILEPRO : u16 = 188;       \/\/ Tilera TILEPro multicore architecture family$/;"	c
EM_TINYJ	kernel/src/kernel/elf64.rs	/^const EM_TINYJ : u16 = 61;         \/\/ Advanced Logic Corp. TinyJ embedded processor family$/;"	c
EM_TI_C2000	kernel/src/kernel/elf64.rs	/^const EM_TI_C2000 : u16 = 141;      \/\/ The Texas Instruments TMS320C2000 DSP family$/;"	c
EM_TI_C5500	kernel/src/kernel/elf64.rs	/^const EM_TI_C5500 : u16 = 142;      \/\/ The Texas Instruments TMS320C55x DSP family$/;"	c
EM_TI_C6000	kernel/src/kernel/elf64.rs	/^const EM_TI_C6000 : u16 = 140;      \/\/ The Texas Instruments TMS320C6000 DSP family$/;"	c
EM_TMM_GPP	kernel/src/kernel/elf64.rs	/^const EM_TMM_GPP : u16 = 96;       \/\/ Thompson Multimedia General Purpose Processor$/;"	c
EM_TPC	kernel/src/kernel/elf64.rs	/^const EM_TPC : u16 = 98;           \/\/ Tenor Network TPC processor$/;"	c
EM_TRICORE	kernel/src/kernel/elf64.rs	/^const EM_TRICORE : u16 = 44;       \/\/ Siemens TriCore$/;"	c
EM_TRIMEDIA	kernel/src/kernel/elf64.rs	/^const EM_TRIMEDIA : u16 = 163;      \/\/ NXP Semiconductors TriMedia architecture family$/;"	c
EM_TSK3000	kernel/src/kernel/elf64.rs	/^const EM_TSK3000 : u16 = 131;      \/\/ Altium TSK3000 core$/;"	c
EM_UNICORE	kernel/src/kernel/elf64.rs	/^const EM_UNICORE : u16 = 110;      \/\/ Microprocessor series from PKU-Unity Ltd. and MPRC$/;"	c
EM_V800	kernel/src/kernel/elf64.rs	/^const EM_V800 : u16 = 36;          \/\/ NEC V800$/;"	c
EM_V850	kernel/src/kernel/elf64.rs	/^const EM_V850 : u16 = 87;          \/\/ NEC v850$/;"	c
EM_VAX	kernel/src/kernel/elf64.rs	/^const EM_VAX : u16 = 75;           \/\/ Digital VAX$/;"	c
EM_VE	kernel/src/kernel/elf64.rs	/^const EM_VE : u16 = 251;            \/\/ NEC SX-Aurora VE$/;"	c
EM_VIDEOCORE	kernel/src/kernel/elf64.rs	/^const EM_VIDEOCORE : u16 = 95;     \/\/ Alphamosaic VideoCore processor$/;"	c
EM_VIDEOCORE3	kernel/src/kernel/elf64.rs	/^const EM_VIDEOCORE3 : u16 = 137;   \/\/ Broadcom VideoCore III processor$/;"	c
EM_VIDEOCORE5	kernel/src/kernel/elf64.rs	/^const EM_VIDEOCORE5 : u16 = 198;    \/\/ Broadcom VideoCore V processor$/;"	c
EM_VPP500	kernel/src/kernel/elf64.rs	/^const EM_VPP500 : u16 = 17;        \/\/ Fujitsu VPP500$/;"	c
EM_X86_64	kernel/src/kernel/elf64.rs	/^const EM_X86_64 : u16 = 62;        \/\/ AMD x86-64 architecture$/;"	c
EM_XCORE	kernel/src/kernel/elf64.rs	/^const EM_XCORE : u16 = 203;         \/\/ XMOS xCORE processor family$/;"	c
EM_XGATE	kernel/src/kernel/elf64.rs	/^const EM_XGATE : u16 = 115;        \/\/ Motorola XGATE embedded processor$/;"	c
EM_XIMO16	kernel/src/kernel/elf64.rs	/^const EM_XIMO16 : u16 = 170;        \/\/ New Japan Radio (NJR) 16-bit DSP Processor$/;"	c
EM_XTENSA	kernel/src/kernel/elf64.rs	/^const EM_XTENSA : u16 = 94;        \/\/ Tensilica Xtensa Architecture$/;"	c
EM_ZSP	kernel/src/kernel/elf64.rs	/^const EM_ZSP : u16 = 79;           \/\/ LSI Logic 16-bit DSP Processor$/;"	c
ENFILE	kernel/src/kernel/errno_base.rs	/^pub const ENFILE : Err = 23;	\/* File table overflow *\/$/;"	c
ENODEV	kernel/src/kernel/errno_base.rs	/^pub const ENODEV : Err = 19;	\/* No such device *\/$/;"	c
ENOENT	kernel/src/kernel/errno_base.rs	/^pub const ENOENT : Err = 2;	\/* No such file or directory *\/$/;"	c
ENOEXEC	kernel/src/kernel/errno_base.rs	/^pub const ENOEXEC : Err = 8;	\/* Exec format error *\/$/;"	c
ENOGRACE	kernel/src/kernel/errno_base.rs	/^pub const ENOGRACE : Err = 531;	\/* NFS file lock reclaim refused *\/$/;"	c
ENOIOCTLCMD	kernel/src/kernel/errno_base.rs	/^pub const ENOIOCTLCMD : Err = 515;	\/* No ioctl command *\/$/;"	c
ENOMEM	kernel/src/kernel/errno_base.rs	/^pub const ENOMEM : Err = 12;	\/* Out of memory *\/$/;"	c
ENOPARAM	kernel/src/kernel/errno_base.rs	/^pub const ENOPARAM : Err = 519;	\/* Parameter not supported *\/$/;"	c
ENOSPC	kernel/src/kernel/errno_base.rs	/^pub const ENOSPC : Err = 28;	\/* No space left on device *\/$/;"	c
ENOTBLK	kernel/src/kernel/errno_base.rs	/^pub const ENOTBLK : Err = 15;	\/* Block device required *\/$/;"	c
ENOTDIR	kernel/src/kernel/errno_base.rs	/^pub const ENOTDIR : Err = 20;	\/* Not a directory *\/$/;"	c
ENOTSUPP	kernel/src/kernel/errno_base.rs	/^pub const ENOTSUPP : Err = 524;	\/* Operation is not supported *\/$/;"	c
ENOTSYNC	kernel/src/kernel/errno_base.rs	/^pub const ENOTSYNC : Err = 522;	\/* Update synchronization mismatch *\/$/;"	c
ENOTTY	kernel/src/kernel/errno_base.rs	/^pub const ENOTTY : Err = 25;	\/* Not a typewriter *\/$/;"	c
ENQ	kernel/src/kernel/console.rs	/^const ENQ : i8 = 0x5;$/;"	c
ENTRYPOINT	Makefile	/^ENTRYPOINT:=0x0xffff800000100000$/;"	m
ENXIO	kernel/src/kernel/errno_base.rs	/^pub const ENXIO : Err = 6;	\/* No such device or address *\/$/;"	c
EOF	kernel/src/fs/file.rs	/^pub const EOF : i64 = -1;$/;"	c
EOPENSTALE	kernel/src/kernel/errno_base.rs	/^pub const EOPENSTALE : Err = 518;	\/* open found a stale dentry *\/$/;"	c
EOS	kernel/src/kernel/string.rs	/^pub const EOS : c_char = 0;$/;"	c
EPERM	kernel/src/kernel/errno_base.rs	/^pub const EPERM : Err = 1;	\/* Operation not permitted *\/$/;"	c
EPIPE	kernel/src/kernel/errno_base.rs	/^pub const EPIPE : Err = 32;	\/* Broken pipe *\/$/;"	c
EPROBE_DEFER	kernel/src/kernel/errno_base.rs	/^pub const EPROBE_DEFER : Err = 517;	\/* Driver requests probe retry *\/$/;"	c
ERANGE	kernel/src/kernel/errno_base.rs	/^pub const ERANGE : Err = 34;	\/* Math result not representable *\/$/;"	c
ERASE	kernel/src/kernel/console.rs	/^const ERASE : u16 = 0x0720;$/;"	c
ERECALLCONFLICT	kernel/src/kernel/errno_base.rs	/^pub const ERECALLCONFLICT : Err = 530;	\/* conflict with recalled state *\/$/;"	c
ERESTARTNOHAND	kernel/src/kernel/errno_base.rs	/^pub const ERESTARTNOHAND : Err = 514;	\/* restart if no handler.. *\/$/;"	c
ERESTARTNOINTR	kernel/src/kernel/errno_base.rs	/^pub const ERESTARTNOINTR : Err = 513;$/;"	c
ERESTARTSYS	kernel/src/kernel/errno_base.rs	/^pub const ERESTARTSYS : Err = 512;$/;"	c
ERESTART_RESTARTBLOCK	kernel/src/kernel/errno_base.rs	/^pub const ERESTART_RESTARTBLOCK : Err = 516; \/* restart by calling sys_restart_syscall *\/$/;"	c
EROFS	kernel/src/kernel/errno_base.rs	/^pub const EROFS : Err = 30;	\/* Read-only file system *\/$/;"	c
ESERVERFAULT	kernel/src/kernel/errno_base.rs	/^pub const ESERVERFAULT : Err = 526;	\/* An untranslatable error occurred *\/$/;"	c
ESPIPE	kernel/src/kernel/errno_base.rs	/^pub const ESPIPE : Err = 29;	\/* Illegal seek *\/$/;"	c
ESRCH	kernel/src/kernel/errno_base.rs	/^pub const ESRCH : Err = 3;	\/* No such process *\/$/;"	c
ETOOSMALL	kernel/src/kernel/errno_base.rs	/^pub const ETOOSMALL : Err = 525;	\/* Buffer or request is too small *\/$/;"	c
ETXTBSY	kernel/src/kernel/errno_base.rs	/^pub const ETXTBSY : Err = 26;	\/* Text file busy *\/$/;"	c
EV_ABS	kernel/src/kernel/input.rs	/^pub const EV_ABS : u16 = 0x03;$/;"	c
EV_CNT	kernel/src/kernel/input.rs	/^pub const EV_CNT : u16 = EV_MAX + 1;$/;"	c
EV_FF	kernel/src/kernel/input.rs	/^pub const EV_FF : u16 = 0x15;$/;"	c
EV_FF_STATUS	kernel/src/kernel/input.rs	/^pub const EV_FF_STATUS : u16 = 0x17;$/;"	c
EV_KEY	kernel/src/kernel/input.rs	/^pub const EV_KEY : u16 = 0x01;$/;"	c
EV_LED	kernel/src/kernel/input.rs	/^pub const EV_LED : u16 = 0x11;$/;"	c
EV_MAX	kernel/src/kernel/input.rs	/^pub const EV_MAX : u16 = 0x1f;$/;"	c
EV_MSC	kernel/src/kernel/input.rs	/^pub const EV_MSC : u16 = 0x04;$/;"	c
EV_PWR	kernel/src/kernel/input.rs	/^pub const EV_PWR : u16 = 0x16;$/;"	c
EV_REL	kernel/src/kernel/input.rs	/^pub const EV_REL : u16 = 0x02;$/;"	c
EV_REP	kernel/src/kernel/input.rs	/^pub const EV_REP : u16 = 0x14;$/;"	c
EV_SND	kernel/src/kernel/input.rs	/^pub const EV_SND : u16 = 0x12;$/;"	c
EV_SW	kernel/src/kernel/input.rs	/^pub const EV_SW : u16 = 0x05;$/;"	c
EV_SYN	kernel/src/kernel/input.rs	/^pub const EV_SYN : u16 = 0x00;$/;"	c
EVersion	kernel/src/kernel/elf64.rs	/^enum EVersion$/;"	g
EXDEV	kernel/src/kernel/errno_base.rs	/^pub const EXDEV : Err = 18;	\/* Cross-device link *\/$/;"	c
EXEC	kernel/src/fs/file.rs	/^        const EXEC = Self::IXOTH.bits();$/;"	c
EXT4_CONTEXT_OPS	kernel/src/fs/ext4.rs	/^pub static mut EXT4_CONTEXT_OPS : FsContextOperations = FsContextOperations$/;"	c
EXT4_DIND_BLOCK	kernel/src/fs/ext4.rs	/^const EXT4_DIND_BLOCK : usize = EXT4_IND_BLOCK + 1;$/;"	c
EXT4_DIRECT_BLOCK	kernel/src/fs/ext4.rs	/^const EXT4_DIRECT_BLOCK : u64 = 12;$/;"	c
EXT4_FS_TYPE	kernel/src/fs/ext4.rs	/^pub static mut EXT4_FS_TYPE : FileSystemType = FileSystemType$/;"	c
EXT4_INDIRECT1_BLOCK	kernel/src/fs/ext4.rs	/^const EXT4_INDIRECT1_BLOCK : u64 = 12 + 1024;$/;"	c
EXT4_INDIRECT2_BLOCK	kernel/src/fs/ext4.rs	/^const EXT4_INDIRECT2_BLOCK : u64 = 12 + 1024 * 1024;$/;"	c
EXT4_INDIRECT3_BLOCK	kernel/src/fs/ext4.rs	/^const EXT4_INDIRECT3_BLOCK : u64 = 12 + 1024 * 1024 * 1024;$/;"	c
EXT4_IND_BLOCK	kernel/src/fs/ext4.rs	/^const EXT4_IND_BLOCK : usize = EXT4_NDIR_BLOCKS;$/;"	c
EXT4_LABEL_MAX	kernel/src/fs/ext4.rs	/^const EXT4_LABEL_MAX : usize = 0x10;$/;"	c
EXT4_NAME_LEN	kernel/src/fs/ext4.rs	/^const EXT4_NAME_LEN : usize = 0xff;$/;"	c
EXT4_NDIR_BLOCKS	kernel/src/fs/ext4.rs	/^const EXT4_NDIR_BLOCKS : usize = 12;$/;"	c
EXT4_N_BLOCKS	kernel/src/fs/ext4.rs	/^const EXT4_N_BLOCKS	: usize = EXT4_TIND_BLOCK + 1;$/;"	c
EXT4_TIND_BLOCK	kernel/src/fs/ext4.rs	/^const EXT4_TIND_BLOCK : usize = EXT4_DIND_BLOCK + 1;$/;"	c
EXTENDED_PROCESSOR_SIGNATURE_AND_FEATURE	kernel/src/kernel/cpu.rs	/^pub const EXTENDED_PROCESSOR_SIGNATURE_AND_FEATURE : u32 = 0x80000001;$/;"	c
Elf64Ehdr	kernel/src/kernel/elf64.rs	/^pub struct Elf64Ehdr$/;"	s
Elf64Phdr	kernel/src/kernel/elf64.rs	/^pub struct Elf64Phdr$/;"	s
Elf64Rela	kernel/src/kernel/relocation.rs	/^struct Elf64Rela$/;"	s
Elf64Shdr	kernel/src/kernel/elf64.rs	/^pub struct Elf64Shdr$/;"	s
Err	kernel/src/kernel/mod.rs	/^pub type Err = i64;$/;"	T
Etype	kernel/src/kernel/elf64.rs	/^enum Etype$/;"	g
Ext4DirEntry	kernel/src/fs/ext4.rs	/^pub struct Ext4DirEntry$/;"	s
Ext4DirEntry2	kernel/src/fs/ext4.rs	/^pub struct Ext4DirEntry2$/;"	s
Ext4Extent	kernel/src/fs/ext4.rs	/^pub struct Ext4Extent {$/;"	s
Ext4ExtentBlock	kernel/src/fs/ext4.rs	/^pub struct Ext4ExtentBlock$/;"	s
Ext4ExtentHeader	kernel/src/fs/ext4.rs	/^pub struct Ext4ExtentHeader$/;"	s
Ext4ExtentIdx	kernel/src/fs/ext4.rs	/^pub struct Ext4ExtentIdx$/;"	s
Ext4ExtentTail	kernel/src/fs/ext4.rs	/^pub struct Ext4ExtentTail$/;"	s
Ext4FileMode	kernel/src/fs/ext4.rs	/^    struct Ext4FileMode : u16$/;"	s
Ext4GroupDesc	kernel/src/fs/ext4.rs	/^pub struct Ext4GroupDesc  $/;"	s
Ext4GroupDescInfo	kernel/src/fs/ext4.rs	/^impl Ext4GroupDescInfo {$/;"	i
Ext4GroupDescInfo	kernel/src/fs/ext4.rs	/^pub struct Ext4GroupDescInfo$/;"	s
Ext4Inode	kernel/src/fs/ext4.rs	/^pub struct Ext4Inode$/;"	s
Ext4InodeExtentDesc	kernel/src/fs/ext4.rs	/^pub struct Ext4InodeExtentDesc$/;"	s
Ext4SuperBlock	kernel/src/fs/ext4.rs	/^pub struct Ext4SuperBlock$/;"	s
Ext4SuperBlockInfo	kernel/src/fs/ext4.rs	/^impl Ext4SuperBlockInfo$/;"	i
Ext4SuperBlockInfo	kernel/src/fs/ext4.rs	/^pub struct Ext4SuperBlockInfo$/;"	s
FAULT_MESSAGES	kernel/src/kernel/interrupt.rs	/^const FAULT_MESSAGES : [&str; 22] = [$/;"	c
FF	kernel/src/kernel/console.rs	/^const FF : i8 = 0xc;$/;"	c
FPU_ENABLE	kernel/src/kernel/cpu.rs	/^pub const FPU_ENABLE : u32 = 1 << 0;$/;"	c
FS	kernel/src/fs/file.rs	/^pub static mut FS : FileSystem = FileSystem::new();$/;"	c
FSNOTIFIY_PARENT_WATCHED	kernel/src/fs/dcache.rs	/^        const FSNOTIFIY_PARENT_WATCHED = 0x2000;$/;"	c
FSPermission	kernel/src/fs/file.rs	/^    pub struct FSPermission : u16$/;"	s
FSType	kernel/src/fs/file.rs	/^pub enum FSType {$/;"	g
F_SEAL_SEAL	kernel/src/mm/shmem.rs	/^const F_SEAL_SEAL : u32 = 1;$/;"	c
Fd	kernel/src/fs/namei.rs	/^pub type Fd = usize;$/;"	T
File	kernel/src/fs/file.rs	/^impl File {$/;"	i
File	kernel/src/fs/file.rs	/^pub struct File$/;"	s
FileDescriptor	kernel/src/fs/file.rs	/^pub type FileDescriptor = u32;$/;"	T
FileFlag	kernel/src/fs/file.rs	/^    pub struct FileFlag : u64$/;"	s
FileMode	kernel/src/fs/file.rs	/^    pub struct FileMode : u16$/;"	s
FileSystem	kernel/src/fs/file.rs	/^impl FileSystem {$/;"	i
FileSystem	kernel/src/fs/file.rs	/^pub struct FileSystem$/;"	s
FileSystemFlags	kernel/src/fs/fs.rs	/^    pub struct FileSystemFlags : u32$/;"	s
FileSystemType	kernel/src/fs/fs.rs	/^pub struct FileSystemType$/;"	s
FsContext	kernel/src/fs/fs_context.rs	/^impl FsContext$/;"	i
FsContext	kernel/src/fs/fs_context.rs	/^pub struct FsContext$/;"	s
FsContextGetTreeFn	kernel/src/fs/fs_context.rs	/^pub type FsContextGetTreeFn = fn(*mut FsContext) -> Err;$/;"	T
FsContextOperations	kernel/src/fs/fs_context.rs	/^pub struct FsContextOperations$/;"	s
FsContextParseMonolithicFn	kernel/src/fs/fs_context.rs	/^pub type FsContextParseMonolithicFn = fn(*mut FsContext, *mut c_void) -> Err;$/;"	T
FsContextParseParamFn	kernel/src/fs/fs_context.rs	/^pub type FsContextParseParamFn = fn(*mut FsContext, *mut FsParameter) -> Err;$/;"	T
FsContextPurpose	kernel/src/fs/fs_context.rs	/^enum FsContextPurpose {$/;"	g
FsParameter	kernel/src/fs/fs_context.rs	/^pub struct FsParameter<'a, 'b>$/;"	s
FsValueType	kernel/src/fs/fs_context.rs	/^enum FsValueType {$/;"	g
GDT	kernel/src/kernel/global.rs	/^pub static mut GDT : [DescriptorT; GDT_SIZE] = [DescriptorT(0); GDT_SIZE];$/;"	c
GDT_PTR	kernel/src/kernel/global.rs	/^pub static mut GDT_PTR : PointerT = PointerT{ base: 0, limit: 0 };$/;"	c
GDT_SIZE	kernel/src/kernel/global.rs	/^const GDT_SIZE : usize = 7;$/;"	c
GENOCIDE	kernel/src/fs/dcache.rs	/^        const GENOCIDE = 0x200;$/;"	c
GET_CPU_VENDOR_ID	kernel/src/kernel/cpu.rs	/^pub const GET_CPU_VENDOR_ID : u32 = 0;$/;"	c
GET_CPU_VERSION	kernel/src/kernel/cpu.rs	/^pub const GET_CPU_VERSION : u32 = 1;$/;"	c
GFP	kernel/src/mm/page.rs	/^    pub struct GFP : u32$/;"	s
Gid	kernel/src/kernel/process.rs	/^pub type Gid = u32;$/;"	T
GlobalAlloc for MemoryPool	kernel/src/mm/memory.rs	/^unsafe impl GlobalAlloc for MemoryPool {$/;"	i
HANDLER_TABLE	kernel/src/kernel/interrupt.rs	/^pub static mut HANDLER_TABLE : [HandlerFn; IDT_SIZE] = [core::ptr::null_mut(); IDT_SIZE];$/;"	c
HAS_SUBTYPE	kernel/src/fs/fs.rs	/^        const HAS_SUBTYPE = bit!(2);$/;"	c
HEIGHT	kernel/src/kernel/console.rs	/^const HEIGHT : u16 = 25;$/;"	c
HOUR	kernel/src/kernel/time.rs	/^const HOUR : u64 = 60 * MINUTE;$/;"	c
HT	kernel/src/kernel/console.rs	/^const HT : i8 = 0x9;$/;"	c
HZ	kernel/src/kernel/clock.rs	/^const HZ : u64 = 100;$/;"	c
HandlerFn	kernel/src/kernel/interrupt.rs	/^pub type HandlerFn = *mut extern fn();$/;"	T
HashFunc	kernel/src/fs/dcache.rs	/^pub type HashFunc = fn(&DEntry, &QStr) -> i64;$/;"	T
Hurd2	kernel/src/fs/ext4.rs	/^pub struct Hurd2$/;"	s
IDE_ALT_STATUS	kernel/src/kernel/io.rs	/^pub const IDE_ALT_STATUS : u16 = 0x0206;$/;"	c
IDE_CMD_IDENTIFY	kernel/src/kernel/io.rs	/^pub const IDE_CMD_IDENTIFY : u8 = 0xec;$/;"	c
IDE_CMD_READ	kernel/src/kernel/io.rs	/^pub const IDE_CMD_READ : u8 = 0x20;$/;"	c
IDE_CMD_WRITE	kernel/src/kernel/io.rs	/^pub const IDE_CMD_WRITE : u8 = 0x30;$/;"	c
IDE_COMMAND	kernel/src/kernel/io.rs	/^pub const IDE_COMMAND : u16 = 0x0007;$/;"	c
IDE_CONTROL	kernel/src/kernel/io.rs	/^pub const IDE_CONTROL : u16 = 0x0206;$/;"	c
IDE_CTRL_HD15	kernel/src/kernel/io.rs	/^pub const IDE_CTRL_HD15 : u8 = 0x00; \/\/ Use 4 bits for head (not used, was 0x08)$/;"	c
IDE_CTRL_NIEN	kernel/src/kernel/io.rs	/^pub const IDE_CTRL_NIEN : u8 = 0x02; \/\/ Disable interrupts$/;"	c
IDE_CTRL_NR	kernel/src/kernel/io.rs	/^pub const IDE_CTRL_NR : usize = 2;$/;"	c
IDE_CTRL_SRST	kernel/src/kernel/io.rs	/^pub const IDE_CTRL_SRST : u8 = 0x04; \/\/ Soft reset$/;"	c
IDE_DATA	kernel/src/kernel/io.rs	/^pub const IDE_DATA : u16 = 0x0000;$/;"	c
IDE_DEVCTRL	kernel/src/kernel/io.rs	/^pub const IDE_DEVCTRL : u16 = 0x0206;$/;"	c
IDE_DISK_NR	kernel/src/kernel/io.rs	/^pub const IDE_DISK_NR : usize = 2;$/;"	c
IDE_ERR	kernel/src/kernel/io.rs	/^pub const IDE_ERR : u16 = 0x0001;$/;"	c
IDE_ER_ABRT	kernel/src/kernel/io.rs	/^pub const IDE_ER_ABRT : u8 = 0x04;  \/\/ Abort$/;"	c
IDE_ER_AMNF	kernel/src/kernel/io.rs	/^pub const IDE_ER_AMNF : u8 = 0x01;  \/\/ Address mark not found$/;"	c
IDE_ER_BBK	kernel/src/kernel/io.rs	/^pub const IDE_ER_BBK : u8 = 0x80;   \/\/ Bad block$/;"	c
IDE_ER_IDNF	kernel/src/kernel/io.rs	/^pub const IDE_ER_IDNF : u8 = 0x10;  \/\/ Sector id not found$/;"	c
IDE_ER_MC	kernel/src/kernel/io.rs	/^pub const IDE_ER_MC : u8 = 0x20;    \/\/ Media change$/;"	c
IDE_ER_MCR	kernel/src/kernel/io.rs	/^pub const IDE_ER_MCR : u8 = 0x08;   \/\/ Media change requested$/;"	c
IDE_ER_TK0NF	kernel/src/kernel/io.rs	/^pub const IDE_ER_TK0NF : u8 = 0x02; \/\/ Track 0 not found$/;"	c
IDE_ER_UNC	kernel/src/kernel/io.rs	/^pub const IDE_ER_UNC : u8 = 0x40;   \/\/ Uncorrectable data error$/;"	c
IDE_FEATURE	kernel/src/kernel/io.rs	/^pub const IDE_FEATURE : u16 = 0x0001;$/;"	c
IDE_HDDEVSEL	kernel/src/kernel/io.rs	/^pub const IDE_HDDEVSEL : u16 = 0x0006;$/;"	c
IDE_IOBASE_PRIMARY	kernel/src/kernel/io.rs	/^pub const IDE_IOBASE_PRIMARY : u16 = 0x1f0;$/;"	c
IDE_IOBASE_SECONDARY	kernel/src/kernel/io.rs	/^pub const IDE_IOBASE_SECONDARY : u16 = 0x170;$/;"	c
IDE_LBA_HIGH	kernel/src/kernel/io.rs	/^pub const IDE_LBA_HIGH : u16 = 0x0005;$/;"	c
IDE_LBA_LOW	kernel/src/kernel/io.rs	/^pub const IDE_LBA_LOW : u16 = 0x0003;$/;"	c
IDE_LBA_MASTER	kernel/src/kernel/io.rs	/^pub const IDE_LBA_MASTER : u8 = 0b11100000; \/\/ 主盘 LBA$/;"	c
IDE_LBA_MID	kernel/src/kernel/io.rs	/^pub const IDE_LBA_MID : u16 = 0x0004;$/;"	c
IDE_LBA_SLAVE	kernel/src/kernel/io.rs	/^pub const IDE_LBA_SLAVE : u8 = 0b11110000;  \/\/ 从盘 LBA$/;"	c
IDE_PART_NR	kernel/src/kernel/io.rs	/^const IDE_PART_NR: usize = 4;$/;"	c
IDE_SECTOR	kernel/src/kernel/io.rs	/^pub const IDE_SECTOR : u16 = 0x0002;$/;"	c
IDE_SR_BSY	kernel/src/kernel/io.rs	/^pub const IDE_SR_BSY : u8 = 0x80;  \/\/ Controller busy$/;"	c
IDE_SR_CORR	kernel/src/kernel/io.rs	/^pub const IDE_SR_CORR : u8 = 0x04; \/\/ Corrected data$/;"	c
IDE_SR_DRDY	kernel/src/kernel/io.rs	/^pub const IDE_SR_DRDY : u8 = 0x40; \/\/ Drive ready$/;"	c
IDE_SR_DRQ	kernel/src/kernel/io.rs	/^pub const IDE_SR_DRQ : u8 = 0x08;  \/\/ Data request$/;"	c
IDE_SR_DSC	kernel/src/kernel/io.rs	/^pub const IDE_SR_DSC : u8 = 0x10;  \/\/ Drive seek complete$/;"	c
IDE_SR_DWF	kernel/src/kernel/io.rs	/^pub const IDE_SR_DWF : u8 = 0x20;  \/\/ Drive write fault$/;"	c
IDE_SR_ERR	kernel/src/kernel/io.rs	/^pub const IDE_SR_ERR : u8 = 0x01;  \/\/ Error$/;"	c
IDE_SR_IDX	kernel/src/kernel/io.rs	/^pub const IDE_SR_IDX : u8 = 0x02;  \/\/ Index$/;"	c
IDE_SR_NULL	kernel/src/kernel/io.rs	/^pub const IDE_SR_NULL : u8 = 0x00; \/\/ NULL$/;"	c
IDE_STATUS	kernel/src/kernel/io.rs	/^pub const IDE_STATUS : u16 = 0x0007;$/;"	c
IDLE	kernel/src/kernel/process.rs	/^static mut IDLE : *mut PCB = null_mut();$/;"	c
IDLE_CNT	kernel/src/kernel/idle.rs	/^static mut IDLE_CNT : u64 = 0;$/;"	c
IDT	kernel/src/boot/loader.asm	/^IDT:$/;"	l
IDT	kernel/src/kernel/interrupt.rs	/^static mut IDT : [DescriptorT; IDT_SIZE] = [DescriptorT(0); IDT_SIZE];$/;"	c
IDT_END	kernel/src/boot/loader.asm	/^IDT_END:$/;"	l
IDT_POINTER	kernel/src/boot/loader.asm	/^IDT_POINTER:$/;"	l
IDT_PTR	kernel/src/kernel/interrupt.rs	/^static mut IDT_PTR : PointerT = PointerT{ base: 0, limit: 0 };$/;"	c
IDT_SIZE	kernel/src/kernel/interrupt.rs	/^const IDT_SIZE : usize = 0x100;$/;"	c
IFBLK	kernel/src/fs/ext4.rs	/^        const IFBLK = 0o60000;  \/\/ 块特殊（设备）文件，如磁盘 dev\/fd0$/;"	c
IFBLK	kernel/src/fs/file.rs	/^        const IFBLK = 0o60000;  \/\/ 块特殊（设备）文件，如磁盘 dev\/fd0$/;"	c
IFCHR	kernel/src/fs/ext4.rs	/^        const IFCHR = 0o20000;  \/\/ 字符设备文件$/;"	c
IFCHR	kernel/src/fs/file.rs	/^        const IFCHR = 0o20000;  \/\/ 字符设备文件$/;"	c
IFDIR	kernel/src/fs/ext4.rs	/^        const IFDIR = 0o40000;  \/\/ 目录文件$/;"	c
IFDIR	kernel/src/fs/file.rs	/^        const IFDIR = 0o40000;  \/\/ 目录文件$/;"	c
IFIFO	kernel/src/fs/ext4.rs	/^        const IFIFO = 0o10000;  \/\/ FIFO 特殊文件$/;"	c
IFIFO	kernel/src/fs/file.rs	/^        const IFIFO = 0o10000;  \/\/ FIFO 特殊文件$/;"	c
IFLNK	kernel/src/fs/ext4.rs	/^        const IFLNK = 0o120000;  \/\/ 符号连接$/;"	c
IFLNK	kernel/src/fs/file.rs	/^        const IFLNK = 0o120000;  \/\/ 符号连接$/;"	c
IFMT	kernel/src/fs/ext4.rs	/^        const IFMT = 0o170000;  \/\/ 文件类型（8 进制表示）$/;"	c
IFMT	kernel/src/fs/file.rs	/^        const IFMT = 0o170000;  \/\/ 文件类型（8 进制表示）$/;"	c
IFREG	kernel/src/fs/ext4.rs	/^        const IFREG = 0o100000;  \/\/ 常规文件$/;"	c
IFREG	kernel/src/fs/file.rs	/^        const IFREG = 0o100000;  \/\/ 常规文件$/;"	c
IFSOCK	kernel/src/fs/ext4.rs	/^        const IFSOCK = 0o140000; \/\/ SOCKET file$/;"	c
IFSOCK	kernel/src/fs/file.rs	/^        const IFSOCK = 0o140000; \/\/ SOCKET file$/;"	c
IMAGES	utils/image.mk	/^IMAGES:= $(BUILD)\/master.img $(BUILD)\/slave.img$/;"	m
INSTRUCTION_FETCH	kernel/src/mm/mm_type.rs	/^        const INSTRUCTION_FETCH = 0x10; \/\/ When set, the page fault was caused by an instruction fetch. This only applies when the No-Execute bit is supported and enabled.$/;"	c
INTERNEL	kernel/src/fs/mount.rs	/^        const INTERNEL = 0x400;$/;"	c
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x00, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x01, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x02, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x03, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x04, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x05, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x06, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x07, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x08, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x09, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x0a, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x0b, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x0c, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x0d, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x0e, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x0f, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x10, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x11, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x12, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x13, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x14, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x15, 1$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x16, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x17, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x18, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x19, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x1a, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x1b, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x1c, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x1d, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x1e, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x1f, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x20, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x21, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x22, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x23, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x24, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x25, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x26, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x27, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x28, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x29, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x2a, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x2b, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x2c, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x2d, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x2e, 0$/;"	l
INTERRUPT_HANDLER	kernel/src/kernel/interrupt.asm	/^INTERRUPT_HANDLER 0x2f, 0$/;"	l
INTR_AC	kernel/src/kernel/interrupt.rs	/^pub const INTR_AC : u64 = 17;  \/\/ 对齐检测$/;"	c
INTR_BP	kernel/src/kernel/interrupt.rs	/^pub const INTR_BP : u64 = 3;   \/\/ 断点$/;"	c
INTR_BR	kernel/src/kernel/interrupt.rs	/^pub const INTR_BR : u64 = 5;   \/\/ 越界$/;"	c
INTR_CP	kernel/src/kernel/interrupt.rs	/^pub const INTR_CP : u64 = 21;  \/\/ 控制保护异常$/;"	c
INTR_DB	kernel/src/kernel/interrupt.rs	/^pub const INTR_DB : u64 = 1;   \/\/ 调试$/;"	c
INTR_DE	kernel/src/kernel/interrupt.rs	/^pub const INTR_DE : u64 = 0;   \/\/ 除零错误$/;"	c
INTR_DF	kernel/src/kernel/interrupt.rs	/^pub const INTR_DF : u64 = 8;   \/\/ 双重错误$/;"	c
INTR_GP	kernel/src/kernel/interrupt.rs	/^pub const INTR_GP : u64 = 13;  \/\/ 一般性保护异常$/;"	c
INTR_MC	kernel/src/kernel/interrupt.rs	/^pub const INTR_MC : u64 = 18;  \/\/ 机器检测$/;"	c
INTR_MF	kernel/src/kernel/interrupt.rs	/^pub const INTR_MF : u64 = 16;  \/\/ 浮点异常$/;"	c
INTR_NM	kernel/src/kernel/interrupt.rs	/^pub const INTR_NM : u64 = 7;   \/\/ 协处理器不可用$/;"	c
INTR_NMI	kernel/src/kernel/interrupt.rs	/^pub const INTR_NMI : u64 = 2;  \/\/ 不可屏蔽中断$/;"	c
INTR_NP	kernel/src/kernel/interrupt.rs	/^pub const INTR_NP : u64 = 11;  \/\/ 段无效$/;"	c
INTR_OF	kernel/src/kernel/interrupt.rs	/^pub const INTR_OF : u64 = 4;   \/\/ 溢出$/;"	c
INTR_OVER	kernel/src/kernel/interrupt.rs	/^pub const INTR_OVER : u64 = 9; \/\/ 协处理器段超限$/;"	c
INTR_PF	kernel/src/kernel/interrupt.rs	/^pub const INTR_PF : u64 = 14;  \/\/ 缺页错误$/;"	c
INTR_RE1	kernel/src/kernel/interrupt.rs	/^pub const INTR_RE1 : u64 = 15; \/\/ 保留$/;"	c
INTR_SS	kernel/src/kernel/interrupt.rs	/^pub const INTR_SS : u64 = 12;  \/\/ 栈段错误$/;"	c
INTR_TS	kernel/src/kernel/interrupt.rs	/^pub const INTR_TS : u64 = 10;  \/\/ 无效任务状态段$/;"	c
INTR_UD	kernel/src/kernel/interrupt.rs	/^pub const INTR_UD : u64 = 6;   \/\/ 指令无效$/;"	c
INTR_VE	kernel/src/kernel/interrupt.rs	/^pub const INTR_VE : u64 = 20;  \/\/ 虚拟化异常$/;"	c
INTR_XM	kernel/src/kernel/interrupt.rs	/^pub const INTR_XM : u64 = 19;  \/\/ SIMD 浮点异常$/;"	c
INV	kernel/src/kernel/keyboard.rs	/^const INV : char = '\\0';$/;"	c
IOFS	kernel/src/mm/page.rs	/^        const IOFS = Self::__IO.bits() | Self::__FS.bits();$/;"	c
IRGRP	kernel/src/fs/file.rs	/^        const IRGRP = 0o040; \/\/ 组成员读许可$/;"	c
IROTH	kernel/src/fs/file.rs	/^        const IROTH = 0o004; \/\/ 其他人读许可$/;"	c
IRQ_CASCADE	kernel/src/kernel/interrupt.rs	/^pub const IRQ_CASCADE : u8 = 2;    \/\/ 8259 从片控制器$/;"	c
IRQ_CLOCK	kernel/src/kernel/interrupt.rs	/^pub const IRQ_CLOCK : u8 = 0;      \/\/ 时钟$/;"	c
IRQ_FLOPPY	kernel/src/kernel/interrupt.rs	/^pub const IRQ_FLOPPY : u8 = 6;     \/\/ 软盘控制器$/;"	c
IRQ_HARDDISK	kernel/src/kernel/interrupt.rs	/^pub const IRQ_HARDDISK : u8 = 14;  \/\/ ATA 硬盘第一通道$/;"	c
IRQ_HARDDISK2	kernel/src/kernel/interrupt.rs	/^pub const IRQ_HARDDISK2 : u8 = 15; \/\/ ATA 硬盘第二通道$/;"	c
IRQ_KEYBOARD	kernel/src/kernel/interrupt.rs	/^pub const IRQ_KEYBOARD : u8 = 1;   \/\/ 键盘$/;"	c
IRQ_MASTER_NR	kernel/src/kernel/interrupt.rs	/^const IRQ_MASTER_NR : u8 = 0x20;$/;"	c
IRQ_MATH	kernel/src/kernel/interrupt.rs	/^pub const IRQ_MATH : u8 = 13;      \/\/ 协处理器 x87$/;"	c
IRQ_MOUSE	kernel/src/kernel/interrupt.rs	/^pub const IRQ_MOUSE : u8 = 12;     \/\/ 鼠标$/;"	c
IRQ_PARALLEL_1	kernel/src/kernel/interrupt.rs	/^pub const IRQ_PARALLEL_1 : u8 = 7; \/\/ 并口 1$/;"	c
IRQ_PARALLEL_2	kernel/src/kernel/interrupt.rs	/^pub const IRQ_PARALLEL_2 : u8 = 5; \/\/ 并口 2$/;"	c
IRQ_REDIRECT	kernel/src/kernel/interrupt.rs	/^pub const IRQ_REDIRECT : u8 = 9;   \/\/ 重定向 IRQ2$/;"	c
IRQ_RTC	kernel/src/kernel/interrupt.rs	/^pub const IRQ_RTC : u8 = 8;        \/\/ 实时时钟$/;"	c
IRQ_SB16	kernel/src/kernel/interrupt.rs	/^pub const IRQ_SB16 : u8 =  5;      \/\/ SB16 声卡$/;"	c
IRQ_SERIAL_1	kernel/src/kernel/interrupt.rs	/^pub const IRQ_SERIAL_1 : u8 = 4;   \/\/ 串口 1$/;"	c
IRQ_SERIAL_2	kernel/src/kernel/interrupt.rs	/^pub const IRQ_SERIAL_2 : u8 = 3;   \/\/ 串口 2$/;"	c
IRUSR	kernel/src/fs/file.rs	/^        const IRUSR = 0o400;\/\/ 宿主读许可$/;"	c
IRWXG	kernel/src/fs/file.rs	/^        const IRWXG = 0o070; \/\/ 组成员可以读、写、执行\/搜索$/;"	c
IRWXO	kernel/src/fs/file.rs	/^        const IRWXO = 0o007; \/\/ 其他人读、写、执行\/搜索许可$/;"	c
IRWXU	kernel/src/fs/file.rs	/^        const IRWXU = 0o700;\/\/ 宿主可以读、写、执行\/搜索$/;"	c
IWGRP	kernel/src/fs/file.rs	/^        const IWGRP = 0o020; \/\/ 组成员写许可$/;"	c
IWOTH	kernel/src/fs/file.rs	/^        const IWOTH = 0o002; \/\/ 其他人写许可$/;"	c
IWUSR	kernel/src/fs/file.rs	/^        const IWUSR = 0o200;\/\/ 宿主写许可$/;"	c
IXGRP	kernel/src/fs/file.rs	/^        const IXGRP = 0o010; \/\/ 组成员执行\/搜索许可$/;"	c
IXOTH	kernel/src/fs/file.rs	/^        const IXOTH = 0o001; \/\/ 其他人执行\/搜索许可$/;"	c
IXUSR	kernel/src/fs/file.rs	/^        const IXUSR = 0o100;\/\/ 宿主执行\/搜索许可$/;"	c
Ida	kernel/src/fs/ida.rs	/^impl Ida$/;"	i
Ida	kernel/src/fs/ida.rs	/^pub struct Ida $/;"	s
IdeCtrlT	kernel/src/kernel/io.rs	/^impl IdeCtrlT {$/;"	i
IdeCtrlT	kernel/src/kernel/io.rs	/^pub struct IdeCtrlT$/;"	s
IdeDiskT	kernel/src/kernel/io.rs	/^impl IdeDiskT {$/;"	i
IdeDiskT	kernel/src/kernel/io.rs	/^pub struct IdeDiskT$/;"	s
IdeParamsT	kernel/src/kernel/io.rs	/^struct IdeParamsT$/;"	s
IdePart	kernel/src/kernel/io.rs	/^impl IdePart {$/;"	i
IdePart	kernel/src/kernel/io.rs	/^pub struct IdePart$/;"	s
Idx	kernel/src/fs/ext4.rs	/^pub type Idx = u64; $/;"	T
InitFunc	kernel/src/fs/dcache.rs	/^pub type InitFunc = fn(&mut DEntry) -> i64;$/;"	T
Ino	kernel/src/mm/shmem.rs	/^type Ino = u64;$/;"	T
Inode	kernel/src/fs/inode.rs	/^impl Inode {$/;"	i
Inode	kernel/src/fs/inode.rs	/^pub struct Inode$/;"	s
InodeInternalInfo	kernel/src/mm/shmem.rs	/^impl InodeInternalInfo$/;"	i
InodeLoopUp	kernel/src/fs/inode.rs	/^pub type InodeLoopUp = fn(*mut Inode, *mut DEntry, u64) -> *mut DEntry;$/;"	T
InodeMkdir	kernel/src/fs/inode.rs	/^pub type InodeMkdir = fn (*mut MntIdmap, *mut Inode, *mut DEntry, FileMode) -> Err;$/;"	T
InodeMknode	kernel/src/fs/inode.rs	/^pub type InodeMknode = fn(*mut MntIdmap, *mut Inode, *mut DEntry, FileMode, DevT) -> Err;$/;"	T
InodeOperations	kernel/src/fs/inode.rs	/^pub struct InodeOperations$/;"	s
InodePutFunc	kernel/src/fs/dcache.rs	/^pub type InodePutFunc = fn(&mut DEntry, *mut Inode) -> i64;$/;"	T
InputEvent	kernel/src/kernel/input.rs	/^impl InputEvent$/;"	i
InputEvent	kernel/src/kernel/input.rs	/^pub struct InputEvent$/;"	s
JIFFIES	kernel/src/kernel/clock.rs	/^pub static mut JIFFIES : u64 = 0;$/;"	c
JIFFY	kernel/src/kernel/clock.rs	/^pub const JIFFY : u64 = 1000 \/ HZ;$/;"	c
KERNEL	kernel/src/mm/page.rs	/^        const KERNEL = Self::__WAIT.bits() | Self::__IO.bits() | Self::__FS.bits();$/;"	c
KERNEL_CODE_IDX	kernel/src/kernel/global.rs	/^pub const KERNEL_CODE_IDX : usize = 1;$/;"	c
KERNEL_DATA_IDX	kernel/src/kernel/global.rs	/^pub const KERNEL_DATA_IDX : usize = 2;$/;"	c
KERNEL_FILES	Makefile	/^KERNEL_FILES:=$(KERNEL_SRC)\/lib.rs $(KERNEL_SRC)\/kernel\/console.rs $(KERNEL_SRC)\/kernel\/interrupt.rs $(KERNEL_SRC)\/kernel\/io.rs $(KERNEL_SRC)\/kernel\/lang_items.rs \\$/;"	m
KERNEL_PAGE_DIR	kernel/src/mm/memory.rs	/^static mut KERNEL_PAGE_DIR : *const c_void = 0x0 as *const c_void;$/;"	c
KERNEL_SIZE	kernel/src/kernel/relocation.rs	/^pub static mut KERNEL_SIZE : usize = 0;$/;"	c
KERNEL_SRC	Makefile	/^KERNEL_SRC:=.\/kernel\/src$/;"	m
KERNEL_START	kernel/src/mm/memory.rs	/^const KERNEL_START : usize = 0xffff800000100000;$/;"	c
KERNEL_TSS	kernel/src/kernel/global.rs	/^pub static mut KERNEL_TSS : TaskStateSegment = TaskStateSegment::new();$/;"	c
KEYBOARD	kernel/src/kernel/keyboard.rs	/^static mut KEYBOARD : KeyBoard = KeyBoard::new();$/;"	c
KEYBOARD_CTRL_PORT	kernel/src/kernel/io.rs	/^pub const KEYBOARD_CTRL_PORT : u16 = 0x64;$/;"	c
KEYBOARD_DATA_PORT	kernel/src/kernel/io.rs	/^pub const KEYBOARD_DATA_PORT : u16 = 0x60;$/;"	c
KEY_0	kernel/src/kernel/keyboard.rs	/^pub const KEY_0 : u16 = 11;$/;"	c
KEY_1	kernel/src/kernel/keyboard.rs	/^pub const KEY_1 : u16 = 2;$/;"	c
KEY_102ND	kernel/src/kernel/keyboard.rs	/^pub const KEY_102ND : u16 = 86;$/;"	c
KEY_2	kernel/src/kernel/keyboard.rs	/^pub const KEY_2 : u16 = 3;$/;"	c
KEY_3	kernel/src/kernel/keyboard.rs	/^pub const KEY_3 : u16 = 4;$/;"	c
KEY_4	kernel/src/kernel/keyboard.rs	/^pub const KEY_4 : u16 = 5;$/;"	c
KEY_5	kernel/src/kernel/keyboard.rs	/^pub const KEY_5 : u16 = 6;$/;"	c
KEY_6	kernel/src/kernel/keyboard.rs	/^pub const KEY_6 : u16 = 7;$/;"	c
KEY_7	kernel/src/kernel/keyboard.rs	/^pub const KEY_7 : u16 = 8;$/;"	c
KEY_8	kernel/src/kernel/keyboard.rs	/^pub const KEY_8 : u16 = 9;$/;"	c
KEY_9	kernel/src/kernel/keyboard.rs	/^pub const KEY_9 : u16 = 10;$/;"	c
KEY_A	kernel/src/kernel/keyboard.rs	/^pub const KEY_A	: u16 = 30;$/;"	c
KEY_AGAIN	kernel/src/kernel/keyboard.rs	/^pub const KEY_AGAIN : u16 = 129;$/;"	c
KEY_ALL_APPLICATIONS	kernel/src/kernel/keyboard.rs	/^pub const KEY_ALL_APPLICATIONS : u16 = 204;	\/* AC Desktop Show All Applications *\/$/;"	c
KEY_ALTERASE	kernel/src/kernel/keyboard.rs	/^pub const KEY_ALTERASE : u16 = 222;$/;"	c
KEY_APOSTROPHE	kernel/src/kernel/keyboard.rs	/^pub const KEY_APOSTROPHE : u16 = 40;$/;"	c
KEY_B	kernel/src/kernel/keyboard.rs	/^pub const KEY_B : u16 = 48;$/;"	c
KEY_BACK	kernel/src/kernel/keyboard.rs	/^pub const KEY_BACK : u16 = 158;	\/* AC Back *\/$/;"	c
KEY_BACKSLASH	kernel/src/kernel/keyboard.rs	/^pub const KEY_BACKSLASH : u16 = 43;$/;"	c
KEY_BACKSPACE	kernel/src/kernel/keyboard.rs	/^pub const KEY_BACKSPACE : u16 = 14;$/;"	c
KEY_BASSBOOST	kernel/src/kernel/keyboard.rs	/^pub const KEY_BASSBOOST : u16 = 209;$/;"	c
KEY_BATTERY	kernel/src/kernel/keyboard.rs	/^pub const KEY_BATTERY : u16 = 236;$/;"	c
KEY_BLUETOOTH	kernel/src/kernel/keyboard.rs	/^pub const KEY_BLUETOOTH : u16 = 237;$/;"	c
KEY_BOOKMARKS	kernel/src/kernel/keyboard.rs	/^pub const KEY_BOOKMARKS : u16 = 156;	\/* AC Bookmarks *\/$/;"	c
KEY_BRIGHTNESSDOWN	kernel/src/kernel/keyboard.rs	/^pub const KEY_BRIGHTNESSDOWN : u16 = 224;$/;"	c
KEY_BRIGHTNESSUP	kernel/src/kernel/keyboard.rs	/^pub const KEY_BRIGHTNESSUP : u16 = 225;$/;"	c
KEY_BRIGHTNESS_AUTO	kernel/src/kernel/keyboard.rs	/^pub const KEY_BRIGHTNESS_AUTO : u16 = 244;	\/* Set Auto Brightness: manual$/;"	c
KEY_BRIGHTNESS_CYCLE	kernel/src/kernel/keyboard.rs	/^pub const KEY_BRIGHTNESS_CYCLE : u16 = 243;	\/* brightness up, after max is min *\/$/;"	c
KEY_BRIGHTNESS_ZERO	kernel/src/kernel/keyboard.rs	/^pub const KEY_BRIGHTNESS_ZERO : u16 = KEY_BRIGHTNESS_AUTO;$/;"	c
KEY_C	kernel/src/kernel/keyboard.rs	/^pub const KEY_C : u16 = 46;$/;"	c
KEY_CALC	kernel/src/kernel/keyboard.rs	/^pub const KEY_CALC : u16 = 140;	\/* AL Calculator *\/$/;"	c
KEY_CAMERA	kernel/src/kernel/keyboard.rs	/^pub const KEY_CAMERA : u16 = 212;$/;"	c
KEY_CANCEL	kernel/src/kernel/keyboard.rs	/^pub const KEY_CANCEL : u16 = 223;	\/* AC Cancel *\/$/;"	c
KEY_CAPSLOCK	kernel/src/kernel/keyboard.rs	/^pub const KEY_CAPSLOCK : u16 = 58;$/;"	c
KEY_CHAT	kernel/src/kernel/keyboard.rs	/^pub const KEY_CHAT : u16 = 216;$/;"	c
KEY_CLOSE	kernel/src/kernel/keyboard.rs	/^pub const KEY_CLOSE : u16 = 206;	\/* AC Close *\/$/;"	c
KEY_CLOSECD	kernel/src/kernel/keyboard.rs	/^pub const KEY_CLOSECD : u16 = 160;$/;"	c
KEY_COFFEE	kernel/src/kernel/keyboard.rs	/^pub const KEY_COFFEE : u16 = 152;	\/* AL Terminal Lock\/Screensaver *\/$/;"	c
KEY_COMMA	kernel/src/kernel/keyboard.rs	/^pub const KEY_COMMA : u16 = 51;$/;"	c
KEY_COMPOSE	kernel/src/kernel/keyboard.rs	/^pub const KEY_COMPOSE : u16 = 127;$/;"	c
KEY_COMPUTER	kernel/src/kernel/keyboard.rs	/^pub const KEY_COMPUTER : u16 = 157;$/;"	c
KEY_CONFIG	kernel/src/kernel/keyboard.rs	/^pub const KEY_CONFIG : u16 = 171;	\/* AL Consumer Control Configuration *\/$/;"	c
KEY_CONNECT	kernel/src/kernel/keyboard.rs	/^pub const KEY_CONNECT : u16 = 218;$/;"	c
KEY_COPY	kernel/src/kernel/keyboard.rs	/^pub const KEY_COPY : u16 = 133;	\/* AC Copy *\/$/;"	c
KEY_CUT	kernel/src/kernel/keyboard.rs	/^pub const KEY_CUT : u16 = 137;	\/* AC Cut *\/$/;"	c
KEY_CYCLEWINDOWS	kernel/src/kernel/keyboard.rs	/^pub const KEY_CYCLEWINDOWS : u16 = 154;$/;"	c
KEY_D	kernel/src/kernel/keyboard.rs	/^pub const KEY_D : u16 = 32;$/;"	c
KEY_DASHBOARD	kernel/src/kernel/keyboard.rs	/^pub const KEY_DASHBOARD : u16 = KEY_ALL_APPLICATIONS;$/;"	c
KEY_DELETE	kernel/src/kernel/keyboard.rs	/^pub const KEY_DELETE : u16 = 111;$/;"	c
KEY_DELETEFILE	kernel/src/kernel/keyboard.rs	/^pub const KEY_DELETEFILE : u16 = 146;$/;"	c
KEY_DIRECTION	kernel/src/kernel/keyboard.rs	/^pub const KEY_DIRECTION : u16 = KEY_ROTATE_DISPLAY;$/;"	c
KEY_DISPLAY_OFF	kernel/src/kernel/keyboard.rs	/^pub const KEY_DISPLAY_OFF : u16 = 245;	\/* display device to off state *\/$/;"	c
KEY_DOCUMENTS	kernel/src/kernel/keyboard.rs	/^pub const KEY_DOCUMENTS : u16 = 235;$/;"	c
KEY_DOT	kernel/src/kernel/keyboard.rs	/^pub const KEY_DOT : u16 = 52;$/;"	c
KEY_DOWN	kernel/src/kernel/keyboard.rs	/^pub const KEY_DOWN : u16 = 108;$/;"	c
KEY_E	kernel/src/kernel/keyboard.rs	/^pub const KEY_E : u16 = 18;$/;"	c
KEY_EDIT	kernel/src/kernel/keyboard.rs	/^pub const KEY_EDIT : u16 = 176;$/;"	c
KEY_EJECTCD	kernel/src/kernel/keyboard.rs	/^pub const KEY_EJECTCD : u16 = 161;$/;"	c
KEY_EJECTCLOSECD	kernel/src/kernel/keyboard.rs	/^pub const KEY_EJECTCLOSECD : u16 = 162;$/;"	c
KEY_EMAIL	kernel/src/kernel/keyboard.rs	/^pub const KEY_EMAIL : u16 = 215;$/;"	c
KEY_END	kernel/src/kernel/keyboard.rs	/^pub const KEY_END : u16 = 107;$/;"	c
KEY_ENTER	kernel/src/kernel/keyboard.rs	/^pub const KEY_ENTER : u16 = 28;$/;"	c
KEY_EQUAL	kernel/src/kernel/keyboard.rs	/^pub const KEY_EQUAL : u16 = 13;$/;"	c
KEY_ESC	kernel/src/kernel/keyboard.rs	/^pub const KEY_ESC : u16 = 1;$/;"	c
KEY_EXIT	kernel/src/kernel/keyboard.rs	/^pub const KEY_EXIT : u16 = 174;	\/* AC Exit *\/$/;"	c
KEY_F	kernel/src/kernel/keyboard.rs	/^pub const KEY_F : u16 = 33;$/;"	c
KEY_F1	kernel/src/kernel/keyboard.rs	/^pub const KEY_F1 : u16 = 59;$/;"	c
KEY_F10	kernel/src/kernel/keyboard.rs	/^pub const KEY_F10 : u16 = 68;$/;"	c
KEY_F11	kernel/src/kernel/keyboard.rs	/^pub const KEY_F11 : u16 = 87;$/;"	c
KEY_F12	kernel/src/kernel/keyboard.rs	/^pub const KEY_F12 : u16 = 88;$/;"	c
KEY_F13	kernel/src/kernel/keyboard.rs	/^pub const KEY_F13 : u16 = 183;$/;"	c
KEY_F14	kernel/src/kernel/keyboard.rs	/^pub const KEY_F14 : u16 = 184;$/;"	c
KEY_F15	kernel/src/kernel/keyboard.rs	/^pub const KEY_F15 : u16 = 185;$/;"	c
KEY_F16	kernel/src/kernel/keyboard.rs	/^pub const KEY_F16 : u16 = 186;$/;"	c
KEY_F17	kernel/src/kernel/keyboard.rs	/^pub const KEY_F17 : u16 = 187;$/;"	c
KEY_F18	kernel/src/kernel/keyboard.rs	/^pub const KEY_F18 : u16 = 188;$/;"	c
KEY_F19	kernel/src/kernel/keyboard.rs	/^pub const KEY_F19 : u16 = 189;$/;"	c
KEY_F2	kernel/src/kernel/keyboard.rs	/^pub const KEY_F2 : u16 = 60;$/;"	c
KEY_F20	kernel/src/kernel/keyboard.rs	/^pub const KEY_F20 : u16 = 190;$/;"	c
KEY_F21	kernel/src/kernel/keyboard.rs	/^pub const KEY_F21 : u16 = 191;$/;"	c
KEY_F22	kernel/src/kernel/keyboard.rs	/^pub const KEY_F22 : u16 = 192;$/;"	c
KEY_F23	kernel/src/kernel/keyboard.rs	/^pub const KEY_F23 : u16 = 193;$/;"	c
KEY_F24	kernel/src/kernel/keyboard.rs	/^pub const KEY_F24 : u16 = 194;$/;"	c
KEY_F3	kernel/src/kernel/keyboard.rs	/^pub const KEY_F3 : u16 = 61;$/;"	c
KEY_F4	kernel/src/kernel/keyboard.rs	/^pub const KEY_F4 : u16 = 62;$/;"	c
KEY_F5	kernel/src/kernel/keyboard.rs	/^pub const KEY_F5 : u16 = 63;$/;"	c
KEY_F6	kernel/src/kernel/keyboard.rs	/^pub const KEY_F6 : u16 = 64;$/;"	c
KEY_F7	kernel/src/kernel/keyboard.rs	/^pub const KEY_F7 : u16 = 65;$/;"	c
KEY_F8	kernel/src/kernel/keyboard.rs	/^pub const KEY_F8 : u16 = 66;$/;"	c
KEY_F9	kernel/src/kernel/keyboard.rs	/^pub const KEY_F9 : u16 = 67;$/;"	c
KEY_FASTFORWARD	kernel/src/kernel/keyboard.rs	/^pub const KEY_FASTFORWARD : u16 = 208;$/;"	c
KEY_FILE	kernel/src/kernel/keyboard.rs	/^pub const KEY_FILE : u16 = 144;	\/* AL Local Machine Browser *\/$/;"	c
KEY_FINANCE	kernel/src/kernel/keyboard.rs	/^pub const KEY_FINANCE : u16 = 219;	\/* AL Checkbook\/Finance *\/$/;"	c
KEY_FIND	kernel/src/kernel/keyboard.rs	/^pub const KEY_FIND : u16 = 136;	\/* AC Search *\/$/;"	c
KEY_FORWARD	kernel/src/kernel/keyboard.rs	/^pub const KEY_FORWARD : u16 = 159;	\/* AC Forward *\/$/;"	c
KEY_FORWARDMAIL	kernel/src/kernel/keyboard.rs	/^pub const KEY_FORWARDMAIL : u16 = 233;	\/* AC Forward Msg *\/$/;"	c
KEY_FRONT	kernel/src/kernel/keyboard.rs	/^pub const KEY_FRONT : u16 = 132;$/;"	c
KEY_G	kernel/src/kernel/keyboard.rs	/^pub const KEY_G : u16 = 34;$/;"	c
KEY_GRAVE	kernel/src/kernel/keyboard.rs	/^pub const KEY_GRAVE : u16 = 41;$/;"	c
KEY_H	kernel/src/kernel/keyboard.rs	/^pub const KEY_H : u16 = 35;$/;"	c
KEY_HANGEUL	kernel/src/kernel/keyboard.rs	/^pub const KEY_HANGEUL : u16 = 122;$/;"	c
KEY_HANGUEL	kernel/src/kernel/keyboard.rs	/^pub const KEY_HANGUEL : u16 = KEY_HANGEUL;$/;"	c
KEY_HANJA	kernel/src/kernel/keyboard.rs	/^pub const KEY_HANJA : u16 = 123;$/;"	c
KEY_HELP	kernel/src/kernel/keyboard.rs	/^pub const KEY_HELP : u16 = 138;	\/* AL Integrated Help Center *\/$/;"	c
KEY_HENKAN	kernel/src/kernel/keyboard.rs	/^pub const KEY_HENKAN : u16 = 92;$/;"	c
KEY_HIRAGANA	kernel/src/kernel/keyboard.rs	/^pub const KEY_HIRAGANA : u16 = 91;$/;"	c
KEY_HOME	kernel/src/kernel/keyboard.rs	/^pub const KEY_HOME : u16 = 102;$/;"	c
KEY_HOMEPAGE	kernel/src/kernel/keyboard.rs	/^pub const KEY_HOMEPAGE : u16 = 172;	\/* AC Home *\/$/;"	c
KEY_HP	kernel/src/kernel/keyboard.rs	/^pub const KEY_HP : u16 = 211;$/;"	c
KEY_I	kernel/src/kernel/keyboard.rs	/^pub const KEY_I : u16 = 23;$/;"	c
KEY_INSERT	kernel/src/kernel/keyboard.rs	/^pub const KEY_INSERT : u16 = 110;$/;"	c
KEY_ISO	kernel/src/kernel/keyboard.rs	/^pub const KEY_ISO : u16 = 170;$/;"	c
KEY_J	kernel/src/kernel/keyboard.rs	/^pub const KEY_J : u16 = 36;$/;"	c
KEY_K	kernel/src/kernel/keyboard.rs	/^pub const KEY_K : u16 = 37;$/;"	c
KEY_KATAKANA	kernel/src/kernel/keyboard.rs	/^pub const KEY_KATAKANA : u16 = 90;$/;"	c
KEY_KATAKANAHIRAGANA	kernel/src/kernel/keyboard.rs	/^pub const KEY_KATAKANAHIRAGANA : u16 = 93;$/;"	c
KEY_KBDILLUMDOWN	kernel/src/kernel/keyboard.rs	/^pub const KEY_KBDILLUMDOWN : u16 = 229;$/;"	c
KEY_KBDILLUMTOGGLE	kernel/src/kernel/keyboard.rs	/^pub const KEY_KBDILLUMTOGGLE : u16 = 228;$/;"	c
KEY_KBDILLUMUP	kernel/src/kernel/keyboard.rs	/^pub const KEY_KBDILLUMUP : u16 = 230;$/;"	c
KEY_KP0	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP0 : u16 = 82;$/;"	c
KEY_KP1	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP1 : u16 = 79;$/;"	c
KEY_KP2	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP2 : u16 = 80;$/;"	c
KEY_KP3	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP3 : u16 = 81;$/;"	c
KEY_KP4	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP4 : u16 = 75;$/;"	c
KEY_KP5	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP5 : u16 = 76;$/;"	c
KEY_KP6	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP6 : u16 = 77;$/;"	c
KEY_KP7	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP7 : u16 = 71;$/;"	c
KEY_KP8	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP8 : u16 = 72;$/;"	c
KEY_KP9	kernel/src/kernel/keyboard.rs	/^pub const KEY_KP9 : u16 = 73;$/;"	c
KEY_KPASTERISK	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPASTERISK : u16 = 55;$/;"	c
KEY_KPCOMMA	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPCOMMA : u16 = 121;$/;"	c
KEY_KPDOT	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPDOT : u16 = 83;$/;"	c
KEY_KPENTER	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPENTER : u16 = 96;$/;"	c
KEY_KPEQUAL	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPEQUAL : u16 = 117;$/;"	c
KEY_KPJPCOMMA	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPJPCOMMA : u16 = 95;$/;"	c
KEY_KPLEFTPAREN	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPLEFTPAREN : u16 = 179;$/;"	c
KEY_KPMINUS	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPMINUS : u16 = 74;$/;"	c
KEY_KPPLUS	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPPLUS : u16 = 78;$/;"	c
KEY_KPPLUSMINUS	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPPLUSMINUS : u16 = 118;$/;"	c
KEY_KPRIGHTPAREN	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPRIGHTPAREN : u16 = 180;$/;"	c
KEY_KPSLASH	kernel/src/kernel/keyboard.rs	/^pub const KEY_KPSLASH : u16 = 98;$/;"	c
KEY_L	kernel/src/kernel/keyboard.rs	/^pub const KEY_L : u16 = 38;$/;"	c
KEY_LEFT	kernel/src/kernel/keyboard.rs	/^pub const KEY_LEFT : u16 = 105;$/;"	c
KEY_LEFTALT	kernel/src/kernel/keyboard.rs	/^pub const KEY_LEFTALT : u16 = 56;$/;"	c
KEY_LEFTBRACE	kernel/src/kernel/keyboard.rs	/^pub const KEY_LEFTBRACE : u16 = 26;$/;"	c
KEY_LEFTCTRL	kernel/src/kernel/keyboard.rs	/^pub const KEY_LEFTCTRL : u16 = 29;$/;"	c
KEY_LEFTMETA	kernel/src/kernel/keyboard.rs	/^pub const KEY_LEFTMETA : u16 = 125;$/;"	c
KEY_LEFTSHIFT	kernel/src/kernel/keyboard.rs	/^pub const KEY_LEFTSHIFT : u16 = 42;$/;"	c
KEY_LINEFEED	kernel/src/kernel/keyboard.rs	/^pub const KEY_LINEFEED : u16 = 101;$/;"	c
KEY_M	kernel/src/kernel/keyboard.rs	/^pub const KEY_M : u16 = 50;$/;"	c
KEY_MACRO	kernel/src/kernel/keyboard.rs	/^pub const KEY_MACRO : u16 = 112;$/;"	c
KEY_MAIL	kernel/src/kernel/keyboard.rs	/^pub const KEY_MAIL : u16 = 155;$/;"	c
KEY_MEDIA	kernel/src/kernel/keyboard.rs	/^pub const KEY_MEDIA : u16 = 226;$/;"	c
KEY_MENU	kernel/src/kernel/keyboard.rs	/^pub const KEY_MENU : u16 = 139;	\/* Menu (show menu) *\/$/;"	c
KEY_MICMUTE	kernel/src/kernel/keyboard.rs	/^pub const KEY_MICMUTE : u16 = 248;	\/* Mute \/ unmute the microphone *\/$/;"	c
KEY_MINUS	kernel/src/kernel/keyboard.rs	/^pub const KEY_MINUS : u16 = 12;$/;"	c
KEY_MOVE	kernel/src/kernel/keyboard.rs	/^pub const KEY_MOVE : u16 = 175;$/;"	c
KEY_MSDOS	kernel/src/kernel/keyboard.rs	/^pub const KEY_MSDOS : u16 = 151;$/;"	c
KEY_MUHENKAN	kernel/src/kernel/keyboard.rs	/^pub const KEY_MUHENKAN : u16 = 94;$/;"	c
KEY_MUTE	kernel/src/kernel/keyboard.rs	/^pub const KEY_MUTE : u16 = 113;$/;"	c
KEY_N	kernel/src/kernel/keyboard.rs	/^pub const KEY_N : u16 = 49;$/;"	c
KEY_NEW	kernel/src/kernel/keyboard.rs	/^pub const KEY_NEW : u16 = 181;	\/* AC New *\/$/;"	c
KEY_NEXTSONG	kernel/src/kernel/keyboard.rs	/^pub const KEY_NEXTSONG : u16 = 163;$/;"	c
KEY_NUMLOCK	kernel/src/kernel/keyboard.rs	/^pub const KEY_NUMLOCK : u16 = 69;$/;"	c
KEY_O	kernel/src/kernel/keyboard.rs	/^pub const KEY_O : u16 = 24;$/;"	c
KEY_OPEN	kernel/src/kernel/keyboard.rs	/^pub const KEY_OPEN : u16 = 134;	\/* AC Open *\/$/;"	c
KEY_P	kernel/src/kernel/keyboard.rs	/^pub const KEY_P : u16 = 25;$/;"	c
KEY_PAGEDOWN	kernel/src/kernel/keyboard.rs	/^pub const KEY_PAGEDOWN : u16 = 109;$/;"	c
KEY_PAGEUP	kernel/src/kernel/keyboard.rs	/^pub const KEY_PAGEUP : u16 = 104;$/;"	c
KEY_PASTE	kernel/src/kernel/keyboard.rs	/^pub const KEY_PASTE : u16 = 135;	\/* AC Paste *\/$/;"	c
KEY_PAUSE	kernel/src/kernel/keyboard.rs	/^pub const KEY_PAUSE : u16 = 119;$/;"	c
KEY_PAUSECD	kernel/src/kernel/keyboard.rs	/^pub const KEY_PAUSECD : u16 = 201;$/;"	c
KEY_PHONE	kernel/src/kernel/keyboard.rs	/^pub const KEY_PHONE : u16 = 169;	\/* Media Select Telephone *\/$/;"	c
KEY_PLAY	kernel/src/kernel/keyboard.rs	/^pub const KEY_PLAY : u16 = 207;$/;"	c
KEY_PLAYCD	kernel/src/kernel/keyboard.rs	/^pub const KEY_PLAYCD : u16 = 200;$/;"	c
KEY_PLAYPAUSE	kernel/src/kernel/keyboard.rs	/^pub const KEY_PLAYPAUSE : u16 = 164;$/;"	c
KEY_POWER	kernel/src/kernel/keyboard.rs	/^pub const KEY_POWER : u16 = 116;	\/* SC System Power Down *\/$/;"	c
KEY_PREVIOUSSONG	kernel/src/kernel/keyboard.rs	/^pub const KEY_PREVIOUSSONG : u16 = 165;$/;"	c
KEY_PRINT	kernel/src/kernel/keyboard.rs	/^pub const KEY_PRINT : u16 = 210;	\/* AC Print *\/$/;"	c
KEY_PROG1	kernel/src/kernel/keyboard.rs	/^pub const KEY_PROG1 : u16 = 148;$/;"	c
KEY_PROG2	kernel/src/kernel/keyboard.rs	/^pub const KEY_PROG2 : u16 = 149;$/;"	c
KEY_PROG3	kernel/src/kernel/keyboard.rs	/^pub const KEY_PROG3 : u16 = 202;$/;"	c
KEY_PROG4	kernel/src/kernel/keyboard.rs	/^pub const KEY_PROG4 : u16 = 203;$/;"	c
KEY_PROPS	kernel/src/kernel/keyboard.rs	/^pub const KEY_PROPS : u16 = 130;	\/* AC Properties *\/$/;"	c
KEY_Q	kernel/src/kernel/keyboard.rs	/^pub const KEY_Q : u16 = 16;$/;"	c
KEY_QUESTION	kernel/src/kernel/keyboard.rs	/^pub const KEY_QUESTION : u16 = 214;$/;"	c
KEY_R	kernel/src/kernel/keyboard.rs	/^pub const KEY_R : u16 = 19;$/;"	c
KEY_RECORD	kernel/src/kernel/keyboard.rs	/^pub const KEY_RECORD : u16 = 167;$/;"	c
KEY_REDO	kernel/src/kernel/keyboard.rs	/^pub const KEY_REDO : u16 = 182;	\/* AC Redo\/Repeat *\/$/;"	c
KEY_REFRESH	kernel/src/kernel/keyboard.rs	/^pub const KEY_REFRESH : u16 = 173;	\/* AC Refresh *\/$/;"	c
KEY_REPLY	kernel/src/kernel/keyboard.rs	/^pub const KEY_REPLY : u16 = 232;	\/* AC Reply *\/$/;"	c
KEY_RESERVED	kernel/src/kernel/keyboard.rs	/^pub const KEY_RESERVED : u16 = 0;$/;"	c
KEY_REWIND	kernel/src/kernel/keyboard.rs	/^pub const KEY_REWIND : u16 = 168;$/;"	c
KEY_RFKILL	kernel/src/kernel/keyboard.rs	/^pub const KEY_RFKILL : u16 = 247;	\/* Key that controls all radios *\/$/;"	c
KEY_RIGHT	kernel/src/kernel/keyboard.rs	/^pub const KEY_RIGHT : u16 = 106;$/;"	c
KEY_RIGHTALT	kernel/src/kernel/keyboard.rs	/^pub const KEY_RIGHTALT : u16 = 100;$/;"	c
KEY_RIGHTBRACE	kernel/src/kernel/keyboard.rs	/^pub const KEY_RIGHTBRACE : u16 = 27;$/;"	c
KEY_RIGHTCTRL	kernel/src/kernel/keyboard.rs	/^pub const KEY_RIGHTCTRL : u16 = 97;$/;"	c
KEY_RIGHTMETA	kernel/src/kernel/keyboard.rs	/^pub const KEY_RIGHTMETA : u16 = 126;$/;"	c
KEY_RIGHTSHIFT	kernel/src/kernel/keyboard.rs	/^pub const KEY_RIGHTSHIFT : u16 = 54;$/;"	c
KEY_RO	kernel/src/kernel/keyboard.rs	/^pub const KEY_RO : u16 = 89;$/;"	c
KEY_ROTATE_DISPLAY	kernel/src/kernel/keyboard.rs	/^pub const KEY_ROTATE_DISPLAY : u16 = 153;	\/* Display orientation for e.g. tablets *\/$/;"	c
KEY_S	kernel/src/kernel/keyboard.rs	/^pub const KEY_S : u16 = 31;$/;"	c
KEY_SAVE	kernel/src/kernel/keyboard.rs	/^pub const KEY_SAVE : u16 = 234;	\/* AC Save *\/$/;"	c
KEY_SCALE	kernel/src/kernel/keyboard.rs	/^pub const KEY_SCALE : u16 = 120;	\/* AL Compiz Scale (Expose) *\/$/;"	c
KEY_SCREENLOCK	kernel/src/kernel/keyboard.rs	/^pub const KEY_SCREENLOCK : u16 = KEY_COFFEE;$/;"	c
KEY_SCROLLDOWN	kernel/src/kernel/keyboard.rs	/^pub const KEY_SCROLLDOWN : u16 = 178;$/;"	c
KEY_SCROLLLOCK	kernel/src/kernel/keyboard.rs	/^pub const KEY_SCROLLLOCK : u16 = 70;$/;"	c
KEY_SCROLLUP	kernel/src/kernel/keyboard.rs	/^pub const KEY_SCROLLUP : u16 = 177;$/;"	c
KEY_SEARCH	kernel/src/kernel/keyboard.rs	/^pub const KEY_SEARCH : u16 = 217;$/;"	c
KEY_SEMICOLON	kernel/src/kernel/keyboard.rs	/^pub const KEY_SEMICOLON : u16 = 39;$/;"	c
KEY_SEND	kernel/src/kernel/keyboard.rs	/^pub const KEY_SEND : u16 = 231;	\/* AC Send *\/$/;"	c
KEY_SENDFILE	kernel/src/kernel/keyboard.rs	/^pub const KEY_SENDFILE : u16 = 145;$/;"	c
KEY_SETUP	kernel/src/kernel/keyboard.rs	/^pub const KEY_SETUP : u16 = 141;$/;"	c
KEY_SHOP	kernel/src/kernel/keyboard.rs	/^pub const KEY_SHOP : u16 = 221;$/;"	c
KEY_SLASH	kernel/src/kernel/keyboard.rs	/^pub const KEY_SLASH : u16 = 53;$/;"	c
KEY_SLEEP	kernel/src/kernel/keyboard.rs	/^pub const KEY_SLEEP : u16 = 142;	\/* SC System Sleep *\/$/;"	c
KEY_SOUND	kernel/src/kernel/keyboard.rs	/^pub const KEY_SOUND : u16 = 213;$/;"	c
KEY_SPACE	kernel/src/kernel/keyboard.rs	/^pub const KEY_SPACE : u16 = 57;$/;"	c
KEY_SPORT	kernel/src/kernel/keyboard.rs	/^pub const KEY_SPORT : u16 = 220;$/;"	c
KEY_STATUS	kernel/src/kernel/keyboard.rs	/^static mut KEY_STATUS : [bool; 256] = [false; 256];$/;"	c
KEY_STOP	kernel/src/kernel/keyboard.rs	/^pub const KEY_STOP : u16 = 128;	\/* AC Stop *\/$/;"	c
KEY_STOPCD	kernel/src/kernel/keyboard.rs	/^pub const KEY_STOPCD : u16 = 166;$/;"	c
KEY_SUSPEND	kernel/src/kernel/keyboard.rs	/^pub const KEY_SUSPEND : u16 = 205;$/;"	c
KEY_SWITCHVIDEOMODE	kernel/src/kernel/keyboard.rs	/^pub const KEY_SWITCHVIDEOMODE : u16 = 227;	\/* Cycle between available video$/;"	c
KEY_SYSRQ	kernel/src/kernel/keyboard.rs	/^pub const KEY_SYSRQ : u16 = 99;$/;"	c
KEY_T	kernel/src/kernel/keyboard.rs	/^pub const KEY_T : u16 = 20;$/;"	c
KEY_TAB	kernel/src/kernel/keyboard.rs	/^pub const KEY_TAB : u16 = 15;$/;"	c
KEY_U	kernel/src/kernel/keyboard.rs	/^pub const KEY_U : u16 = 22;$/;"	c
KEY_UNDO	kernel/src/kernel/keyboard.rs	/^pub const KEY_UNDO : u16 = 131;	\/* AC Undo *\/$/;"	c
KEY_UNKNOWN	kernel/src/kernel/keyboard.rs	/^pub const KEY_UNKNOWN : u16 = 240;$/;"	c
KEY_UP	kernel/src/kernel/keyboard.rs	/^pub const KEY_UP : u16 = 103;$/;"	c
KEY_UWB	kernel/src/kernel/keyboard.rs	/^pub const KEY_UWB : u16 = 239;$/;"	c
KEY_V	kernel/src/kernel/keyboard.rs	/^pub const KEY_V : u16 = 47;$/;"	c
KEY_VIDEO_NEXT	kernel/src/kernel/keyboard.rs	/^pub const KEY_VIDEO_NEXT : u16 = 241;	\/* drive next video source *\/$/;"	c
KEY_VIDEO_PREV	kernel/src/kernel/keyboard.rs	/^pub const KEY_VIDEO_PREV : u16 = 242;	\/* drive previous video source *\/$/;"	c
KEY_VOLUMEDOWN	kernel/src/kernel/keyboard.rs	/^pub const KEY_VOLUMEDOWN : u16 = 114;$/;"	c
KEY_VOLUMEUP	kernel/src/kernel/keyboard.rs	/^pub const KEY_VOLUMEUP : u16 = 115;$/;"	c
KEY_W	kernel/src/kernel/keyboard.rs	/^pub const KEY_W : u16 = 17;$/;"	c
KEY_WAKEUP	kernel/src/kernel/keyboard.rs	/^pub const KEY_WAKEUP : u16 = 143;	\/* System Wake Up *\/$/;"	c
KEY_WIMAX	kernel/src/kernel/keyboard.rs	/^pub const KEY_WIMAX : u16 = KEY_WWAN;$/;"	c
KEY_WLAN	kernel/src/kernel/keyboard.rs	/^pub const KEY_WLAN : u16 = 238;$/;"	c
KEY_WWAN	kernel/src/kernel/keyboard.rs	/^pub const KEY_WWAN : u16 = 246;	\/* Wireless WAN (LTE, UMTS, GSM, etc.) *\/$/;"	c
KEY_WWW	kernel/src/kernel/keyboard.rs	/^pub const KEY_WWW : u16 = 150;	\/* AL Internet Browser *\/$/;"	c
KEY_X	kernel/src/kernel/keyboard.rs	/^pub const KEY_X : u16 = 45;$/;"	c
KEY_XFER	kernel/src/kernel/keyboard.rs	/^pub const KEY_XFER : u16 = 147;$/;"	c
KEY_Y	kernel/src/kernel/keyboard.rs	/^pub const KEY_Y : u16 = 21;$/;"	c
KEY_YEN	kernel/src/kernel/keyboard.rs	/^pub const KEY_YEN : u16 = 124;$/;"	c
KEY_Z	kernel/src/kernel/keyboard.rs	/^pub const KEY_Z : u16 = 44;$/;"	c
KEY_ZENKAKUHANKAKU	kernel/src/kernel/keyboard.rs	/^pub const KEY_ZENKAKUHANKAKU : u16 = 85;$/;"	c
KMALLOC_CACHES	kernel/src/mm/slub.rs	/^pub static mut KMALLOC_CACHES : [*mut KmemCache; KMALLOC_CACHES_NUM] = [null_mut(); KMALLOC_CACHES_NUM];$/;"	c
KMALLOC_CACHES_NUM	kernel/src/mm/slub.rs	/^pub const KMALLOC_CACHES_NUM : usize = 12;$/;"	c
KMALLOC_INFO	kernel/src/mm/slub.rs	/^pub static KMALLOC_INFO : [KMallocInfoStruct; KMALLOC_CACHES_NUM] =$/;"	c
KMALLOC_THREASHHOLD	kernel/src/mm/slub.rs	/^const KMALLOC_THREASHHOLD : usize = 0x800;$/;"	c
KMallocInfoStruct	kernel/src/mm/slub.rs	/^impl KMallocInfoStruct$/;"	i
KMallocInfoStruct	kernel/src/mm/slub.rs	/^pub struct KMallocInfoStruct$/;"	s
KernelCloneArgs	kernel/src/kernel/fork.rs	/^pub struct KernelCloneArgs$/;"	s
KeyBoard	kernel/src/kernel/keyboard.rs	/^impl KeyBoard$/;"	i
KeyBoard	kernel/src/kernel/keyboard.rs	/^struct KeyBoard$/;"	s
KmemCache	kernel/src/mm/slub.rs	/^impl KmemCache {$/;"	i
KmemCache	kernel/src/mm/slub.rs	/^pub struct KmemCache$/;"	s
KmemCacheCpu	kernel/src/mm/slub.rs	/^impl KmemCacheCpu {$/;"	i
KmemCacheCpu	kernel/src/mm/slub.rs	/^struct KmemCacheCpu$/;"	s
KmemCacheNode	kernel/src/mm/slub.rs	/^impl KmemCacheNode {$/;"	i
KmemCacheNode	kernel/src/mm/slub.rs	/^pub struct KmemCacheNode$/;"	s
KmemCacheOrderObjects	kernel/src/mm/slub.rs	/^impl KmemCacheOrderObjects {$/;"	i
KmemCacheOrderObjects	kernel/src/mm/slub.rs	/^struct KmemCacheOrderObjects$/;"	s
LAST_FPU_TASK	kernel/src/kernel/fpu.rs	/^static mut LAST_FPU_TASK : *mut process::PCB = null_mut();$/;"	c
LF	kernel/src/kernel/console.rs	/^const LF : i8 = 0xa;$/;"	c
LIB_FILES	Makefile	/^LIB_FILES:=$(LIB_SRC)\/lib.rs $(LIB_SRC)\/unistd.rs $(LIB_SRC)\/macros.rs $(LIB_SRC)\/print.rs .\/lib\/Makefile $(LIB_SRC)\/..\/.cargo\/config.toml $(LIB_SRC)\/lang_items.rs \\$/;"	m
LIB_SRC	Makefile	/^LIB_SRC:=.\/lib\/src$/;"	m
LINEAR_MAP_AREA_START	kernel/src/mm/memory.rs	/^pub const LINEAR_MAP_AREA_START : *mut c_void = 0xffff880000000000 as *mut c_void;$/;"	c
LINEAR_MAP_ARREA_END	kernel/src/mm/memory.rs	/^pub const LINEAR_MAP_ARREA_END : *mut c_void = 0xffffc80000000000 as *mut c_void;$/;"	c
LOCKED	kernel/src/fs/mount.rs	/^        const LOCKED = 0x800000;$/;"	c
LOCK_ATIME	kernel/src/fs/mount.rs	/^        const LOCK_ATIME = 0x40000;$/;"	c
LOCK_NODEV	kernel/src/fs/mount.rs	/^        const LOCK_NODEV = 0x200000;$/;"	c
LOCK_NOEXEC	kernel/src/fs/mount.rs	/^        const LOCK_NOEXEC = 0x80000;$/;"	c
LOCK_NOSUID	kernel/src/fs/mount.rs	/^        const LOCK_NOSUID = 0x100000;$/;"	c
LOCK_READONLY	kernel/src/fs/mount.rs	/^        const LOCK_READONLY = 0x400000;$/;"	c
Linux2	kernel/src/fs/ext4.rs	/^pub struct Linux2$/;"	s
ListHead	kernel/src/kernel/list.rs	/^impl ListHead {$/;"	i
ListHead	kernel/src/kernel/list.rs	/^pub struct ListHead$/;"	s
LockT	kernel/src/kernel/io.rs	/^type LockT = bool;$/;"	T
LogicalPart	kernel/src/fs/file.rs	/^impl LogicalPart {$/;"	i
LogicalPart	kernel/src/fs/file.rs	/^pub struct LogicalPart$/;"	s
MACRO_FILES	Makefile	/^MACRO_FILES:=$(MACRO_SRC)\/lib.rs $(MACRO_SRC)\/__init.rs $(MACRO_SRC)\/__exit.rs$/;"	m
MACRO_SRC	Makefile	/^MACRO_SRC:=.\/proc_macro\/src$/;"	m
MANAGE_TRANSIT	kernel/src/fs/dcache.rs	/^        const MANAGE_TRANSIT = 0x20000;$/;"	c
MAP_ANONYMOUS	kernel/src/mm/mm_type.rs	/^        const MAP_ANONYMOUS	= 0x20;$/;"	c
MAP_EXECUTABLE	kernel/src/mm/mm_type.rs	/^        const MAP_EXECUTABLE = 0x1000;$/;"	c
MAP_FIXED_NOREPLACE	kernel/src/mm/mm_type.rs	/^        const MAP_FIXED_NOREPLACE = 0x100000;	\/* MAP_FIXED which doesn't unmap underlying mapping *\/$/;"	c
MAP_HUGETLB	kernel/src/mm/mm_type.rs	/^        const MAP_HUGETLB = 0x040000;	\/* create a huge page mapping *\/$/;"	c
MAP_LOCKED	kernel/src/mm/mm_type.rs	/^        const MAP_LOCKED = 0x2000;		\/* pages are locked *\/$/;"	c
MAP_NONBLOCK	kernel/src/mm/mm_type.rs	/^        const MAP_NONBLOCK = 0x010000;	\/* do not block on IO *\/$/;"	c
MAP_POPULATE	kernel/src/mm/mm_type.rs	/^        const MAP_POPULATE = 0x008000;	\/* populate (prefault) pagetables *\/$/;"	c
MAP_PRIVATE	kernel/src/mm/mm_type.rs	/^        const MAP_PRIVATE = 0x02;$/;"	c
MAP_SHARED	kernel/src/mm/mm_type.rs	/^        const MAP_SHARED = 0x01;$/;"	c
MAP_STACK	kernel/src/mm/mm_type.rs	/^        const MAP_STACK	= 0x020000;	\/* give out an address that is best suited for process\/thread stacks *\/$/;"	c
MAP_SYNC	kernel/src/mm/mm_type.rs	/^        const MAP_SYNC = 0x080000; \/* perform synchronous page faults for the mapping *\/$/;"	c
MARKED	kernel/src/fs/mount.rs	/^        const MARKED = 0x4000000;$/;"	c
MASK	kernel/src/fs/file.rs	/^        const MASK = 0o777;$/;"	c
MAX_ERRNO	kernel/src/kernel/errno_base.rs	/^const MAX_ERRNO : Err = 4095;$/;"	c
MAX_NUMNODES	kernel/src/mm/slub.rs	/^const MAX_NUMNODES : usize = 1;$/;"	c
MAX_PROCSEE_STACK_SIZE	kernel/src/kernel/process.rs	/^pub const MAX_PROCSEE_STACK_SIZE : usize = 0x4000000;$/;"	c
MAX_PROGRESS_NUM	kernel/src/kernel/process.rs	/^const MAX_PROGRESS_NUM : Pid = 65536;$/;"	c
MAX_USER_STACK_SIZE	kernel/src/mm/memory.rs	/^pub const MAX_USER_STACK_SIZE : usize = 8 * 1024 * 1024;$/;"	c
MEMORY_DESCRIPTOR	kernel/src/mm/memory.rs	/^pub static mut MEMORY_DESCRIPTOR : MemoryDescriptor = MemoryDescriptor{ size : 0, all_pages : 0, start : core::ptr::null() };$/;"	c
MEMORY_POOL	kernel/src/mm/memory.rs	/^pub static mut MEMORY_POOL : MemoryPool = MemoryPool::new();$/;"	c
MEM_BASE	kernel/src/kernel/console.rs	/^const MEM_BASE : u64 = 0xb8000;$/;"	c
MEM_END	kernel/src/kernel/console.rs	/^const MEM_END : u64 = MEM_BASE + MEM_SIZE;$/;"	c
MEM_SIZE	kernel/src/kernel/console.rs	/^const MEM_SIZE : u64 = 0x4000;$/;"	c
MINUTE	kernel/src/kernel/time.rs	/^const MINUTE : u64 = 60;$/;"	c
MMAP_START	kernel/src/mm/memory.rs	/^pub const MMAP_START : *mut c_void = 0x30000000000000 as *mut c_void;$/;"	c
MMStruct	kernel/src/mm/mm_type.rs	/^impl MMStruct {$/;"	i
MMStruct	kernel/src/mm/mm_type.rs	/^pub struct MMStruct$/;"	s
MNT_DETACH	kernel/src/fs/fs.rs	/^pub const MNT_DETACH : u32 = 0x00000002;\/* Just detach from the tree *\/$/;"	c
MNT_EXPIRE	kernel/src/fs/fs.rs	/^pub const MNT_EXPIRE : u32 = 0x00000004;\/* Mark for expiry *\/$/;"	c
MNT_FORCE	kernel/src/fs/fs.rs	/^pub const MNT_FORCE : u32 = 0x00000001;\/* Attempt to forcibily umount *\/$/;"	c
MNT_GROUP_IDA	kernel/src/fs/mount.rs	/^static mut MNT_GROUP_IDA : Ida = Ida::new();$/;"	c
MNT_ID_IDA	kernel/src/fs/mount.rs	/^static mut MNT_ID_IDA : Ida = Ida::new();$/;"	c
MONTH	kernel/src/kernel/time.rs	/^const MONTH : [u64; 12] = [0, 31, 31 + 29, 31 + 29 + 31, 31 + 29 + 31 + 30, 31 + 29 + 31 + 30 + 31, 31 + 29 + 31 + 30 + 31 + 30, 31 + 29 + 31 + 30 + 31 + 30 + 31, 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31, 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30,  31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31, 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ];$/;"	c
MOUNTED	kernel/src/fs/dcache.rs	/^        const MOUNTED = 0x8000;$/;"	c
MOUNT_HLIST	kernel/src/fs/mount.rs	/^static mut MOUNT_HLIST : BTreeMap<*mut DEntry, *mut Mountpoint> = BTreeMap::new();$/;"	c
MOUNT_LOCK	kernel/src/fs/mount.rs	/^static mut MOUNT_LOCK : Semaphore = Semaphore::new(1);$/;"	c
MOVE_MOUNT_BENEATH	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_BENEATH : u32 = 0x00000200; \/* Mount beneath top mount *\/$/;"	c
MOVE_MOUNT_F_AUTOMOUNTS	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_F_AUTOMOUNTS : u32 = 0x00000002; \/* Follow automounts on from path *\/$/;"	c
MOVE_MOUNT_F_EMPTY_PATH	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_F_EMPTY_PATH : u32 = 0x00000004; \/* Empty from path permitted *\/$/;"	c
MOVE_MOUNT_F_SYMLINKS	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_F_SYMLINKS : u32 = 0x00000001; \/* Follow symlinks on from path *\/$/;"	c
MOVE_MOUNT_MASK	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_MASK : u32 = 0x00000377;$/;"	c
MOVE_MOUNT_SET_GROUP	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_SET_GROUP : u32 = 0x00000100; \/* Set sharing group instead *\/$/;"	c
MOVE_MOUNT_T_AUTOMOUNTS	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_T_AUTOMOUNTS : u32 = 0x00000020; \/* Follow automounts on to path *\/$/;"	c
MOVE_MOUNT_T_EMPTY_PATH	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_T_EMPTY_PATH : u32 = 0x00000040; \/* Empty to path permitted *\/$/;"	c
MOVE_MOUNT_T_SYMLINKS	kernel/src/fs/mount.rs	/^pub const MOVE_MOUNT_T_SYMLINKS : u32 = 0x00000010; \/* Follow symlinks on to path *\/$/;"	c
MS_ACTIVE	kernel/src/fs/mount.rs	/^pub const MS_ACTIVE : u32 = (1<<30);$/;"	c
MS_BIND	kernel/src/fs/mount.rs	/^pub const MS_BIND : u32 = 4096;$/;"	c
MS_BORN	kernel/src/fs/mount.rs	/^pub const MS_BORN : u32 = (1<<29);$/;"	c
MS_DIRSYNC	kernel/src/fs/mount.rs	/^pub const MS_DIRSYNC : u32 = 128; \/* Directory modifications are synchronous *\/$/;"	c
MS_I_VERSION	kernel/src/fs/mount.rs	/^pub const MS_I_VERSION : u32 = (1<<23); \/* Update inode I_version field *\/$/;"	c
MS_KERNMOUNT	kernel/src/fs/mount.rs	/^pub const MS_KERNMOUNT : u32 = (1<<22); \/* this is a kern_mount call *\/$/;"	c
MS_LAZYTIME	kernel/src/fs/mount.rs	/^pub const MS_LAZYTIME : u32 = (1<<25); \/* Update the on-disk [acm]times lazily *\/$/;"	c
MS_MANDLOCK	kernel/src/fs/mount.rs	/^pub const MS_MANDLOCK : u32 = 64;  \/* Allow mandatory locks on an FS *\/$/;"	c
MS_MGC_MSK	kernel/src/fs/mount.rs	/^pub const MS_MGC_MSK : u32 = 0xffff0000;$/;"	c
MS_MGC_VAL	kernel/src/fs/mount.rs	/^pub const MS_MGC_VAL : u32 = 0xC0ED0000;$/;"	c
MS_MOVE	kernel/src/fs/mount.rs	/^pub const MS_MOVE : u32 = 8192;$/;"	c
MS_NOATIME	kernel/src/fs/mount.rs	/^pub const MS_NOATIME : u32 = 1024;    \/* Do not update access times. *\/$/;"	c
MS_NODEV	kernel/src/fs/mount.rs	/^pub const MS_NODEV : u32 = 4;  \/* Disallow access to device special files *\/$/;"	c
MS_NODIRATIME	kernel/src/fs/mount.rs	/^pub const MS_NODIRATIME : u32 = 2048;    \/* Do not update directory access times *\/$/;"	c
MS_NOEXEC	kernel/src/fs/mount.rs	/^pub const MS_NOEXEC : u32 = 8;  \/* Disallow program execution *\/$/;"	c
MS_NOREMOTELOCK	kernel/src/fs/mount.rs	/^pub const MS_NOREMOTELOCK : u32 = (1<<27);$/;"	c
MS_NOSEC	kernel/src/fs/mount.rs	/^pub const MS_NOSEC : u32 = (1<<28);$/;"	c
MS_NOSUID	kernel/src/fs/mount.rs	/^pub const MS_NOSUID : u32 = 2;  \/* Ignore suid and sgid bits *\/$/;"	c
MS_NOSYMFOLLOW	kernel/src/fs/mount.rs	/^pub const MS_NOSYMFOLLOW : u32 = 256; \/* Do not follow symlinks *\/$/;"	c
MS_NOUSER	kernel/src/fs/mount.rs	/^pub const MS_NOUSER : u32 = (1<<31);$/;"	c
MS_POSIXACL	kernel/src/fs/mount.rs	/^pub const MS_POSIXACL : u32 = (1<<16); \/* VFS does not apply the umask *\/$/;"	c
MS_PRIVATE	kernel/src/fs/mount.rs	/^pub const MS_PRIVATE : u32 = (1<<18); \/* change to private *\/$/;"	c
MS_RDONLY	kernel/src/fs/mount.rs	/^pub const MS_RDONLY : u32 = 1;  \/* Mount read-only *\/$/;"	c
MS_REC	kernel/src/fs/mount.rs	/^pub const MS_REC : u32 = 16384;$/;"	c
MS_RELATIME	kernel/src/fs/mount.rs	/^pub const MS_RELATIME : u32 = (1<<21); \/* Update atime relative to mtime\/ctime. *\/$/;"	c
MS_REMOUNT	kernel/src/fs/mount.rs	/^pub const MS_REMOUNT : u32 = 32;  \/* Alter flags of a mounted FS *\/$/;"	c
MS_RMT_MASK	kernel/src/fs/mount.rs	/^pub const MS_RMT_MASK : u32 =  (MS_RDONLY|MS_SYNCHRONOUS|MS_MANDLOCK|MS_I_VERSION|$/;"	c
MS_SHARED	kernel/src/fs/mount.rs	/^pub const MS_SHARED : u32 = (1<<20); \/* change to shared *\/$/;"	c
MS_SILENT	kernel/src/fs/mount.rs	/^pub const MS_SILENT : u32 = 32768;$/;"	c
MS_SLAVE	kernel/src/fs/mount.rs	/^pub const MS_SLAVE : u32 = (1<<19); \/* change to slave *\/$/;"	c
MS_STRICTATIME	kernel/src/fs/mount.rs	/^pub const MS_STRICTATIME : u32 = (1<<24); \/* Always perform atime updates *\/$/;"	c
MS_SUBMOUNT	kernel/src/fs/mount.rs	/^pub const MS_SUBMOUNT : u32 = (1<<26);$/;"	c
MS_SYNCHRONOUS	kernel/src/fs/mount.rs	/^pub const MS_SYNCHRONOUS : u32 = 16;  \/* Writes are synced at once *\/$/;"	c
MS_UNBINDABLE	kernel/src/fs/mount.rs	/^pub const MS_UNBINDABLE : u32 = (1<<17); \/* change to unbindable *\/$/;"	c
MS_VERBOSE	kernel/src/fs/mount.rs	/^pub const MS_VERBOSE : u32 = 32768;   \/* War is peace. Verbosity is silence.MS_VERBOSE is deprecated. *\/$/;"	c
Masix2	kernel/src/fs/ext4.rs	/^pub struct Masix2$/;"	s
MemoryDescriptor	kernel/src/mm/memory.rs	/^pub struct MemoryDescriptor$/;"	s
MemoryPool	kernel/src/mm/memory.rs	/^impl MemoryPool {$/;"	i
MemoryPool	kernel/src/mm/memory.rs	/^pub struct MemoryPool$/;"	s
MemorySpan	kernel/src/mm/memory.rs	/^impl MemorySpan$/;"	i
MemorySpan	kernel/src/mm/memory.rs	/^struct MemorySpan$/;"	s
MmapType	kernel/src/mm/mm_type.rs	/^    pub struct MmapType : u64$/;"	s
MntFlags	kernel/src/fs/mount.rs	/^    pub struct MntFlags : u32$/;"	s
MntIdmap	kernel/src/fs/mnt_idmapping.rs	/^impl MntIdmap {$/;"	i
MntIdmap	kernel/src/fs/mnt_idmapping.rs	/^pub struct MntIdmap$/;"	s
MntNamespace	kernel/src/fs/mount.rs	/^impl MntNamespace$/;"	i
MntNamespace	kernel/src/fs/mount.rs	/^struct MntNamespace$/;"	s
MntTreeFlag	kernel/src/fs/mount.rs	/^enum MntTreeFlag {$/;"	g
Mount	kernel/src/fs/mount.rs	/^impl Mount {$/;"	i
Mount	kernel/src/fs/mount.rs	/^pub struct Mount$/;"	s
Mountpoint	kernel/src/fs/mount.rs	/^impl Mountpoint$/;"	i
Mountpoint	kernel/src/fs/mount.rs	/^pub struct Mountpoint$/;"	s
NEED_AUTOMOUNT	kernel/src/fs/dcache.rs	/^        const NEED_AUTOMOUNT = 0x10000;$/;"	c
NFSFS_RENAMED	kernel/src/fs/dcache.rs	/^        const NFSFS_RENAMED = 0x1000;$/;"	c
NOATIME	kernel/src/fs/mount.rs	/^        const NOATIME = bit!(3);$/;"	c
NODES_MASK	kernel/src/mm/page.rs	/^pub const NODES_MASK : u32 = 1 << NODES_PGSHIFT - 1;$/;"	c
NODES_PGSHIFT	kernel/src/mm/page.rs	/^pub const NODES_PGSHIFT : u32 = NODES_WIDTH;$/;"	c
NODES_WIDTH	kernel/src/mm/page.rs	/^pub const NODES_WIDTH : u32 = 22;$/;"	c
NODEV	kernel/src/fs/mount.rs	/^        const NODEV = bit!(1);$/;"	c
NODIRATIME	kernel/src/fs/mount.rs	/^        const NODIRATIME = bit!(4);$/;"	c
NOEXEC	kernel/src/fs/mount.rs	/^        const NOEXEC = bit!(2);$/;"	c
NOFS	kernel/src/mm/page.rs	/^        const NOFS = Self::__WAIT.bits() | Self::__IO.bits();$/;"	c
NOIO	kernel/src/mm/page.rs	/^        const NOIO = Self::__WAIT.bits();$/;"	c
NOP_MNT_IDMAP	kernel/src/fs/mnt_idmapping.rs	/^pub static mut NOP_MNT_IDMAP : MntIdmap = MntIdmap$/;"	c
NOSUID	kernel/src/fs/mount.rs	/^        const NOSUID = bit!(0);$/;"	c
NOSYMFOLLOW	kernel/src/fs/mount.rs	/^        const NOSYMFOLLOW = bit!(7);$/;"	c
NUL	kernel/src/kernel/console.rs	/^const NUL : i8 = 0;$/;"	c
NameFunc	kernel/src/fs/dcache.rs	/^pub type NameFunc = fn(&mut DEntry, *const c_char, u32) -> i64;$/;"	T
NsCommon	kernel/src/fs/ns_common.rs	/^pub struct NsCommon$/;"	s
NtfsMbr	kernel/src/fs/ntfs.rs	/^struct NtfsMbr$/;"	s
ONRB	kernel/src/fs/mount.rs	/^        const ONRB = 0x10000000;$/;"	c
OP_COMPARE	kernel/src/fs/dcache.rs	/^        const OP_COMPARE = 0x2;$/;"	c
OP_DELETE	kernel/src/fs/dcache.rs	/^        const OP_DELETE = 0x8;$/;"	c
OP_HASH	kernel/src/fs/dcache.rs	/^        const OP_HASH = 0x1;$/;"	c
OP_PRUNE	kernel/src/fs/dcache.rs	/^        const OP_PRUNE = 0x10;$/;"	c
OP_REVALIDATE	kernel/src/fs/dcache.rs	/^        const OP_REVALIDATE = 0x4;$/;"	c
OP_WEAK_REVALIDATE	kernel/src/fs/dcache.rs	/^        const OP_WEAK_REVALIDATE = 0x800;$/;"	c
OSCILLATOR	kernel/src/kernel/clock.rs	/^const OSCILLATOR : u64 = 11932182;$/;"	c
O_ACCMODE	kernel/src/fs/file.rs	/^        const O_ACCMODE = 03;     \/\/ 文件访问模式屏蔽码$/;"	c
O_APPEND	kernel/src/fs/file.rs	/^        const O_APPEND = 02000;   \/\/ 以添加方式打开，文件指针置为文件尾$/;"	c
O_CREAT	kernel/src/fs/file.rs	/^        const O_CREAT = 00100;    \/\/ 如果文件不存在就创建$/;"	c
O_EXCL	kernel/src/fs/file.rs	/^        const O_EXCL = 00200;     \/\/ 独占使用文件标志$/;"	c
O_NOCTTY	kernel/src/fs/file.rs	/^        const O_NOCTTY = 00400;   \/\/ 不分配控制终端$/;"	c
O_NONBLOCK	kernel/src/fs/file.rs	/^        const O_NONBLOCK = 04000; \/\/ 非阻塞方式打开和操作文件$/;"	c
O_RDONLY	kernel/src/fs/file.rs	/^        const O_RDONLY = 00;      \/\/ 只读方式$/;"	c
O_RDWR	kernel/src/fs/file.rs	/^        const O_RDWR = 02;        \/\/ 读写方式$/;"	c
O_TRUNC	kernel/src/fs/file.rs	/^        const O_TRUNC = 01000;    \/\/ 若文件已存在且是写操作，则长度截为 0$/;"	c
O_WRONLY	kernel/src/fs/file.rs	/^        const O_WRONLY = 01;      \/\/ 只写方式$/;"	c
Off	kernel/src/kernel/mod.rs	/^pub type Off = usize;$/;"	T
Ord for VMAPtrCmp	kernel/src/mm/mm_type.rs	/^impl Ord for VMAPtrCmp {$/;"	i
PAGE_SHIFT	kernel/src/mm/memory.rs	/^pub const PAGE_SHIFT : usize = 12;$/;"	c
PAGE_SIZE	kernel/src/mm/memory.rs	/^pub const PAGE_SIZE : usize = 1 << 12;$/;"	c
PART_FS_EXTENDED	kernel/src/fs/mod.rs	/^pub const PART_FS_EXTENDED : u32 = 5;$/;"	c
PATH_MAX	kernel/src/fs/mount.rs	/^const PATH_MAX : usize = 4096;$/;"	c
PCB	kernel/src/kernel/process.rs	/^pub type PCB = ProcessControlBlock;$/;"	T
PF_R	kernel/src/kernel/elf64.rs	/^const PF_R : u32 = 0x4; \/\/ 可读$/;"	c
PF_W	kernel/src/kernel/elf64.rs	/^const PF_W : u32 = 0x2; \/\/ 可写$/;"	c
PF_X	kernel/src/kernel/elf64.rs	/^const PF_X : u32 = 0x1; \/\/ 可执行$/;"	c
PHYADDR_START	kernel/src/mm/memory.rs	/^const PHYADDR_START : *mut c_void = 0x100000 as *mut c_void;$/;"	c
PIC_EOI	kernel/src/kernel/interrupt.rs	/^const PIC_EOI : u8 =  0x20;    \/\/ 通知中断控制器中断结束$/;"	c
PIC_M_CTRL	kernel/src/kernel/interrupt.rs	/^const PIC_M_CTRL : u16 = 0x20; \/\/ 主片的控制端口$/;"	c
PIC_M_DATA	kernel/src/kernel/interrupt.rs	/^const PIC_M_DATA : u16 =  0x21; \/\/ 主片的数据端口$/;"	c
PIC_S_CTRL	kernel/src/kernel/interrupt.rs	/^const PIC_S_CTRL : u16 =  0xa0; \/\/ 从片的控制端口$/;"	c
PIC_S_DATA	kernel/src/kernel/interrupt.rs	/^const PIC_S_DATA : u16 =  0xa1; \/\/ 从片的数据端口$/;"	c
PIT_CHAN0_REG	kernel/src/kernel/clock.rs	/^const PIT_CHAN0_REG : u16 = 0x40;$/;"	c
PIT_CHAN2_REG	kernel/src/kernel/clock.rs	/^const PIT_CHAN2_REG : u16 = 0x42;$/;"	c
PIT_CTRL_REG	kernel/src/kernel/clock.rs	/^const PIT_CTRL_REG : u16 = 0x43;$/;"	c
PRESENT	kernel/src/mm/mm_type.rs	/^        const PRESENT = 0x1; \/\/ When set, the page fault was caused by a page-protection violation. When not set, it was caused by a non-present page.$/;"	c
PROCESS_ID_SEQ	kernel/src/kernel/process.rs	/^static mut PROCESS_ID_SEQ : Pid = 0;$/;"	c
PROCESS_NAME_LEN	kernel/src/kernel/process.rs	/^pub const PROCESS_NAME_LEN : usize = 256;$/;"	c
PROTECTION_KEY	kernel/src/mm/mm_type.rs	/^        const PROTECTION_KEY = 0x20; \/\/ When set, the page fault was caused by a protection-key violation. The PKRU register (for user-mode accesses) or PKRS MSR (for supervisor-mode accesses) specifies the protection key rights.$/;"	c
PROT_EXEC	kernel/src/mm/mm_type.rs	/^        const PROT_EXEC = 0x00000004;$/;"	c
PROT_KERNEL	kernel/src/mm/mm_type.rs	/^        const PROT_KERNEL = 0x40;$/;"	c
PROT_NONE	kernel/src/mm/mm_type.rs	/^        const PROT_NONE = 0x00000000;$/;"	c
PROT_READ	kernel/src/mm/mm_type.rs	/^        const PROT_READ = 0x00000001;	\/* currently active flags *\/$/;"	c
PROT_SHARED	kernel/src/mm/mm_type.rs	/^        const PROT_SHARED = 0x00000008;$/;"	c
PROT_WRITE	kernel/src/mm/mm_type.rs	/^        const PROT_WRITE = 0x00000002;$/;"	c
PT_DYNAMIC	kernel/src/kernel/elf64.rs	/^const PT_DYNAMIC : u32 = 2; \/\/ 动态加载信息$/;"	c
PT_HIPROC	kernel/src/kernel/elf64.rs	/^const PT_HIPROC : u32 = 0x7fffffff;$/;"	c
PT_INTERP	kernel/src/kernel/elf64.rs	/^const PT_INTERP : u32 = 3;  \/\/ 动态加载器名称$/;"	c
PT_LOAD	kernel/src/kernel/elf64.rs	/^const PT_LOAD : u32 = 1;    \/\/ 可加载程序段$/;"	c
PT_LOPROC	kernel/src/kernel/elf64.rs	/^const PT_LOPROC : u32 = 0x70000000;$/;"	c
PT_NOTE	kernel/src/kernel/elf64.rs	/^const PT_NOTE : u32 = 4;    \/\/ 一些辅助信息$/;"	c
PT_NULL	kernel/src/kernel/elf64.rs	/^const PT_NULL : u32 = 0;    \/\/ 未使用$/;"	c
PT_PHDR	kernel/src/kernel/elf64.rs	/^const PT_PHDR : u32 = 6;    \/\/ 程序头表$/;"	c
PT_SHLIB	kernel/src/kernel/elf64.rs	/^const PT_SHLIB : u32 = 5;   \/\/ 保留$/;"	c
Page	kernel/src/mm/page.rs	/^impl Page {$/;"	i
Page	kernel/src/mm/page.rs	/^pub struct Page$/;"	s
PageFaultErrorCode	kernel/src/mm/mm_type.rs	/^    pub struct PageFaultErrorCode : u64$/;"	s
Pageflags	kernel/src/mm/page.rs	/^    pub struct Pageflags : u32$/;"	s
PartEntry	kernel/src/fs/ext4.rs	/^pub struct PartEntry$/;"	s
PartialEq for VMAPtrCmp	kernel/src/mm/mm_type.rs	/^impl PartialEq for VMAPtrCmp {$/;"	i
PartialEq for VMAreaStruct	kernel/src/mm/mm_type.rs	/^impl PartialEq for VMAreaStruct$/;"	i
PartialOrd for VMAPtrCmp	kernel/src/mm/mm_type.rs	/^impl PartialOrd for VMAPtrCmp {$/;"	i
PartialOrd for VMAreaStruct	kernel/src/mm/mm_type.rs	/^impl PartialOrd for VMAreaStruct$/;"	i
PartitionType	kernel/src/fs/ntfs.rs	/^    pub struct PartitionType : u8$/;"	s
Path	kernel/src/fs/path.rs	/^impl Path$/;"	i
Path	kernel/src/fs/path.rs	/^pub struct Path$/;"	s
PdEntry	kernel/src/mm/memory.rs	/^type PdEntry = Pml4Entry;$/;"	T
Pdpt	kernel/src/mm/memory.rs	/^pub type Pdpt = Pml4;$/;"	T
PdptEntry	kernel/src/mm/memory.rs	/^type PdptEntry = Pml4Entry;$/;"	T
Pdt	kernel/src/mm/memory.rs	/^pub type Pdt = Pml4;$/;"	T
PdtEntry	kernel/src/mm/memory.rs	/^type PdtEntry = Pml4Entry;$/;"	T
PgActive	kernel/src/mm/page.rs	/^        const PgActive = 1 << 6;$/;"	c
PgArch1	kernel/src/mm/page.rs	/^        const PgArch1 = 1 << 9;$/;"	c
PgChecked	kernel/src/mm/page.rs	/^        const PgChecked = 1 << 8;$/;"	c
PgCompoundLock	kernel/src/mm/page.rs	/^        const PgCompoundLock = 1 << 24;$/;"	c
PgDirty	kernel/src/mm/page.rs	/^        const PgDirty = 1 << 4;$/;"	c
PgError	kernel/src/mm/page.rs	/^        const PgError = 1 << 1;$/;"	c
PgFsCache	kernel/src/mm/page.rs	/^        const PgFsCache = 1 << 12;$/;"	c
PgHead	kernel/src/mm/page.rs	/^        const PgHead = 1 << 14;                \/* A head page *\/$/;"	c
PgHwpoison	kernel/src/mm/page.rs	/^        const PgHwpoison = 1 << 23;            \/* hardware poisoned page. Don't touch *\/$/;"	c
PgLocked	kernel/src/mm/page.rs	/^        const PgLocked = 1 << 0;              \/* Page is locked. Don't touch. *\/$/;"	c
PgLru	kernel/src/mm/page.rs	/^        const PgLru = 1 << 5;$/;"	c
PgMappedtodisk	kernel/src/mm/page.rs	/^        const PgMappedtodisk = 1 << 17;        \/* Has blocks allocated on-disk *\/$/;"	c
PgMlocked	kernel/src/mm/page.rs	/^        const PgMlocked = 1 << 21;             \/* Page is vma mlocked *\/$/;"	c
PgOwnerPriv1	kernel/src/mm/page.rs	/^        const PgOwnerPriv1 = 1 << 8;      \/* Owner use. If pagecache, fs may use*\/$/;"	c
PgPinned	kernel/src/mm/page.rs	/^        const PgPinned = 1 << 8;$/;"	c
PgPrivate	kernel/src/mm/page.rs	/^        const PgPrivate = 1 << 11;             \/* If pagecache, has fs-private data *\/$/;"	c
PgPrivate2	kernel/src/mm/page.rs	/^        const PgPrivate2 = 1 << 12;           \/* If pagecache, has fs aux data *\/$/;"	c
PgReclaim	kernel/src/mm/page.rs	/^        const PgReclaim = 1 << 18;             \/* To be reclaimed asap *\/$/;"	c
PgReferenced	kernel/src/mm/page.rs	/^        const PgReferenced = 1 << 2;$/;"	c
PgReserved	kernel/src/mm/page.rs	/^        const PgReserved = 1 << 10;$/;"	c
PgSavePinned	kernel/src/mm/page.rs	/^        const PgSavePinned = 1 << 4;$/;"	c
PgSlab	kernel/src/mm/page.rs	/^        const PgSlab = 1 << 7;$/;"	c
PgSlobFree	kernel/src/mm/page.rs	/^        const PgSlobFree = 1 << 11;$/;"	c
PgSwapbacked	kernel/src/mm/page.rs	/^        const PgSwapbacked = 1 << 19;          \/* Page is backed by RAM\/swap *\/$/;"	c
PgSwapcache	kernel/src/mm/page.rs	/^        const PgSwapcache = 1 << 16;           \/* Swap page: swp_entry_t in private *\/$/;"	c
PgTail	kernel/src/mm/page.rs	/^        const PgTail = 1 << 15;                \/* A tail page *\/$/;"	c
PgUncached	kernel/src/mm/page.rs	/^        const PgUncached = 1 << 22;            \/* Page has been mapped as uncached *\/$/;"	c
PgUnevictable	kernel/src/mm/page.rs	/^        const PgUnevictable = 1 << 20;         \/* Page is "unevictable"  *\/$/;"	c
PgUptodate	kernel/src/mm/page.rs	/^        const PgUptodate = 1 << 3;$/;"	c
PgWriteback	kernel/src/mm/page.rs	/^        const PgWriteback = 1 << 13;           \/* Page is under writeback *\/$/;"	c
Pid	kernel/src/kernel/process.rs	/^pub type Pid = i32;$/;"	T
Pml4	kernel/src/mm/memory.rs	/^pub struct Pml4$/;"	s
Pml4Entry	kernel/src/mm/memory.rs	/^    pub struct Pml4Entry(u64);$/;"	s
PointerT	kernel/src/kernel/global.rs	/^pub struct PointerT$/;"	s
PointerT	kernel/src/kernel/interrupt.rs	/^pub struct PointerT$/;"	s
Priority	kernel/src/kernel/process.rs	/^pub type Priority = u8;$/;"	T
ProcessControlBlock	kernel/src/kernel/process.rs	/^impl ProcessControlBlock {$/;"	i
ProcessControlBlock	kernel/src/kernel/process.rs	/^pub struct ProcessControlBlock$/;"	s
PruneFunc	kernel/src/fs/dcache.rs	/^pub type PruneFunc = fn(&mut DEntry) -> i64;$/;"	T
Pt	kernel/src/mm/memory.rs	/^struct Pt$/;"	s
PtEntry	kernel/src/mm/memory.rs	/^    struct PtEntry(u64);$/;"	s
PtRegs	kernel/src/kernel/process.rs	/^pub struct PtRegs$/;"	s
QStr	kernel/src/fs/dcache.rs	/^pub struct QStr$/;"	s
RAMDISKS	kernel/src/kernel/ramdisk.rs	/^static mut RAMDISKS : Vec<RamDisk> = Vec::new();$/;"	c
READ	kernel/src/fs/file.rs	/^        const READ = Self::IROTH.bits();$/;"	c
READONLY	kernel/src/fs/mount.rs	/^        const READONLY = bit!(6);$/;"	c
REFERENED	kernel/src/fs/dcache.rs	/^        const REFERENED = 0x40;$/;"	c
RELATIME	kernel/src/fs/mount.rs	/^        const RELATIME = bit!(5);$/;"	c
RENAME_DOES_D_MOVE	kernel/src/fs/fs.rs	/^        const RENAME_DOES_D_MOVE = 32768;$/;"	c
REQUIRE_DEV	kernel/src/fs/fs.rs	/^        const REQUIRE_DEV = bit!(0);$/;"	c
RESERVED_WRITE	kernel/src/mm/mm_type.rs	/^        const RESERVED_WRITE = 0x8; \/\/ When set, the page fault was caused while CPL = 3. This does not necessarily mean that the page fault was a privilege violation.$/;"	c
RFLAGS	Makefile	/^RFLAGS:=$(strip ${RFLAGS})$/;"	m
ROOTFS_FS_TYPE	kernel/src/fs/file.rs	/^pub static mut ROOTFS_FS_TYPE : FileSystemType = FileSystemType$/;"	c
ROOT_DEV	kernel/src/fs/super_block.rs	/^pub static ROOT_DEV : DevT = mkdev(259, 0);$/;"	c
ROOT_MOUNTFLAGS	kernel/src/fs/mount.rs	/^pub const ROOT_MOUNTFLAGS : u32 = SB_SILENT;$/;"	c
ROW_SIZE	kernel/src/kernel/console.rs	/^const ROW_SIZE : u64 = (WIDTH * 2) as u64;$/;"	c
RO_COMPAT_BIGALLOC	kernel/src/fs/ext4.rs	/^const RO_COMPAT_BIGALLOC : i32 = 0x200;$/;"	c
RO_COMPAT_BTREE_DIR	kernel/src/fs/ext4.rs	/^const RO_COMPAT_BTREE_DIR : i32 = 0x4;$/;"	c
RO_COMPAT_DIR_NLINK	kernel/src/fs/ext4.rs	/^const RO_COMPAT_DIR_NLINK : i32 = 0x20;$/;"	c
RO_COMPAT_EXTRA_ISIZE	kernel/src/fs/ext4.rs	/^const RO_COMPAT_EXTRA_ISIZE : i32 = 0x40;$/;"	c
RO_COMPAT_GDT_CSUM	kernel/src/fs/ext4.rs	/^const RO_COMPAT_GDT_CSUM : i32 = 0x10;$/;"	c
RO_COMPAT_HAS_SNAPSHOT	kernel/src/fs/ext4.rs	/^const RO_COMPAT_HAS_SNAPSHOT : i32 = 0x80;$/;"	c
RO_COMPAT_HUGE_FILE	kernel/src/fs/ext4.rs	/^const RO_COMPAT_HUGE_FILE : i32 = 0x8;$/;"	c
RO_COMPAT_LARGE_FILE	kernel/src/fs/ext4.rs	/^const RO_COMPAT_LARGE_FILE : i32 = 0x2;$/;"	c
RO_COMPAT_METADATA_CSUM	kernel/src/fs/ext4.rs	/^const RO_COMPAT_METADATA_CSUM : i32 = 0x400;$/;"	c
RO_COMPAT_ORPHAN_PRESENT	kernel/src/fs/ext4.rs	/^const RO_COMPAT_ORPHAN_PRESENT : i32 = 0x10000;$/;"	c
RO_COMPAT_PROJECT	kernel/src/fs/ext4.rs	/^const RO_COMPAT_PROJECT : i32 = 0x2000;$/;"	c
RO_COMPAT_QUOTA	kernel/src/fs/ext4.rs	/^const RO_COMPAT_QUOTA : i32 = 0x100;$/;"	c
RO_COMPAT_READONLY	kernel/src/fs/ext4.rs	/^const RO_COMPAT_READONLY : i32 = 0x1000;$/;"	c
RO_COMPAT_REPLICA	kernel/src/fs/ext4.rs	/^const RO_COMPAT_REPLICA : i32 = 0x800;$/;"	c
RO_COMPAT_SPARSE_SUPER	kernel/src/fs/ext4.rs	/^const RO_COMPAT_SPARSE_SUPER : i32 = 0x1;$/;"	c
RO_COMPAT_VERITY	kernel/src/fs/ext4.rs	/^const RO_COMPAT_VERITY : i32 = 0x8000;$/;"	c
RUNNING_PROCESS	kernel/src/kernel/sched.rs	/^pub static mut RUNNING_PROCESS : Vec<*mut process::ProcessControlBlock> = Vec::new();$/;"	c
RWLock	kernel/src/kernel/semaphore.rs	/^impl RWLock {$/;"	i
RWLock	kernel/src/kernel/semaphore.rs	/^pub struct RWLock$/;"	s
RX86_64Relative_Relocate	kernel/src/kernel/relocation.rs	/^unsafe fn RX86_64Relative_Relocate(elf64_rela : *mut Elf64Rela, base_addr : u64)$/;"	f
R_X86_64_16	kernel/src/kernel/relocation.rs	/^const R_X86_64_16 : u32 = 12;$/;"	c
R_X86_64_32	kernel/src/kernel/relocation.rs	/^const R_X86_64_32 : u32 = 10;$/;"	c
R_X86_64_32S	kernel/src/kernel/relocation.rs	/^const R_X86_64_32S : u32 = 11;$/;"	c
R_X86_64_64	kernel/src/kernel/relocation.rs	/^const R_X86_64_64 : u32 = 1;$/;"	c
R_X86_64_8	kernel/src/kernel/relocation.rs	/^const R_X86_64_8 : u32 = 14;$/;"	c
R_X86_64_COPY	kernel/src/kernel/relocation.rs	/^const R_X86_64_COPY : u32 = 5;$/;"	c
R_X86_64_DTPMOD64	kernel/src/kernel/relocation.rs	/^const R_X86_64_DTPMOD64 : u32 = 16;$/;"	c
R_X86_64_DTPOFF32	kernel/src/kernel/relocation.rs	/^const R_X86_64_DTPOFF32 : u32 = 21;$/;"	c
R_X86_64_DTPOFF64	kernel/src/kernel/relocation.rs	/^const R_X86_64_DTPOFF64 : u32 = 17;$/;"	c
R_X86_64_GLOB_DAT	kernel/src/kernel/relocation.rs	/^const R_X86_64_GLOB_DAT : u32 = 6;$/;"	c
R_X86_64_GOT32	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOT32 : u32 = 3;$/;"	c
R_X86_64_GOT64	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOT64 : u32 = 27;$/;"	c
R_X86_64_GOTOFF64	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTOFF64 : u32 = 25;$/;"	c
R_X86_64_GOTPC32	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTPC32 : u32 = 26;$/;"	c
R_X86_64_GOTPC32_TLSDESC	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTPC32_TLSDESC : u32 = 34;$/;"	c
R_X86_64_GOTPC64	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTPC64 : u32 = 29;$/;"	c
R_X86_64_GOTPCREL	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTPCREL : u32 = 9;$/;"	c
R_X86_64_GOTPCREL64	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTPCREL64 : u32 = 28;$/;"	c
R_X86_64_GOTPCRELX	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTPCRELX : u32 = 41;$/;"	c
R_X86_64_GOTPLT64	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTPLT64 : u32 = 30;$/;"	c
R_X86_64_GOTTPOFF	kernel/src/kernel/relocation.rs	/^const R_X86_64_GOTTPOFF : u32 = 22;$/;"	c
R_X86_64_IRELATIVE	kernel/src/kernel/relocation.rs	/^const R_X86_64_IRELATIVE : u32 = 37;$/;"	c
R_X86_64_JUMP_SLOT	kernel/src/kernel/relocation.rs	/^const R_X86_64_JUMP_SLOT : u32 = 7;$/;"	c
R_X86_64_NONE	kernel/src/kernel/relocation.rs	/^const R_X86_64_NONE : u32 = 0;$/;"	c
R_X86_64_PC16	kernel/src/kernel/relocation.rs	/^const R_X86_64_PC16 : u32 = 13;$/;"	c
R_X86_64_PC32	kernel/src/kernel/relocation.rs	/^const R_X86_64_PC32 : u32 = 2;$/;"	c
R_X86_64_PC64	kernel/src/kernel/relocation.rs	/^const R_X86_64_PC64 : u32 = 24;$/;"	c
R_X86_64_PC8	kernel/src/kernel/relocation.rs	/^const R_X86_64_PC8 : u32 = 15;$/;"	c
R_X86_64_PLT32	kernel/src/kernel/relocation.rs	/^const R_X86_64_PLT32 : u32 = 4;$/;"	c
R_X86_64_PLTOFF64	kernel/src/kernel/relocation.rs	/^const R_X86_64_PLTOFF64 : u32 = 31;$/;"	c
R_X86_64_RELATIVE	kernel/src/kernel/relocation.rs	/^const R_X86_64_RELATIVE : u32 = 8;$/;"	c
R_X86_64_REX_GOTPCRELX	kernel/src/kernel/relocation.rs	/^const R_X86_64_REX_GOTPCRELX : u32 = 42;$/;"	c
R_X86_64_SIZE32	kernel/src/kernel/relocation.rs	/^const R_X86_64_SIZE32 : u32 = 32;$/;"	c
R_X86_64_SIZE64	kernel/src/kernel/relocation.rs	/^const R_X86_64_SIZE64 : u32 = 33;$/;"	c
R_X86_64_TLSDESC	kernel/src/kernel/relocation.rs	/^const R_X86_64_TLSDESC : u32 = 36;$/;"	c
R_X86_64_TLSDESC_CALL	kernel/src/kernel/relocation.rs	/^const R_X86_64_TLSDESC_CALL : u32 = 35;$/;"	c
R_X86_64_TLSGD	kernel/src/kernel/relocation.rs	/^const R_X86_64_TLSGD : u32 = 19;$/;"	c
R_X86_64_TLSLD	kernel/src/kernel/relocation.rs	/^const R_X86_64_TLSLD : u32 = 20;$/;"	c
R_X86_64_TPOFF32	kernel/src/kernel/relocation.rs	/^const R_X86_64_TPOFF32 : u32 = 23;$/;"	c
R_X86_64_TPOFF64	kernel/src/kernel/relocation.rs	/^const R_X86_64_TPOFF64 : u32 = 18;$/;"	c
RamDisk	kernel/src/kernel/ramdisk.rs	/^impl RamDisk {$/;"	i
RamDisk	kernel/src/kernel/ramdisk.rs	/^struct RamDisk$/;"	s
RealTimeClock	kernel/src/kernel/rtc.rs	/^impl RealTimeClock$/;"	i
RealTimeClock	kernel/src/kernel/rtc.rs	/^pub struct RealTimeClock$/;"	s
ReleaseFunc	kernel/src/fs/dcache.rs	/^pub type ReleaseFunc = fn(&mut DEntry) -> i64;$/;"	T
RequestDescriptor	kernel/src/kernel/device.rs	/^impl RequestDescriptor {$/;"	i
RequestDescriptor	kernel/src/kernel/device.rs	/^pub struct RequestDescriptor$/;"	s
RequestPriorityFn	kernel/src/kernel/device.rs	/^pub type RequestPriorityFn = fn(LHS : &RequestDescriptor, RHS : &RequestDescriptor) -> bool;$/;"	T
RevalidateFunc	kernel/src/fs/dcache.rs	/^pub type RevalidateFunc = fn(*mut DEntry, u32) -> i64;$/;"	T
SB_ACTIVE	kernel/src/fs/fs.rs	/^pub const SB_ACTIVE : u32 = bit!(30);$/;"	c
SB_BORN	kernel/src/fs/fs.rs	/^pub const SB_BORN : u32 = bit!(29);$/;"	c
SB_DEAD	kernel/src/fs/fs.rs	/^pub const SB_DEAD : u32 = bit!(21);$/;"	c
SB_DIRSYNC	kernel/src/fs/fs.rs	/^pub const SB_DIRSYNC : u32 = bit!(7);	\/* Directory modifications are synchronous *\/$/;"	c
SB_DYING	kernel/src/fs/fs.rs	/^pub const SB_DYING : u32 = bit!(24);$/;"	c
SB_FORCE	kernel/src/fs/fs.rs	/^pub const SB_FORCE : u32 = bit!(27);$/;"	c
SB_INLINECRYPT	kernel/src/fs/fs.rs	/^pub const SB_INLINECRYPT : u32 = bit!(17);	\/* Use blk-crypto for encrypted files *\/$/;"	c
SB_I_CGROUPWB	kernel/src/fs/fs.rs	/^pub const SB_I_CGROUPWB : u32 = 0x00000001;\/* cgroup-aware writeback enabled *\/$/;"	c
SB_I_EVM_UNSUPPORTED	kernel/src/fs/fs.rs	/^pub const SB_I_EVM_UNSUPPORTED : u32 = 0x00000080;$/;"	c
SB_I_IMA_UNVERIFIABLE_SIGNATURE	kernel/src/fs/fs.rs	/^pub const SB_I_IMA_UNVERIFIABLE_SIGNATURE : u32 = 0x00000020;$/;"	c
SB_I_NODEV	kernel/src/fs/fs.rs	/^pub const SB_I_NODEV : u32 = 0x00000004;\/* Ignore devices on this fs *\/$/;"	c
SB_I_NOEXEC	kernel/src/fs/fs.rs	/^pub const SB_I_NOEXEC : u32 = 0x00000002;\/* Ignore executables on this fs *\/$/;"	c
SB_I_NOUMASK	kernel/src/fs/fs.rs	/^pub const SB_I_NOUMASK : u32 = 0x00001000; \/* VFS does not apply umask *\/$/;"	c
SB_I_PERSB_BDI	kernel/src/fs/fs.rs	/^pub const SB_I_PERSB_BDI : u32 = 0x00000200; \/* has a per-sb bdi *\/$/;"	c
SB_I_RETIRED	kernel/src/fs/fs.rs	/^pub const SB_I_RETIRED : u32 = 0x00000800; \/* superblock shouldn't be reused *\/$/;"	c
SB_I_SKIP_SYNC	kernel/src/fs/fs.rs	/^pub const SB_I_SKIP_SYNC : u32 = 0x00000100; \/* Skip superblock at global sync *\/$/;"	c
SB_I_STABLE_WRITES	kernel/src/fs/fs.rs	/^pub const SB_I_STABLE_WRITES : u32 = 0x00000008;\/* don't modify blks until WB is done *\/$/;"	c
SB_I_TS_EXPIRY_WARNED	kernel/src/fs/fs.rs	/^pub const SB_I_TS_EXPIRY_WARNED : u32 = 0x00000400; \/* warned about timestamp range expiry *\/$/;"	c
SB_I_UNTRUSTED_MOUNTER	kernel/src/fs/fs.rs	/^pub const SB_I_UNTRUSTED_MOUNTER : u32 = 0x00000040;$/;"	c
SB_I_USERNS_VISIBLE	kernel/src/fs/fs.rs	/^pub const SB_I_USERNS_VISIBLE : u32 = 0x00000010; \/* fstype already mounted *\/$/;"	c
SB_I_VERSION	kernel/src/fs/fs.rs	/^pub const SB_I_VERSION : u32 = bit!(23);	\/* Update inode I_version field *\/$/;"	c
SB_KERNMOUNT	kernel/src/fs/fs.rs	/^pub const SB_KERNMOUNT : u32 = bit!(22);	\/* this is a kern_mount call *\/$/;"	c
SB_LAZYTIME	kernel/src/fs/fs.rs	/^pub const SB_LAZYTIME : u32 = bit!(25);	\/* Update the on-disk [acm]times lazily *\/$/;"	c
SB_MANDLOCK	kernel/src/fs/fs.rs	/^pub const SB_MANDLOCK : u32 = bit!(6);	\/* Allow mandatory locks on an FS *\/$/;"	c
SB_NOATIME	kernel/src/fs/fs.rs	/^pub const SB_NOATIME : u32 = bit!(10);	\/* Do not update access times. *\/$/;"	c
SB_NODEV	kernel/src/fs/fs.rs	/^pub const SB_NODEV : u32 = bit!(2);	\/* Disallow access to device special files *\/$/;"	c
SB_NODIRATIME	kernel/src/fs/fs.rs	/^pub const SB_NODIRATIME : u32 = bit!(11);	\/* Do not update directory access times *\/$/;"	c
SB_NOEXEC	kernel/src/fs/fs.rs	/^pub const SB_NOEXEC : u32 = bit!(3);	\/* Disallow program execution *\/$/;"	c
SB_NOSEC	kernel/src/fs/fs.rs	/^pub const SB_NOSEC : u32 = bit!(28);$/;"	c
SB_NOSUID	kernel/src/fs/fs.rs	/^pub const SB_NOSUID : u32 = bit!(1);	\/* Ignore suid and sgid bits *\/$/;"	c
SB_NOUSER	kernel/src/fs/fs.rs	/^pub const SB_NOUSER : u32 = bit!(31);$/;"	c
SB_POSIXACL	kernel/src/fs/fs.rs	/^pub const SB_POSIXACL : u32 = bit!(16);	\/* Supports POSIX ACLs *\/$/;"	c
SB_RDONLY	kernel/src/fs/fs.rs	/^pub const SB_RDONLY : u32 = bit!(0);	\/* Mount read-only *\/$/;"	c
SB_SILENT	kernel/src/fs/fs.rs	/^pub const SB_SILENT : u32 = bit!(15);$/;"	c
SB_SUBMOUNT	kernel/src/fs/fs.rs	/^pub const SB_SUBMOUNT : u32 = bit!(26);$/;"	c
SB_SYNCHRONOUS	kernel/src/fs/fs.rs	/^pub const SB_SYNCHRONOUS : u32 = bit!(4);	\/* Writes are synced at once *\/$/;"	c
SCAN_CODE_SET2	kernel/src/kernel/keyboard.rs	/^static mut SCAN_CODE_SET2 : ScanCodeSet2 = ScanCodeSet2::new();$/;"	c
SCR_SIZE	kernel/src/kernel/console.rs	/^const SCR_SIZE : u64 = ROW_SIZE * HEIGHT as u64;$/;"	c
SECTOR_SIZE	kernel/src/kernel/io.rs	/^pub const SECTOR_SIZE : u64 = 512;$/;"	c
SECTOR_SIZE	kernel/src/kernel/ramdisk.rs	/^const SECTOR_SIZE : usize = 0x1000;$/;"	c
SHADOW_STACK	kernel/src/mm/mm_type.rs	/^        const SHADOW_STACK = 0x40; \/\/ When set, the page fault was caused by a shadow stack access.$/;"	c
SHARED	kernel/src/fs/mount.rs	/^        const SHARED = 0x1000;$/;"	c
SHARED_MASK	kernel/src/fs/mount.rs	/^        const SHARED_MASK = MntFlags::UNBINDABLE.bits();$/;"	c
SHF_ALLOC	kernel/src/kernel/relocation.rs	/^const SHF_ALLOC : u64 = 0b10;$/;"	c
SHMEM_DIR_INODEOPERATIONS	kernel/src/mm/shmem.rs	/^pub static SHMEM_DIR_INODEOPERATIONS : InodeOperations = InodeOperations$/;"	c
SHMEM_DIR_OPERATION	kernel/src/mm/shmem.rs	/^pub static SHMEM_DIR_OPERATION : DEntryOperations = DEntryOperations$/;"	c
SHMEM_FS_CONTEXT_OPS	kernel/src/mm/shmem.rs	/^static mut SHMEM_FS_CONTEXT_OPS : FsContextOperations = FsContextOperations$/;"	c
SHMEM_FS_TYPE	kernel/src/mm/shmem.rs	/^static mut SHMEM_FS_TYPE : FileSystemType = FileSystemType$/;"	c
SHMEM_INODE_CACHEP	kernel/src/mm/shmem.rs	/^static mut SHMEM_INODE_CACHEP : *mut KmemCache = null_mut();$/;"	c
SHMEM_INODE_OPERATIONS	kernel/src/mm/shmem.rs	/^pub static SHMEM_INODE_OPERATIONS : InodeOperations = InodeOperations$/;"	c
SHMEM_SPECIAL_INODE_OPERATIONS	kernel/src/mm/shmem.rs	/^pub static SHMEM_SPECIAL_INODE_OPERATIONS : InodeOperations = InodeOperations$/;"	c
SHRINKABLE	kernel/src/fs/mount.rs	/^        const SHRINKABLE = bit!(8);$/;"	c
SHRINK_LIST	kernel/src/fs/dcache.rs	/^        const SHRINK_LIST = 0x400;$/;"	c
SIMPLE_DENTRY_OPERATIONS	kernel/src/fs/libfs.rs	/^pub static mut SIMPLE_DENTRY_OPERATIONS : DEntryOperations = DEntryOperations$/;"	c
SIZE_INDEX	kernel/src/mm/slub.rs	/^const SIZE_INDEX : [u8; 24] = [$/;"	c
SLAB_CACHES	kernel/src/mm/slub.rs	/^pub static mut SLAB_CACHES : *mut KmemCache = null_mut();$/;"	c
SOFTWARE_GUARD_EXTENSIONS	kernel/src/mm/mm_type.rs	/^        const SOFTWARE_GUARD_EXTENSIONS = 0x4000; \/\/When set, the fault was due to an SGX violation. The fault is unrelated to ordinary paging.$/;"	c
SPEAKER_REG	kernel/src/kernel/clock.rs	/^const SPEAKER_REG : u16 = 0x61;$/;"	c
SSE4_2_ENABLE	kernel/src/crypto/crc32c.rs	/^static mut SSE4_2_ENABLE : bool = false;$/;"	c
STARTUP_TIME	kernel/src/kernel/time.rs	/^static mut STARTUP_TIME : Time = Time::new();$/;"	c
START_STR	kernel/src/kernel/console.rs	/^static START_STR : &str = "$/;"	c
STDERR	kernel/src/fs/file.rs	/^pub const STDERR : u32 = 2;$/;"	c
STDIN	kernel/src/fs/file.rs	/^pub const STDIN : u32 = 0;$/;"	c
STDOUT	kernel/src/fs/file.rs	/^pub const STDOUT : u32 = 1;$/;"	c
STYLE	kernel/src/kernel/console.rs	/^const STYLE : u8 = 0x7;$/;"	c
SUPER_NR	kernel/src/fs/super_block.rs	/^const SUPER_NR: usize = 0x10;$/;"	c
SUPPORT_1GB_PAGE	kernel/src/kernel/cpu.rs	/^pub const SUPPORT_1GB_PAGE : u32 = 1 << 26;$/;"	c
SYNC_UMOUNT	kernel/src/fs/mount.rs	/^        const SYNC_UMOUNT = 0x2000000;$/;"	c
SYSCTL_MOUNT_MAX	kernel/src/fs/mount.rs	/^static mut SYSCTL_MOUNT_MAX : u32 = u32::MAX;$/;"	c
SYSTEM_CALL_TABLE	kernel/src/kernel/syscall.rs	/^pub static mut SYSTEM_CALL_TABLE : [SyscallrFn; 256] = [unsafe { core::mem::transmute::<*mut(), SyscallrFn>(default_syscall as *mut()) }; 256];$/;"	c
SYS_CALL_RESERVED_SIZE	kernel/src/kernel/interrupt.rs	/^const SYS_CALL_RESERVED_SIZE : usize = 0x30;$/;"	c
ScanCodeSet2	kernel/src/kernel/keyboard.rs	/^impl<'a> ScanCodeSet2<'a>$/;"	i
ScanCodeSet2	kernel/src/kernel/keyboard.rs	/^struct ScanCodeSet2<'a>$/;"	s
ScanCodeType	kernel/src/kernel/keyboard.rs	/^enum ScanCodeType$/;"	g
SegmentType	kernel/src/kernel/relocation.rs	/^enum SegmentType$/;"	g
Semaphore	kernel/src/kernel/semaphore.rs	/^pub type Semaphore = SpinLock;$/;"	T
ShmemInodeInfo	kernel/src/mm/shmem.rs	/^pub struct ShmemInodeInfo$/;"	s
ShmemOptions	kernel/src/mm/shmem.rs	/^impl ShmemOptions$/;"	i
ShmemOptions	kernel/src/mm/shmem.rs	/^struct ShmemOptions$/;"	s
ShmemQuotaLimits	kernel/src/mm/shmem.rs	/^impl ShmemQuotaLimits {$/;"	i
ShmemQuotaLimits	kernel/src/mm/shmem.rs	/^pub struct ShmemQuotaLimits {$/;"	s
ShmemSbInfo	kernel/src/mm/shmem.rs	/^impl ShmemSbInfo$/;"	i
ShmemSbInfo	kernel/src/mm/shmem.rs	/^pub struct ShmemSbInfo$/;"	s
Slab	kernel/src/mm/slub.rs	/^impl Slab {$/;"	i
Slab	kernel/src/mm/slub.rs	/^pub struct Slab$/;"	s
SpinLock	kernel/src/kernel/semaphore.rs	/^impl SpinLock$/;"	i
SpinLock	kernel/src/kernel/semaphore.rs	/^pub struct  SpinLock$/;"	s
Stdout	lib/src/print.rs	/^impl Stdout$/;"	i
Stdout	lib/src/print.rs	/^struct Stdout;$/;"	s
Sync for IdeCtrlT	kernel/src/kernel/io.rs	/^unsafe impl Sync for IdeCtrlT {$/;"	i
Sync for IdeDiskT	kernel/src/kernel/io.rs	/^unsafe impl Sync for IdeDiskT {$/;"	i
SyscallrFn	kernel/src/kernel/syscall.rs	/^pub type SyscallrFn = extern "C" fn();$/;"	T
TASK_TABLE	kernel/src/kernel/process.rs	/^static mut TASK_TABLE : [*mut PCB ;MAX_PROGRESS_NUM as usize] = [null_mut(); MAX_PROGRESS_NUM as usize];$/;"	c
TEST	kernel/src/kernel/execve.rs	/^    static TEST : &str = "test!!!\\0";$/;"	c
THREAD_SIZE	kernel/src/kernel/process.rs	/^const THREAD_SIZE : usize = 16 * 1024;$/;"	c
TM	kernel/src/kernel/time.rs	/^impl TM$/;"	i
TM	kernel/src/kernel/time.rs	/^pub struct TM$/;"	s
TSS	kernel/src/kernel/global.rs	/^pub type TSS = TaskStateSegment; $/;"	T
TSS_IDX	kernel/src/kernel/global.rs	/^pub const TSS_IDX : usize = 5;$/;"	c
TaskFrame	kernel/src/kernel/process.rs	/^struct TaskFrame$/;"	s
TaskStateSegment	kernel/src/kernel/global.rs	/^impl TaskStateSegment {$/;"	i
TaskStateSegment	kernel/src/kernel/global.rs	/^pub struct TaskStateSegment$/;"	s
Time	kernel/src/kernel/time.rs	/^impl Time$/;"	i
Time	kernel/src/kernel/time.rs	/^pub struct Time$/;"	s
UMOUNT	kernel/src/fs/mount.rs	/^        const UMOUNT = 0x8000000;$/;"	c
UMOUNT_NOFOLLOW	kernel/src/fs/fs.rs	/^pub const UMOUNT_NOFOLLOW : u32 = 0x00000008;\/* Don't follow symlink on umount *\/$/;"	c
UMOUNT_UNUSED	kernel/src/fs/fs.rs	/^pub const UMOUNT_UNUSED : u32 = 0x80000000;\/* Flag guaranteed to be unused *\/$/;"	c
UNBINDABLE	kernel/src/fs/mount.rs	/^        const UNBINDABLE = 0x2000;$/;"	c
UNDER	kernel/src/kernel/console.rs	/^const UNDER : u8 = 0x0f;$/;"	c
UNNAMED_DEV_IDA	kernel/src/fs/super_block.rs	/^static mut UNNAMED_DEV_IDA : Ida = Ida::new();$/;"	c
USER	kernel/src/mm/mm_type.rs	/^        const USER = 0x4; \/\/ When set, the page fault was caused while CPL = 3. This does not necessarily mean that the page fault was a privilege violation.$/;"	c
USER	kernel/src/mm/page.rs	/^        const USER = Self::__WAIT.bits() | Self::__IO.bits() | Self::__FS.bits() | Self::__HARDWALL.bits();$/;"	c
USERNS_MOUNT	kernel/src/fs/fs.rs	/^        const USERNS_MOUNT = bit!(3);$/;"	c
USER_CODE_IDX	kernel/src/kernel/global.rs	/^pub const USER_CODE_IDX : usize = 4;$/;"	c
USER_DATA_IDX	kernel/src/kernel/global.rs	/^pub const USER_DATA_IDX : usize = 3;$/;"	c
USER_SETTABLE_MASK	kernel/src/fs/mount.rs	/^        const USER_SETTABLE_MASK = 0xff;$/;"	c
USER_STACK_BOTTOM	kernel/src/mm/memory.rs	/^pub const USER_STACK_BOTTOM : *mut c_void = (0x00007ffffffff000 - MAX_USER_STACK_SIZE) as *mut c_void;$/;"	c
USER_STACK_TOP	kernel/src/mm/memory.rs	/^pub const USER_STACK_TOP : *mut c_void = 0x00007ffffffff000 as *mut c_void;$/;"	c
Uid	kernel/src/kernel/process.rs	/^pub type Uid = u32;$/;"	T
UnreenterabkeSpinLock	kernel/src/kernel/semaphore.rs	/^impl UnreenterabkeSpinLock$/;"	i
UnreenterabkeSpinLock	kernel/src/kernel/semaphore.rs	/^pub struct  UnreenterabkeSpinLock$/;"	s
VFSMOUNT_HLIST	kernel/src/fs/mount.rs	/^static mut VFSMOUNT_HLIST : BTreeMap<*mut DEntry, *mut VFSMount> = BTreeMap::new();$/;"	c
VFSMount	kernel/src/fs/mount.rs	/^impl VFSMount$/;"	i
VFSMount	kernel/src/fs/mount.rs	/^pub struct VFSMount$/;"	s
VIRTADDR_START	kernel/src/mm/memory.rs	/^const VIRTADDR_START : usize = 0xffff800000000000;$/;"	c
VMAPtrCmp	kernel/src/mm/mm_type.rs	/^impl VMAPtrCmp {$/;"	i
VMAPtrCmp	kernel/src/mm/mm_type.rs	/^pub struct VMAPtrCmp$/;"	s
VMAreaStruct	kernel/src/mm/mm_type.rs	/^impl VMAreaStruct {$/;"	i
VMAreaStruct	kernel/src/mm/mm_type.rs	/^pub struct VMAreaStruct$/;"	s
VM_ACCOUNT	kernel/src/mm/mm_type.rs	/^        const VM_ACCOUNT = 0x00100000;	\/* Is a VM accounted object *\/$/;"	c
VM_ARCH_1	kernel/src/mm/mm_type.rs	/^        const VM_ARCH_1 = 0x01000000;	\/* Architecture-specific flag *\/$/;"	c
VM_DONTCOPY	kernel/src/mm/mm_type.rs	/^        const VM_DONTCOPY = 0x00020000;      \/* Do not copy this vma on fork *\/$/;"	c
VM_DONTDUMP	kernel/src/mm/mm_type.rs	/^        const VM_DONTDUMP = 0x04000000;	\/* Do not include in the core dump *\/$/;"	c
VM_DONTEXPAND	kernel/src/mm/mm_type.rs	/^        const VM_DONTEXPAND = 0x00040000;	\/* Cannot expand with mremap() *\/$/;"	c
VM_GROWSDOWN	kernel/src/mm/mm_type.rs	/^        const VM_GROWSDOWN = 0x00000100;	\/* general info on the segment *\/$/;"	c
VM_HUGEPAGE	kernel/src/mm/mm_type.rs	/^        const VM_HUGEPAGE = 0x20000000;	\/* MADV_HUGEPAGE marked this vma *\/$/;"	c
VM_HUGETLB	kernel/src/mm/mm_type.rs	/^        const VM_HUGETLB = 0x00400000;	\/* Huge TLB Page VM *\/$/;"	c
VM_IO	kernel/src/mm/mm_type.rs	/^        const VM_IO = 0x00004000;	\/* Memory mapped I\/O or similar *\/$/;"	c
VM_LOCKED	kernel/src/mm/mm_type.rs	/^        const VM_LOCKED = 0x00002000;$/;"	c
VM_LOCKONFAULT	kernel/src/mm/mm_type.rs	/^        const VM_LOCKONFAULT = 0x00080000;	\/* Lock the pages covered when they are faulted in *\/$/;"	c
VM_MAYEXEC	kernel/src/mm/mm_type.rs	/^        const VM_MAYEXEC = 0x00000040;$/;"	c
VM_MAYOVERLAY	kernel/src/mm/mm_type.rs	/^        const VM_MAYOVERLAY = 0x00000200;	\/* nommu: R\/O MAP_PRIVATE mapping that might overlay a file mapping *\/$/;"	c
VM_MAYREAD	kernel/src/mm/mm_type.rs	/^        const VM_MAYREAD = 0x00000010;	\/* limits for mprotect() etc *\/$/;"	c
VM_MAYSHARE	kernel/src/mm/mm_type.rs	/^        const VM_MAYSHARE = 0x00000080;$/;"	c
VM_MAYWRITE	kernel/src/mm/mm_type.rs	/^        const VM_MAYWRITE = 0x00000020;$/;"	c
VM_MERGEABLE	kernel/src/mm/mm_type.rs	/^        const VM_MERGEABLE = 0x80000000;	\/* KSM may merge identical pages *\/$/;"	c
VM_MIXEDMAP	kernel/src/mm/mm_type.rs	/^        const VM_MIXEDMAP = 0x10000000;	\/* Can contain "struct page" and pure PFN pages *\/$/;"	c
VM_NOHUGEPAGE	kernel/src/mm/mm_type.rs	/^        const VM_NOHUGEPAGE = 0x40000000;	\/* MADV_NOHUGEPAGE marked this vma *\/$/;"	c
VM_NORESERV	kernel/src/mm/shmem.rs	/^const VM_NORESERV : u32 = 0x00200000;$/;"	c
VM_NORESERVE	kernel/src/mm/mm_type.rs	/^        const VM_NORESERVE = 0x00200000;	\/* should the VM suppress accounting *\/$/;"	c
VM_PFNMAP	kernel/src/mm/mm_type.rs	/^        const VM_PFNMAP	= 0x00000400;	\/* Page-ranges managed without "struct page", just pure PFN *\/$/;"	c
VM_RAND_READ	kernel/src/mm/mm_type.rs	/^        const VM_RAND_READ = 0x00010000;	\/* App will not benefit from clustered reads *\/$/;"	c
VM_SEQ_READ	kernel/src/mm/mm_type.rs	/^        const VM_SEQ_READ = 0x00008000;	\/* App will access data sequentially *\/$/;"	c
VM_SYNC	kernel/src/mm/mm_type.rs	/^        const VM_SYNC = 0x00800000;	\/* Synchronous page faults *\/$/;"	c
VM_UFFD_MISSING	kernel/src/mm/mm_type.rs	/^        const VM_UFFD_MISSING = 0x00000200;	\/* missing pages tracking *\/$/;"	c
VM_UFFD_WP	kernel/src/mm/mm_type.rs	/^        const VM_UFFD_WP = 0x00001000;	\/* wrprotect pages tracking *\/$/;"	c
VM_WIPEONFORK	kernel/src/mm/mm_type.rs	/^        const VM_WIPEONFORK = 0x02000000;	\/* Wipe VMA contents in child. *\/$/;"	c
VT	kernel/src/kernel/console.rs	/^const VT : i8 = 0xb;$/;"	c
WAIT_MAP	kernel/src/kernel/process.rs	/^static mut WAIT_MAP : btree_map::BTreeMap<Priority, LinkedList<*mut PCB>> = btree_map::BTreeMap::new();$/;"	c
WIDTH	kernel/src/kernel/console.rs	/^const WIDTH : u16 = 80;$/;"	c
WRITE	kernel/src/fs/file.rs	/^        const WRITE = Self::IWOTH.bits();$/;"	c
WRITE	kernel/src/mm/mm_type.rs	/^        const WRITE = 0x2; \/\/ When set, the page fault was caused by a write access. When not set, it was caused by a read access.$/;"	c
WRITE_HOLD	kernel/src/fs/mount.rs	/^        const WRITE_HOLD = bit!(9);$/;"	c
YEAR	kernel/src/kernel/time.rs	/^const YEAR : u64 = 365 * DAY;$/;"	c
ZONES_MASK	kernel/src/mm/page.rs	/^pub const ZONES_MASK : u32 = 1 << ZONES_PGSHIFT - 1;$/;"	c
ZONES_PGSHIFT	kernel/src/mm/page.rs	/^pub const ZONES_PGSHIFT : u32 = ZONES_WIDTH;$/;"	c
ZONES_WIDTH	kernel/src/mm/page.rs	/^pub const ZONES_WIDTH : u32 = size_of::<Pageflags>() as u32 * 8 - NODES_WIDTH;$/;"	c
__ACCOUNT	kernel/src/mm/page.rs	/^        const __ACCOUNT = 0x80;$/;"	c
__ATOMIC	kernel/src/mm/page.rs	/^        const __ATOMIC = 0x200;$/;"	c
__COLD	kernel/src/mm/page.rs	/^        const __COLD = 0x100000;$/;"	c
__DIRECT_RECLAIM	kernel/src/mm/page.rs	/^        const __DIRECT_RECLAIM = 0x4000;$/;"	c
__DMA	kernel/src/mm/page.rs	/^        const __DMA = 0x01;$/;"	c
__DMA32	kernel/src/mm/page.rs	/^        const __DMA32 = 0x04;$/;"	c
__FS	kernel/src/mm/page.rs	/^        const __FS = 0x2000;$/;"	c
__HARDWALL	kernel/src/mm/page.rs	/^        const __HARDWALL = 0x20;$/;"	c
__HIGH	kernel/src/mm/page.rs	/^        const __HIGH = 0x100;$/;"	c
__HIGHMEM	kernel/src/mm/page.rs	/^        const __HIGHMEM =  0x02;$/;"	c
__IO	kernel/src/mm/page.rs	/^        const __IO = 0x1000;$/;"	c
__KSWAPD_RECLAIM	kernel/src/mm/page.rs	/^        const __KSWAPD_RECLAIM = 0x8000;$/;"	c
__MEMALLOC	kernel/src/mm/page.rs	/^        const __MEMALLOC = 0x400;$/;"	c
__MOVABLE	kernel/src/mm/page.rs	/^        const __MOVABLE = 0x08;$/;"	c
__NOFAIL	kernel/src/mm/page.rs	/^        const __NOFAIL = 0x40000;$/;"	c
__NOMEMALLOC	kernel/src/mm/page.rs	/^        const __NOMEMALLOC = 0x800;$/;"	c
__NORETRY	kernel/src/mm/page.rs	/^        const __NORETRY = 0x80000;$/;"	c
__NOTRACK	kernel/src/mm/page.rs	/^        const __NOTRACK = 0x800000;$/;"	c
__NOWARN	kernel/src/mm/page.rs	/^        const __NOWARN = 0x200000;$/;"	c
__NR_EXIT	kernel/src/kernel/syscall_defs.rs	/^pub const __NR_EXIT : usize = 60;$/;"	c
__NR_EXIT	lib/src/syscall_defs.rs	/^pub const __NR_EXIT : usize = 60;$/;"	c
__NR_FORK	kernel/src/kernel/syscall_defs.rs	/^pub const __NR_FORK : usize = 57;$/;"	c
__NR_FORK	lib/src/syscall_defs.rs	/^pub const __NR_FORK : usize = 57;$/;"	c
__NR_READ	kernel/src/kernel/syscall_defs.rs	/^pub const __NR_READ : usize = 0;$/;"	c
__NR_READ	lib/src/syscall_defs.rs	/^pub const __NR_READ : usize = 0;$/;"	c
__NR_SCHED_YIELD	kernel/src/kernel/syscall_defs.rs	/^pub const __NR_SCHED_YIELD : usize = 24;$/;"	c
__NR_SCHED_YIELD	lib/src/syscall_defs.rs	/^pub const __NR_SCHED_YIELD : usize = 24;$/;"	c
__NR_SYS_EXECVE	kernel/src/kernel/syscall_defs.rs	/^pub const __NR_SYS_EXECVE : usize = 59;$/;"	c
__NR_SYS_EXECVE	lib/src/syscall_defs.rs	/^pub const __NR_SYS_EXECVE : usize = 59;$/;"	c
__NR_WRITE	kernel/src/kernel/syscall_defs.rs	/^pub const __NR_WRITE : usize = 1;$/;"	c
__NR_WRITE	lib/src/syscall_defs.rs	/^pub const __NR_WRITE : usize = 1;$/;"	c
__OTHER_NODE	kernel/src/mm/page.rs	/^        const __OTHER_NODE = 0x100000;$/;"	c
__RECLAIM	kernel/src/mm/page.rs	/^        const __RECLAIM = 0x10000;$/;"	c
__RECLAIMABLE	kernel/src/mm/page.rs	/^        const __RECLAIMABLE = 0x10;$/;"	c
__REPEAT	kernel/src/mm/page.rs	/^        const __REPEAT = 0x20000;$/;"	c
__THISNODE	kernel/src/mm/page.rs	/^        const __THISNODE = 0x40;$/;"	c
__WAIT	kernel/src/mm/page.rs	/^        const __WAIT = 0x200000;$/;"	c
__ZERO	kernel/src/mm/page.rs	/^        const __ZERO = 0x400000;$/;"	c
__be32_to_cpu	kernel/src/crypto/mod.rs	/^macro_rules! __be32_to_cpu {$/;"	d
__constant_swap32	kernel/src/crypto/mod.rs	/^macro_rules! __constant_swap32 {$/;"	d
__cpu_to_be32	kernel/src/crypto/mod.rs	/^macro_rules! __cpu_to_be32 {$/;"	d
__cpu_to_le32	kernel/src/crypto/mod.rs	/^macro_rules! __cpu_to_le32 {$/;"	d
__cpuid	kernel/src/kernel/cpu.rs	/^pub fn __cpuid(selector : u32) -> CpuidResult$/;"	f
__do_mmap	kernel/src/mm/mmap.rs	/^pub fn __do_mmap(addr : *const c_void, length : usize, prot : MmapType, flags : MmapType, file_t : *mut File, offset : Off) -> *mut VMAreaStruct$/;"	f
__exit	proc_macro/src/lib.rs	/^mod __exit;$/;"	m
__exit	proc_macro/src/lib.rs	/^pub fn __exit(attr: TokenStream, item: TokenStream) -> TokenStream$/;"	f
__get_fs_type	kernel/src/fs/file.rs	/^    fn __get_fs_type(&mut self, name : &str) -> *mut *mut FileSystemType$/;"	f
__init	proc_macro/src/lib.rs	/^mod __init;$/;"	m
__init	proc_macro/src/lib.rs	/^pub fn __init(attr: TokenStream, item: TokenStream) -> TokenStream$/;"	f
__le32_to_cpu	kernel/src/crypto/mod.rs	/^macro_rules! __le32_to_cpu {$/;"	d
__lookup_constant	kernel/src/fs/fs_context.rs	/^fn __lookup_constant(mut tbl : *const ConstantTable, name : &str) -> *const ConstantTable$/;"	f
__print	lib/src/print.rs	/^pub fn __print(args : fmt::Arguments)$/;"	f
__shmem_get_inode	kernel/src/mm/shmem.rs	/^fn __shmem_get_inode(idmap : *mut MntIdmap, lp : *mut LogicalPart, dir : *mut Inode, mode : FileMode, dev : DevT, flags : FileFlag) -> *mut Inode$/;"	f
__syscall0	kernel/src/kernel/syscall_defs.rs	/^pub unsafe fn __syscall0(nr : usize) -> usize$/;"	f
__syscall0	lib/src/syscall_defs.rs	/^pub unsafe fn __syscall0(nr : usize) -> usize$/;"	f
__syscall1	kernel/src/kernel/syscall_defs.rs	/^pub unsafe fn __syscall1(nr : usize, arg1 : u64) -> usize$/;"	f
__syscall1	lib/src/syscall_defs.rs	/^pub unsafe fn __syscall1(nr : usize, arg1 : u64) -> usize$/;"	f
__syscall2	kernel/src/kernel/syscall_defs.rs	/^pub unsafe fn __syscall2(nr : usize, arg1 : u64, arg2 : u64) -> usize$/;"	f
__syscall2	lib/src/syscall_defs.rs	/^pub unsafe fn __syscall2(nr : usize, arg1 : u64, arg2 : u64) -> usize$/;"	f
__syscall3	kernel/src/kernel/syscall_defs.rs	/^pub unsafe fn __syscall3(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64) -> usize$/;"	f
__syscall3	lib/src/syscall_defs.rs	/^pub unsafe fn __syscall3(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64) -> usize$/;"	f
__syscall4	kernel/src/kernel/syscall_defs.rs	/^pub unsafe fn __syscall4(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64, arg4 : u64) -> usize$/;"	f
__syscall4	lib/src/syscall_defs.rs	/^pub unsafe fn __syscall4(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64, arg4 : u64) -> usize$/;"	f
__syscall5	kernel/src/kernel/syscall_defs.rs	/^pub unsafe fn __syscall5(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64, arg4 : u64, arg5 : u64) -> usize$/;"	f
__syscall5	lib/src/syscall_defs.rs	/^pub unsafe fn __syscall5(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64, arg4 : u64, arg5 : u64) -> usize$/;"	f
__syscall6	kernel/src/kernel/syscall_defs.rs	/^pub unsafe fn __syscall6(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64, arg4 : u64, arg5 : u64, arg6 : u64) -> usize$/;"	f
__syscall6	lib/src/syscall_defs.rs	/^pub unsafe fn __syscall6(nr : usize, arg1 : u64, arg2 : u64, arg3 : u64, arg4 : u64, arg5 : u64, arg6 : u64) -> usize$/;"	f
_print	kernel/src/kernel/console.rs	/^pub fn _print(args : fmt::Arguments)$/;"	f
_start	builtins/src/lang_items.rs	/^pub extern "C" fn _start(_argc : isize, _argv : *const *const u8) -> !$/;"	f
_start	kernel/src/kernel/entry.asm	/^_start:$/;"	l
_syscall_end	kernel/src/kernel/interrupt.asm	/^_syscall_end:$/;"	l
_syscall_end	kernel/src/kernel/process.rs	/^    pub fn _syscall_end();$/;"	f
_syscall_start	kernel/src/kernel/interrupt.asm	/^_syscall_start:$/;"	l
_syscall_start	kernel/src/kernel/syscall.rs	/^    fn _syscall_start();$/;"	f
acquire	kernel/src/kernel/semaphore.rs	/^    pub fn acquire(&mut self, cnt : i64)$/;"	f
add_mount	kernel/src/fs/mount.rs	/^    pub fn add_mount(&mut self, mnt : *mut Mount)$/;"	f
alloc	kernel/src/mm/memory.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	f
alloc	kernel/src/mm/slub.rs	/^    pub fn alloc(&mut self) -> *mut c_void$/;"	f
alloc_context	kernel/src/fs/fs_context.rs	/^    pub fn alloc_context(fs_type : *mut FileSystemType, refference : *mut DEntry, sb_flags : u32, sb_flags_mask : u32, purpose : FsContextPurpose) -> *mut Self$/;"	f
alloc_frame_temporary	kernel/src/mm/memory.rs	/^    pub fn alloc_frame_temporary(&mut self) -> *mut c_void$/;"	f
alloc_frames	kernel/src/mm/memory.rs	/^    pub fn alloc_frames(&mut self, page_num : usize) -> *mut c_void$/;"	f
alloc_from_buddy_system	kernel/src/mm/slub.rs	/^    fn alloc_from_buddy_system(&mut self, page_num : usize) -> *mut c_void$/;"	f
alloc_min	kernel/src/fs/ida.rs	/^    pub fn alloc_min(&mut self, min : i32) -> i32$/;"	f
alloc_node	kernel/src/mm/slub.rs	/^    fn alloc_node(&mut self, nid : usize) -> *mut c_void$/;"	f
alloc_range	kernel/src/fs/ida.rs	/^    pub fn alloc_range(&mut self, min : i32, max : i32) -> i32$/;"	f
alloc_single_from_new_slab	kernel/src/mm/slub.rs	/^    fn alloc_single_from_new_slab(&mut self, new_slab : *mut Slab) -> *mut c_void$/;"	f
alloc_zeroed	kernel/src/mm/memory.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	f
always_delete_dentry	kernel/src/fs/libfs.rs	/^pub fn always_delete_dentry(_dentry : &mut DEntry) -> i64$/;"	f
arch_check_prot_writable	kernel/src/mm/memory.rs	/^fn arch_check_prot_writable(prot : u64) ->bool$/;"	f
arch_copy_kernel_space	kernel/src/mm/memory.rs	/^pub fn arch_copy_kernel_space(dst : *mut c_void, src : *const c_void)$/;"	f
arch_copy_page_table	kernel/src/mm/memory.rs	/^pub fn arch_copy_page_table(dst : *mut c_void, src : *mut c_void, start : *mut c_void, end : *mut c_void, clone_flags : &CloneFlags)$/;"	f
arch_get_vm_page_prot	kernel/src/mm/mm_type.rs	/^    fn arch_get_vm_page_prot(prot : MmapType) -> u64$/;"	f
ards_buffer	kernel/src/boot/loader.asm	/^ards_buffer equ 0x7c00$/;"	d
ards_count	kernel/src/boot/loader.asm	/^ards_count:$/;"	l
at	kernel/src/kernel/bitmap.rs	/^    pub fn at(&mut self, idx : usize) -> bool$/;"	f
attach_recursive_mnt	kernel/src/fs/mount.rs	/^fn attach_recursive_mnt(source_mnt : *mut Mount, top_mnt : *mut Mount, mut dest_mp : *mut Mountpoint, flags : MntTreeFlag) -> Err$/;"	f
awake_process	kernel/src/kernel/process.rs	/^pub fn awake_process(pcb : *mut PCB)$/;"	f
bcd_to_bin	kernel/src/kernel/time.rs	/^    fn bcd_to_bin(bcd : u8) -> u8$/;"	f
bin_to_bcd	kernel/src/kernel/time.rs	/^    fn bin_to_bcd(bin : u8) -> u8$/;"	f
bit	kernel/src/kernel/bitops.rs	/^macro_rules! bit {$/;"	d
bitmap	kernel/src/kernel/mod.rs	/^pub mod bitmap;$/;"	m
bitops	kernel/src/kernel/mod.rs	/^pub mod bitops;$/;"	m
bochs_break	kernel/src/kernel/lang_items.rs	/^macro_rules! bochs_break {$/;"	d
booting	kernel/src/boot/boot.asm	/^booting:$/;"	l
bs	kernel/src/kernel/console.rs	/^    unsafe fn bs(&mut self)$/;"	f
buffer	kernel/src/kernel/mod.rs	/^pub mod buffer;$/;"	m
build_task_stack	kernel/src/kernel/process.rs	/^    pub fn build_task_stack(&mut self)$/;"	f
calculate_size	kernel/src/mm/slub.rs	/^    fn calculate_size(&mut self)$/;"	f
cant_mount	kernel/src/fs/dcache.rs	/^    pub fn cant_mount(&self) -> bool$/;"	f
ceil	kernel/src/kernel/math.rs	/^pub fn ceil(mut x : f64)$/;"	f
change_page_prot_by_prot_bit	kernel/src/mm/memory.rs	/^fn change_page_prot_by_prot_bit(vaddr : *const c_void, prot_bit : u64)$/;"	f
chech_elf_64	kernel/src/boot/loader.asm	/^chech_elf_64:$/;"	l
clamp	kernel/src/mm/mm_type.rs	/^    fn clamp(self, min: Self, max: Self) -> Self$/;"	f
clear_all	kernel/src/kernel/console.rs	/^    pub fn clear_all(&mut self)$/;"	f
clock	kernel/src/kernel/mod.rs	/^pub mod clock;$/;"	m
clock_handler	kernel/src/kernel/clock.rs	/^extern "C" fn clock_handler(vector : u64, pt_regs : PtRegs)$/;"	f
clock_init	kernel/src/kernel/clock.rs	/^pub fn clock_init()$/;"	f
cmos_read	kernel/src/kernel/rtc.rs	/^    pub fn cmos_read(addr : u8) -> u8$/;"	f
cmos_write	kernel/src/kernel/rtc.rs	/^    pub fn cmos_write(addr : u8, value : u8)$/;"	f
cmp	kernel/src/mm/mm_type.rs	/^    fn cmp(&self, other: &Self) -> core::cmp::Ordering {$/;"	f
code_selector	kernel/src/boot/loader.asm	/^code_selector equ (1 << 3)$/;"	d
commit_tree	kernel/src/fs/mount.rs	/^fn commit_tree(mnt : *mut Mount)$/;"	f
console	kernel/src/kernel/mod.rs	/^pub mod console;$/;"	m
console_init	kernel/src/kernel/console.rs	/^pub unsafe fn console_init()$/;"	f
constfspt_xenix_usr	kernel/src/fs/ntfs.rs	/^        const constfspt_xenix_usr = 0x03;$/;"	c
contain	kernel/src/mm/mm_type.rs	/^    pub fn contain(&mut self, addr : u64) -> *mut VMAreaStruct$/;"	f
container_of	kernel/src/kernel/mod.rs	/^macro_rules! container_of {$/;"	d
context_for_mount	kernel/src/fs/fs_context.rs	/^    pub fn context_for_mount(fs_type : *mut FileSystemType, sb_flags : u32) -> *mut Self$/;"	f
copy_mm	kernel/src/kernel/fork.rs	/^fn copy_mm(clone_flags : &CloneFlags, dst_pcb : *mut PCB) -> Err$/;"	f
copy_on_write	kernel/src/mm/memory.rs	/^fn copy_on_write(vaddr : *const c_void)$/;"	f
copy_page_table	kernel/src/mm/memory.rs	/^pub fn copy_page_table(src_pcb : *mut PCB, clone_flags : &CloneFlags) -> *mut c_void$/;"	f
copy_process	kernel/src/kernel/fork.rs	/^pub fn copy_process(pid : Pid, trace : u32, node : u32, args : &KernelCloneArgs) -> *mut PCB$/;"	f
count_mounts	kernel/src/fs/mount.rs	/^fn count_mounts(ns : *mut MntNamespace, mnt : *mut Mount) -> Err$/;"	f
cpu	kernel/src/kernel/mod.rs	/^pub mod cpu;$/;"	m
cpu_check_cpuid	kernel/src/kernel/cpu.rs	/^pub fn cpu_check_cpuid() -> bool$/;"	f
cr	kernel/src/kernel/console.rs	/^    unsafe fn cr(&mut self)$/;"	f
crc16	kernel/src/crypto/crc16.rs	/^pub fn crc16(mut crc : u16, mut buffer : *const c_void, mut len : usize) -> u16$/;"	f
crc16	kernel/src/crypto/mod.rs	/^pub mod crc16;$/;"	m
crc16_byte	kernel/src/crypto/crc16.rs	/^fn crc16_byte(crc : u16, byte : u8) -> u16$/;"	f
crc32_body	kernel/src/crypto/crc32c.rs	/^pub fn crc32_body(mut crc : u32, mut buf : *const u8, mut len : usize, table : &[[u32; 256]; 8]) -> u32$/;"	f
crc32c	kernel/src/crypto/mod.rs	/^pub mod crc32c;$/;"	m
crc32c_be_generic	kernel/src/crypto/crc32c.rs	/^fn crc32c_be_generic(mut crc : u32, buf : *const u8, len : usize, tab : &[[u32; 256]; 8]) -> u32$/;"	f
crc32c_le	kernel/src/crypto/crc32c.rs	/^pub fn crc32c_le(crc : u32, buf : *const c_void, len : usize) -> u32$/;"	f
crc32c_le_generic	kernel/src/crypto/crc32c.rs	/^pub fn crc32c_le_generic(mut crc : u32, buf : *const u8, bitlen : usize, tab : &[[u32; 256]; 8]) -> u32$/;"	f
crc32table	kernel/src/crypto/mod.rs	/^mod crc32table;$/;"	m
create	kernel/src/kernel/ramdisk.rs	/^    pub fn create(size : usize) -> DevT$/;"	f
create_cache	kernel/src/mm/slub.rs	/^    pub fn create_cache(name : *const str, size : u32, align : u32, ctor : *mut extern fn(*mut c_void), flags : page::Pageflags) -> KmemCache$/;"	f
create_kmem_caches	kernel/src/mm/memory.rs	/^    fn create_kmem_caches(vaddr : *const c_void)$/;"	f
create_new_mem_area	kernel/src/mm/mm_type.rs	/^    pub fn create_new_mem_area(&mut self, start : u64, end : u64) -> *mut VMAreaStruct$/;"	f
create_new_process	kernel/src/kernel/process.rs	/^    pub fn create_new_process(func_addr : u64, prio : Priority) -> *mut PCB$/;"	f
create_request	kernel/src/kernel/device.rs	/^fn create_request(buffer : *mut c_void, count : usize, dev : u32, offset : usize) -> *mut RequestDescriptor$/;"	f
create_task_control_block	kernel/src/kernel/process.rs	/^    pub fn create_task_control_block() -> *mut ProcessControlBlock$/;"	f
crypto	kernel/src/lib.rs	/^pub mod crypto;$/;"	m
data_selector	kernel/src/boot/loader.asm	/^data_selector equ (2 << 3)$/;"	d
db	kernel/src/boot/boot.asm	/^db 0x55, 0xaa$/;"	l
dcache	kernel/src/fs/mod.rs	/^pub mod dcache;$/;"	m
deactive_logic_part	kernel/src/fs/file.rs	/^    pub fn deactive_logic_part(&mut self, sb : *mut LogicalPart)$/;"	f
dealloc	kernel/src/mm/memory.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {$/;"	f
default	kernel/src/kernel/semaphore.rs	/^    fn default() -> Self {$/;"	f
default_handler	kernel/src/kernel/interrupt.rs	/^fn default_handler(vector : u32)$/;"	f
default_max_blocks	kernel/src/mm/shmem.rs	/^    fn default_max_blocks() -> usize$/;"	f
default_max_inodes	kernel/src/mm/shmem.rs	/^    fn default_max_inodes() -> usize$/;"	f
default_syscall	kernel/src/kernel/syscall.rs	/^pub unsafe fn default_syscall()$/;"	f
del	kernel/src/kernel/console.rs	/^    unsafe fn del(&mut self)$/;"	f
descriptor_init	kernel/src/kernel/global.rs	/^fn descriptor_init(desc : &mut DescriptorT, base : u64, limit : u32, segment : bool, granularity : bool, big : bool, long_mode : bool, present : bool, dpl : u8, type_t : u8)$/;"	f
descriptor_init	kernel/src/kernel/interrupt.rs	/^    fn descriptor_init(&mut self, offset : u64, selector : u16, type_t : u8, dpl : u8, present : bool)$/;"	f
destory	kernel/src/fs/fs.rs	/^    pub fn destory(&mut self)$/;"	f
detect_memory	kernel/src/boot/loader.asm	/^detect_memory:$/;"	l
detecting	kernel/src/boot/loader.asm	/^detecting:$/;"	l
dev	kernel/src/fs/mod.rs	/^pub mod dev;$/;"	m
dev_init	kernel/src/fs/dev.rs	/^pub fn dev_init()$/;"	f
device	kernel/src/kernel/mod.rs	/^pub mod device;$/;"	m
device_install	kernel/src/kernel/device.rs	/^pub fn device_install(dev_no : DevT, ptr : *mut c_void, name : &CStr, parent : DevT, flags : u32, device_type : FileMode) -> DevT$/;"	f
device_ioctl	kernel/src/kernel/device.rs	/^pub fn device_ioctl(dev_t : DevT, cmd : i64, args : *mut c_void, flags : u32) -> i64$/;"	f
device_request	kernel/src/kernel/device.rs	/^pub fn device_request(mut dev : DevT, buffer : *mut c_void, count : usize, idx : Idx, _flags : u32,_req_typee : DevReqType) -> i64$/;"	f
devmkfs	kernel/src/fs/ext4.rs	/^pub fn devmkfs(dev : DevT, mut icount : usize)$/;"	f
dget	kernel/src/fs/dcache.rs	/^    pub fn dget(&mut self) -> *mut Self$/;"	f
direct_to_usermode	kernel/src/kernel/process.rs	/^unsafe fn direct_to_usermode(pcb : *mut ProcessControlBlock)$/;"	f
disk_read	kernel/src/fs/file.rs	/^pub fn disk_read(dev : DevT, idx : Idx, blocks : usize) -> *mut Buffer$/;"	f
dispose	kernel/src/fs/file.rs	/^    pub fn dispose(&self)$/;"	f
dispose	kernel/src/kernel/buffer.rs	/^    pub fn dispose(&mut self)$/;"	f
dispose	kernel/src/mm/mm_type.rs	/^    pub fn dispose(mm_ptr : *mut MMStruct)$/;"	f
distory_task_control_block	kernel/src/kernel/process.rs	/^    pub fn distory_task_control_block(pcb_ptr : *mut ProcessControlBlock)$/;"	f
do_add_mount	kernel/src/fs/mount.rs	/^fn do_add_mount(newmount : *mut Mount, mp : *mut Mountpoint, path : Path, mnt_flags : MntFlags ) -> Err$/;"	f
do_execve	kernel/src/kernel/execve.rs	/^unsafe fn do_execve(file_name : *const c_char, argv : *mut *mut c_char, envp : *mut *mut c_char) -> i64$/;"	f
do_exit	kernel/src/kernel/process.rs	/^fn do_exit(error_code : i64)$/;"	f
do_lock_mount	kernel/src/fs/mount.rs	/^fn do_lock_mount(mut path : Path, beneath : bool) -> *mut Mountpoint$/;"	f
do_mkdir	kernel/src/fs/file.rs	/^    pub fn do_mkdir(idmap : *mut MntIdmap, dir : *mut Inode, dentry : *mut DEntry, mode : FileMode) -> Err$/;"	f
do_mknodat	kernel/src/fs/file.rs	/^    pub fn do_mknodat(idmap : *mut MntIdmap, dir : *mut Inode, dentry : *mut DEntry, mode : FileMode, dev : DevT) -> Err$/;"	f
do_mount	kernel/src/fs/mount.rs	/^pub fn do_mount(dev_name : Arc<String>, dir_name : Arc<String>, fstype : Arc<String>, flags : u32, data_page : *const c_void) -> Err$/;"	f
do_mount_root	kernel/src/fs/mount.rs	/^pub fn do_mount_root(name : *const c_char, fs : *const c_char, flags : u32, data : *const c_void) -> Err$/;"	f
do_move_mount	kernel/src/fs/mount.rs	/^fn do_move_mount(old_path : Path, new_path : Path, beneath : bool) -> Err$/;"	f
do_move_mount_old	kernel/src/fs/mount.rs	/^fn do_move_mount_old(path : Path, old_name : Arc<String>) -> Err$/;"	f
do_new_mount	kernel/src/fs/mount.rs	/^fn do_new_mount(path : Path, fstype : Arc<String>, sb_flags : u32, mnt_flags : MntFlags, name : Arc<String>, data : *const c_void) -> Err$/;"	f
do_new_mount_fc	kernel/src/fs/mount.rs	/^fn do_new_mount_fc(fc : *mut FsContext, mountpoint : Path, mut mnt_flags : MntFlags) -> Err$/;"	f
do_request	kernel/src/kernel/device.rs	/^fn do_request(request : &mut RequestDescriptor) -> i64$/;"	f
dput	kernel/src/fs/dcache.rs	/^    pub fn dput(&mut self)$/;"	f
dup_pcb	kernel/src/kernel/fork.rs	/^unsafe fn dup_pcb(src_pcb : *mut PCB, node : u32) -> *mut PCB$/;"	f
dw	kernel/src/boot/loader.asm	/^dw 0x55aa$/;"	l
early_disk_read	kernel/src/fs/file.rs	/^pub fn early_disk_read(dev : DevT, idx : Idx, blocks : usize) -> *mut Buffer$/;"	f
elf64	kernel/src/kernel/mod.rs	/^pub mod elf64;$/;"	m
elf64_validate	kernel/src/kernel/elf64.rs	/^fn elf64_validate(ehdr : *const Elf64Ehdr) -> bool$/;"	f
elf_header_pos	kernel/src/boot/loader.asm	/^elf_header_pos equ 0x20000$/;"	d
elf_magic	kernel/src/boot/loader.asm	/^elf_magic:$/;"	l
empty	kernel/src/fs/dcache.rs	/^    pub fn empty() -> Self$/;"	f
empty	kernel/src/fs/dcache.rs	/^    pub fn empty(parent : *mut DEntry) -> *mut DEntry$/;"	f
empty	kernel/src/fs/file.rs	/^    pub fn empty() -> Self$/;"	f
empty	kernel/src/fs/path.rs	/^    pub fn empty() -> Self$/;"	f
empty	kernel/src/mm/shmem.rs	/^    pub fn empty() -> Self$/;"	f
empty_req_list	kernel/src/kernel/device.rs	/^    fn empty_req_list(&self) -> bool$/;"	f
eq	kernel/src/mm/mm_type.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	f
erase_request	kernel/src/kernel/device.rs	/^    fn erase_request(&mut self, request : *mut RequestDescriptor)$/;"	f
erase_screen	kernel/src/kernel/console.rs	/^    pub unsafe fn erase_screen(&mut self, mut start_pos : *mut u16, cnt : u32)$/;"	f
err_ptr	kernel/src/kernel/errno_base.rs	/^pub fn err_ptr<T>(err : Err) -> *mut T$/;"	f
errno_base	kernel/src/kernel/mod.rs	/^pub mod errno_base;$/;"	m
error	kernel/src/boot/boot.asm	/^error:$/;"	l
error	kernel/src/boot/loader.asm	/^error:$/;"	l
exception_handler	kernel/src/kernel/interrupt.rs	/^unsafe fn exception_handler(vector : u32, regs : process::PtRegs)$/;"	f
execve	kernel/src/kernel/mod.rs	/^pub mod execve;$/;"	m
execve	lib/src/unistd.rs	/^pub fn execve(filename : *const c_char, argv : *const *const c_char, envp : *const *const c_char) -> i64$/;"	f
exit	lib/src/unistd.rs	/^pub fn exit(error_code : i64) -> !$/;"	f
exit	proc_macro/src/__exit.rs	/^pub fn exit(_attr: TokenStream, _func: TokenStream) -> TokenStream$/;"	f
ext2_or_ext3_get_logic_block_idx	kernel/src/fs/ext4.rs	/^pub fn ext2_or_ext3_get_logic_block_idx(logical_part : &mut LogicalPart, inode : *mut Inode, idx : Idx, create : bool) -> Idx$/;"	f
ext4	kernel/src/fs/mod.rs	/^pub mod ext4;$/;"	m
ext4_fill_super	kernel/src/fs/ext4.rs	/^pub fn ext4_fill_super(lp : *mut LogicalPart, fs_context : *mut FsContext) -> Err$/;"	f
ext4_find_entry	kernel/src/fs/ext4.rs	/^pub fn ext4_find_entry(dir : &mut Inode, name : *const c_char, next : &mut *mut c_char, result_entry_ptr : &mut DirEntry)$/;"	f
ext4_flax_group_init	kernel/src/fs/ext4.rs	/^pub fn ext4_flax_group_init(dev : DevT, sb : *mut Ext4SuperBlock)$/;"	f
ext4_get_data_block_group_idx	kernel/src/fs/ext4.rs	/^fn ext4_get_data_block_group_idx(logical_part : &LogicalPart, idx : Idx) -> usize$/;"	f
ext4_get_group_desc_no	kernel/src/fs/ext4.rs	/^fn ext4_get_group_desc_no(sbi : *const Ext4SuperBlockInfo, nr : Idx) -> Idx$/;"	f
ext4_get_inode_logical_block	kernel/src/fs/ext4.rs	/^pub fn ext4_get_inode_logical_block(logical_part : &LogicalPart, mut nr : Idx) -> Idx$/;"	f
ext4_get_logic_block_idx	kernel/src/fs/ext4.rs	/^pub fn ext4_get_logic_block_idx(logical_part : &mut LogicalPart, inode : *mut Inode, idx : Idx, create : bool) -> Idx$/;"	f
ext4_get_tree	kernel/src/fs/ext4.rs	/^pub fn ext4_get_tree(fc : *mut FsContext) -> Err$/;"	f
ext4_group_desc_csum	kernel/src/fs/ext4.rs	/^pub fn ext4_group_desc_csum(logic_part : &LogicalPart, block_group : u32, gdp : *const Ext4GroupDesc) -> u16$/;"	f
ext4_has_metadata_csum	kernel/src/fs/ext4.rs	/^fn ext4_has_metadata_csum(super_block : *const Ext4SuperBlock) -> bool$/;"	f
ext4_iget	kernel/src/fs/ext4.rs	/^pub fn ext4_iget(logical_part : &mut LogicalPart, inode : *mut Inode, logic_block_size : i32, nr : Idx)$/;"	f
ext4_init_fs	kernel/src/fs/ext4.rs	/^pub fn ext4_init_fs()$/;"	f
ext4_init_fs_context	kernel/src/fs/ext4.rs	/^pub fn ext4_init_fs_context(fs_context : *mut FsContext) -> Err$/;"	f
ext4_inode_block_read	kernel/src/fs/ext4.rs	/^pub fn ext4_inode_block_read(logical_part : *mut LogicalPart, inode : *mut Inode, mut block_idx : Idx) -> *mut Buffer$/;"	f
ext4_inode_per_blocks	kernel/src/fs/ext4.rs	/^pub fn ext4_inode_per_blocks(sbi : *const Ext4SuperBlockInfo) -> Idx$/;"	f
ext4_inode_read	kernel/src/fs/ext4.rs	/^pub fn ext4_inode_read(logical_part : &mut LogicalPart, inode : *mut Inode, mut dst : *mut c_void, len : usize, offset : usize) -> i64$/;"	f
ext4_kill_sb	kernel/src/fs/ext4.rs	/^pub fn ext4_kill_sb(sb : *mut LogicalPart)$/;"	f
ext4_load_all_entries	kernel/src/fs/ext4.rs	/^pub fn ext4_load_all_entries(dentry : &mut DEntry, inode : &mut Inode)$/;"	f
ext4_load_block_bitmap	kernel/src/fs/ext4.rs	/^pub fn ext4_load_block_bitmap(gbi : &mut Ext4GroupDescInfo)$/;"	f
ext4_load_group_desc	kernel/src/fs/ext4.rs	/^fn ext4_load_group_desc(dev : DevT, idx : Idx) -> *mut Ext4GroupDesc$/;"	f
ext4_load_inode_bitmaps	kernel/src/fs/ext4.rs	/^pub fn ext4_load_inode_bitmaps(gbi : &mut Ext4GroupDescInfo)$/;"	f
ext4_load_super	kernel/src/fs/ext4.rs	/^fn ext4_load_super(sb : &mut LogicalPart) -> Err$/;"	f
ext4_match_name	kernel/src/fs/ext4.rs	/^pub fn ext4_match_name(name : *const c_char, entry_name : *const c_char, next : &mut *mut c_char) -> bool$/;"	f
ext4_permission_check	kernel/src/fs/ext4.rs	/^pub fn ext4_permission_check(inode : *mut Inode, perm : FSPermission) -> bool$/;"	f
f	Makefile	/^	dd if=(BUILD)\/boot\/boot.asm.bin of=usb.bin bs=446 count=1 conv=notrunc$/;"	m
f	Makefile	/^	sudo dd if=usb.bin of=dev\/sdb bs=512 count=1 conv=notrunc$/;"	m
f	utils/image.mk	/^	dd if=$(BUILD)\/boot\/boot.asm.bin of=$@ bs=512 count=1 conv=notrunc$/;"	m
f	utils/image.mk	/^	dd if=$(BUILD)\/boot\/loader.asm.bin of=$@ bs=512 count=4 seek=2 conv=notrunc$/;"	m
f	utils/image.mk	/^	dd if=$(BUILD)\/x86_64-unknown-none\/debug\/lee_os of=$@ bs=512 seek=10 conv=notrunc$/;"	m
fc_mount	kernel/src/fs/mount.rs	/^pub fn fc_mount(fc : *mut FsContext) -> *mut VFSMount$/;"	f
ffs	kernel/src/kernel/bitops.rs	/^pub fn ffs(mut x : i32) -> u32$/;"	f
ffs64	kernel/src/kernel/bitops.rs	/^pub fn ffs64(mut x : i64) -> u64$/;"	f
file	kernel/src/fs/mod.rs	/^pub mod file;$/;"	m
fill_super	kernel/src/mm/shmem.rs	/^    pub fn fill_super(lp : *mut LogicalPart, fc : *mut FsContext) -> Err$/;"	f
find_entry	kernel/src/fs/inode.rs	/^    pub fn find_entry(&mut self, name : *const c_char, next : &mut *mut c_char, result_entry : &mut DirEntry)$/;"	f
find_mount	kernel/src/fs/mount.rs	/^pub fn find_mount(dentry : *mut DEntry) -> *mut Mountpoint$/;"	f
flag	kernel/src/kernel/entry.asm	/^flag:$/;"	l
fls	kernel/src/kernel/bitops.rs	/^pub fn fls(mut x : u32) -> u32$/;"	f
fls64	kernel/src/kernel/bitops.rs	/^pub fn fls64(mut x : u64) -> u64$/;"	f
flush_tlb	kernel/src/kernel/cpu.rs	/^pub unsafe fn flush_tlb(vaddr : *const c_void)$/;"	f
fmt	kernel/src/kernel/global.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	kernel/src/kernel/interrupt.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt	kernel/src/mm/memory.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
fmt::Display for DescriptorT	kernel/src/kernel/global.rs	/^impl fmt::Display for DescriptorT$/;"	i
fmt::Display for DescriptorT	kernel/src/kernel/interrupt.rs	/^impl fmt::Display for DescriptorT {$/;"	i
fmt::Display for E820Map	kernel/src/mm/memory.rs	/^impl fmt::Display for E820Map$/;"	i
fmt::Write for Console	kernel/src/kernel/console.rs	/^impl fmt::Write for Console {$/;"	i
fmt::Write for Stdout	lib/src/print.rs	/^impl fmt::Write for Stdout$/;"	i
fn	kernel/src/fs/dcache.rs	/^    pub const fn is_dir(&self) -> bool$/;"	c
fn	kernel/src/fs/dcache.rs	/^    pub const fn is_symlink(&self) -> bool$/;"	c
fn	kernel/src/fs/file.rs	/^    const fn new() -> Self$/;"	c
fn	kernel/src/fs/fs_context.rs	/^    pub const fn empty() -> Self$/;"	c
fn	kernel/src/fs/ida.rs	/^    pub const fn new() -> Self$/;"	c
fn	kernel/src/fs/inode.rs	/^    pub const fn is_blk(&self) -> bool$/;"	c
fn	kernel/src/fs/inode.rs	/^    pub const fn is_chr(&self) -> bool$/;"	c
fn	kernel/src/fs/inode.rs	/^    pub const fn is_dir(&self) -> bool$/;"	c
fn	kernel/src/fs/inode.rs	/^    pub const fn is_fifo(&self) -> bool$/;"	c
fn	kernel/src/fs/inode.rs	/^    pub const fn is_file(&self) -> bool$/;"	c
fn	kernel/src/fs/inode.rs	/^    pub const fn is_sock(&self) -> bool$/;"	c
fn	kernel/src/fs/inode.rs	/^    pub const fn is_symlink(&self) -> bool$/;"	c
fn	kernel/src/fs/mount.rs	/^    pub const fn is_anon_ns(&self) -> bool$/;"	c
fn	kernel/src/kernel/bitmap.rs	/^    pub const fn null_bitmap() -> BitMap$/;"	c
fn	kernel/src/kernel/console.rs	/^    pub const fn new() -> Console$/;"	c
fn	kernel/src/kernel/device.rs	/^const fn default_request_priority(lhs : &RequestDescriptor, rhs : &RequestDescriptor) -> bool$/;"	c
fn	kernel/src/kernel/device.rs	/^pub const fn mkdev(major : DevT, minor : DevT) -> DevT$/;"	c
fn	kernel/src/kernel/global.rs	/^    const fn new() -> TaskStateSegment$/;"	c
fn	kernel/src/kernel/io.rs	/^    const fn empty() -> Self$/;"	c
fn	kernel/src/kernel/io.rs	/^    pub const fn empty() -> Self$/;"	c
fn	kernel/src/kernel/io.rs	/^    pub const fn new() -> IdeCtrlT$/;"	c
fn	kernel/src/kernel/keyboard.rs	/^    const fn new() -> Self$/;"	c
fn	kernel/src/kernel/keyboard.rs	/^    pub const fn new() -> Self$/;"	c
fn	kernel/src/kernel/list.rs	/^    pub const fn empty() -> ListHead$/;"	c
fn	kernel/src/kernel/semaphore.rs	/^    pub const fn new(start_cnt : i64) -> Self$/;"	c
fn	kernel/src/kernel/semaphore.rs	/^    pub const fn new(start_cnt : i64) -> SpinLock$/;"	c
fn	kernel/src/kernel/time.rs	/^    pub const fn new() -> Self$/;"	c
fn	kernel/src/mm/memory.rs	/^    const fn new() -> MemoryPool$/;"	c
fn	kernel/src/mm/memory.rs	/^    const fn new() -> MemorySpan$/;"	c
fn	kernel/src/mm/slub.rs	/^    pub const fn new(name : &'static str, size : u32) -> KMallocInfoStruct$/;"	c
fork	kernel/src/kernel/mod.rs	/^pub mod fork;$/;"	m
fork	lib/src/unistd.rs	/^pub fn fork() -> i32$/;"	f
fpu	kernel/src/kernel/mod.rs	/^pub mod fpu;$/;"	m
fpu_check	kernel/src/kernel/fpu.rs	/^fn fpu_check() -> bool$/;"	f
fpu_enable	kernel/src/kernel/fpu.rs	/^fn fpu_enable()$/;"	f
fpu_handler	kernel/src/kernel/fpu.rs	/^fn fpu_handler(vector : u64)$/;"	f
fpu_init	kernel/src/kernel/fpu.rs	/^pub fn fpu_init()$/;"	f
free_vma	kernel/src/mm/mm_type.rs	/^    fn free_vma(vma_ptr : *const VMAreaStruct)$/;"	f
fs	kernel/src/fs/mod.rs	/^pub mod fs;$/;"	m
fs	kernel/src/lib.rs	/^pub mod fs;$/;"	m
fs_context	kernel/src/fs/mod.rs	/^pub mod fs_context;$/;"	m
fsp_fat32	kernel/src/fs/ntfs.rs	/^        const fsp_fat32 = 0x01;$/;"	c
fspt_bbt	kernel/src/fs/ntfs.rs	/^        const fspt_bbt = 0xff;$/;"	c
fspt_extended	kernel/src/fs/ntfs.rs	/^        const fspt_extended = 0x05;$/;"	c
fspt_fat16	kernel/src/fs/ntfs.rs	/^        const fspt_fat16 = 0x06;$/;"	c
fspt_fat16_32m	kernel/src/fs/ntfs.rs	/^        const fspt_fat16_32m = 0x04;$/;"	c
fspt_hpfs_ntfs	kernel/src/fs/ntfs.rs	/^        const fspt_hpfs_ntfs = 0x07;$/;"	c
fspt_lan_step	kernel/src/fs/ntfs.rs	/^        const fspt_lan_step = 0xfe;$/;"	c
fspt_null_type	kernel/src/fs/ntfs.rs	/^        const fspt_null_type = 0x00;$/;"	c
fspt_xenit__root	kernel/src/fs/ntfs.rs	/^        const fspt_xenit__root = 0x02;$/;"	c
gdt_base	kernel/src/boot/loader.asm	/^gdt_base:$/;"	l
gdt_base64	kernel/src/boot/loader.asm	/^gdt_base64:$/;"	l
gdt_code	kernel/src/boot/loader.asm	/^gdt_code:$/;"	l
gdt_code64	kernel/src/boot/loader.asm	/^gdt_code64: dq	0x0020980000000000$/;"	d
gdt_data	kernel/src/boot/loader.asm	/^gdt_data:$/;"	l
gdt_data64	kernel/src/boot/loader.asm	/^gdt_data64: dq 0x0000920000000000$/;"	d
gdt_end	kernel/src/boot/loader.asm	/^gdt_end:$/;"	l
gdt_end64	kernel/src/boot/loader.asm	/^gdt_end64:$/;"	l
gdt_init	kernel/src/kernel/global.rs	/^pub fn gdt_init()$/;"	f
gdt_ptr	kernel/src/boot/loader.asm	/^gdt_ptr:$/;"	l
gdt_ptr64	kernel/src/boot/loader.asm	/^gdt_ptr64:$/;"	l
ge	kernel/src/mm/mm_type.rs	/^    fn ge(&self, other: &Self) -> bool {$/;"	f
generic_parse_monolithic	kernel/src/fs/fs_context.rs	/^fn generic_parse_monolithic(fc : *mut FsContext, data : *mut c_void) -> Err$/;"	f
get	kernel/src/fs/mount.rs	/^    pub fn get(&mut self)$/;"	f
get	kernel/src/fs/path.rs	/^    pub fn get(&mut self)$/;"	f
get_anon_bdev	kernel/src/fs/super_block.rs	/^fn get_anon_bdev(dev : &mut DevT) -> Err$/;"	f
get_avaliable_pid	kernel/src/kernel/process.rs	/^    fn get_avaliable_pid() -> i32$/;"	f
get_buffer	kernel/src/fs/file.rs	/^    pub fn get_buffer(&mut self, idx : Idx) -> *mut Buffer $/;"	f
get_code	kernel/src/kernel/input.rs	/^    pub fn get_code(&self) -> u16$/;"	f
get_cpu_number	kernel/src/kernel/cpu.rs	/^pub fn get_cpu_number() -> usize$/;"	f
get_cr0	kernel/src/kernel/cpu.rs	/^pub fn get_cr0() -> u64$/;"	f
get_cr2_reg	kernel/src/kernel/cpu.rs	/^pub fn get_cr2_reg() -> *const c_void$/;"	f
get_cr3_reg	kernel/src/mm/memory.rs	/^pub fn get_cr3_reg() -> u64$/;"	f
get_current_running_process	kernel/src/kernel/sched.rs	/^pub fn get_current_running_process() -> *mut process::PCB$/;"	f
get_cursor	kernel/src/kernel/console.rs	/^    pub fn get_cursor(&mut self)$/;"	f
get_dev	kernel/src/kernel/buffer.rs	/^    pub fn get_dev(&self) -> DevT$/;"	f
get_device	kernel/src/kernel/device.rs	/^pub fn get_device<'a>(dev_t : DevT) -> Option<&'a mut Device>$/;"	f
get_device_buffer	kernel/src/fs/file.rs	/^fn get_device_buffer(dev : DevT, block : Idx) -> *mut Buffer$/;"	f
get_end	kernel/src/mm/mm_type.rs	/^    pub fn get_end(&self) -> u64$/;"	f
get_entry_point_to	kernel/src/fs/file.rs	/^    pub fn get_entry_point_to(&self) -> Idx$/;"	f
get_entry_ptr	kernel/src/fs/file.rs	/^    pub fn get_entry_ptr(&self) -> *mut c_void$/;"	f
get_entry_ptr_size	kernel/src/fs/file.rs	/^    pub fn get_entry_ptr_size(&self) -> usize{$/;"	f
get_file	kernel/src/kernel/process.rs	/^    pub fn get_file(&self, fd : Fd) -> *mut File$/;"	f
get_file	kernel/src/mm/mm_type.rs	/^    pub fn get_file(&self) -> *mut File$/;"	f
get_flags	kernel/src/mm/mm_type.rs	/^    pub fn get_flags(&self) -> MmapType$/;"	f
get_free_inode	kernel/src/fs/file.rs	/^    fn get_free_inode(&self) -> *mut Inode$/;"	f
get_free_pointer	kernel/src/mm/memory.rs	/^pub fn get_free_pointer(kmem_struck : &slub::KmemCache, object : *const c_void) -> *mut c_void$/;"	f
get_froot	kernel/src/fs/file.rs	/^    pub fn get_froot(&self) -> Path$/;"	f
get_fs_type	kernel/src/fs/file.rs	/^    pub fn get_fs_type(&mut self, name : Arc<String>) -> *mut FileSystemType$/;"	f
get_gdt	kernel/src/kernel/global.rs	/^pub fn get_gdt(no : isize) -> DescriptorT$/;"	f
get_idt	kernel/src/kernel/interrupt.rs	/^pub fn get_idt(no : isize) -> DescriptorT$/;"	f
get_idx	kernel/src/kernel/buffer.rs	/^    pub fn get_idx(&self) -> Idx$/;"	f
get_inode	kernel/src/fs/file.rs	/^    pub fn get_inode(&self) -> *mut Inode$/;"	f
get_inpage_offset	kernel/src/mm/memory.rs	/^fn get_inpage_offset(ptr : *const c_void) -> usize$/;"	f
get_interrupt_state	kernel/src/kernel/interrupt.rs	/^pub fn get_interrupt_state() -> bool$/;"	f
get_intr_frame	kernel/src/kernel/process.rs	/^    pub fn get_intr_frame(&self) -> *mut PtRegs$/;"	f
get_ipwd	kernel/src/kernel/process.rs	/^    pub fn get_ipwd(&mut self) -> Path$/;"	f
get_iroot	kernel/src/kernel/process.rs	/^    pub fn get_iroot(&mut self) -> Path$/;"	f
get_kernel_size	kernel/src/mm/memory.rs	/^unsafe fn get_kernel_size() -> usize$/;"	f
get_logic_block	kernel/src/fs/ext4.rs	/^fn get_logic_block(logical_part : &mut LogicalPart, inode : *mut Inode, idx : Idx, create : bool, mut level : u8) -> Idx$/;"	f
get_logic_block_idx	kernel/src/fs/file.rs	/^    pub fn get_logic_block_idx(&mut self, inode : *mut Inode, idx : Idx, create : bool) -> Idx$/;"	f
get_logical_part	kernel/src/fs/file.rs	/^    pub fn get_logical_part(&mut self, dev : DevT) -> *mut LogicalPart$/;"	f
get_mountpoint	kernel/src/fs/mount.rs	/^fn get_mountpoint(dentry : *mut DEntry) -> *mut Mountpoint$/;"	f
get_next	kernel/src/kernel/device.rs	/^    fn get_next(&self) -> *mut RequestDescriptor$/;"	f
get_next	kernel/src/mm/mm_type.rs	/^    pub fn get_next(&self) -> *mut VMAreaStruct$/;"	f
get_next	kernel/src/mm/slub.rs	/^    pub fn get_next(&mut self) -> *mut KmemCache$/;"	f
get_next_request	kernel/src/kernel/device.rs	/^    fn get_next_request(&self) -> *mut RequestDescriptor$/;"	f
get_offset	kernel/src/mm/mm_type.rs	/^    pub fn get_offset(&self) -> Off$/;"	f
get_page_descripter	kernel/src/mm/memory.rs	/^    pub fn get_page_descripter(page : isize) -> *mut page::Page$/;"	f
get_page_idx	kernel/src/mm/memory.rs	/^    fn get_page_idx(p_addr : *const c_void) -> u64$/;"	f
get_page_size	kernel/src/mm/memory.rs	/^fn get_page_size()$/;"	f
get_page_start	kernel/src/mm/memory.rs	/^fn get_page_start(addr : *const c_void) -> *const c_void$/;"	f
get_pdpt_offset	kernel/src/mm/memory.rs	/^fn get_pdpt_offset(ptr : *const c_void) -> usize$/;"	f
get_pdt_offset	kernel/src/mm/memory.rs	/^fn get_pdt_offset(ptr : *const c_void) -> usize$/;"	f
get_pml4_offset	kernel/src/mm/memory.rs	/^fn get_pml4_offset(ptr : *const c_void) -> usize$/;"	f
get_prev	kernel/src/kernel/device.rs	/^    fn get_prev(&self) -> *mut RequestDescriptor$/;"	f
get_prev	kernel/src/mm/mm_type.rs	/^    pub fn get_prev(&self) -> *mut VMAreaStruct$/;"	f
get_prev	kernel/src/mm/slub.rs	/^    pub fn get_prev(&mut self) -> *mut KmemCache$/;"	f
get_process_kernel_stack	kernel/src/kernel/process.rs	/^    pub fn get_process_kernel_stack(&self) -> *mut c_void$/;"	f
get_prot	kernel/src/mm/mm_type.rs	/^    pub fn get_prot(&self) -> u64$/;"	f
get_pt_offset	kernel/src/mm/memory.rs	/^fn get_pt_offset(ptr : *const c_void) -> usize$/;"	f
get_screen	kernel/src/kernel/console.rs	/^    pub fn get_screen(&mut self)$/;"	f
get_size	kernel/src/fs/inode.rs	/^    pub fn get_size(&self) -> usize$/;"	f
get_start	kernel/src/mm/mm_type.rs	/^    pub fn get_start(&self) -> u64$/;"	f
get_tree_bdev	kernel/src/fs/super_block.rs	/^pub fn get_tree_bdev(fc : *mut FsContext, fill_super : fn(*mut LogicalPart, *mut FsContext) -> Err) -> Err$/;"	f
get_tree_nodev	kernel/src/fs/super_block.rs	/^pub fn get_tree_nodev(fc : *mut FsContext, fill_super : fn(*mut LogicalPart, *mut FsContext) -> Err) -> Err$/;"	f
get_type	kernel/src/kernel/input.rs	/^    pub fn get_type(&self) -> u16$/;"	f
get_useable_memory	kernel/src/mm/memory.rs	/^unsafe fn get_useable_memory(descriptor : *const E820Map)$/;"	f
get_value	kernel/src/kernel/input.rs	/^    pub fn get_value(&self) -> i32$/;"	f
get_vm_page_prot	kernel/src/mm/mm_type.rs	/^    fn get_vm_page_prot(prot : MmapType) -> u64$/;"	f
global	kernel/src/kernel/mod.rs	/^pub mod global;$/;"	m
graft_tree	kernel/src/fs/mount.rs	/^fn graft_tree(mnt : *mut Mount, p : *mut Mount, mp : *mut Mountpoint) -> Err$/;"	f
gt	kernel/src/mm/mm_type.rs	/^    fn gt(&self, other: &Self) -> bool {$/;"	f
handle_alloc_error	kernel/src/mm/memory.rs	/^pub fn handle_alloc_error(layout : Layout) -> !$/;"	f
handler	kernel/src/kernel/rtc.rs	/^    unsafe fn handler(vector : u32)$/;"	f
handler_entry_table	kernel/src/kernel/interrupt.asm	/^handler_entry_table:$/;"	l
handler_entry_table	kernel/src/kernel/interrupt.rs	/^    static mut handler_entry_table : [HandlerFn; IDT_SIZE];$/;"	c
hd	utils/image.mk	/^	yes | bximage -q -hd=128 -func=create -sectsize=512 -imgmode=flat $@$/;"	m
hd	utils/image.mk	/^	yes | bximage -q -hd=32 -func=create -sectsize=512 -imgmode=flat $@$/;"	m
head_insert	kernel/src/kernel/list.rs	/^    pub fn head_insert(&mut self, head : &mut Self)$/;"	f
ida	kernel/src/fs/mod.rs	/^pub mod ida;$/;"	m
ide_busy_wait	kernel/src/kernel/io.rs	/^fn ide_busy_wait(ctrl : *mut IdeCtrlT, mask : u8)$/;"	f
ide_ctrl_init	kernel/src/kernel/io.rs	/^pub fn ide_ctrl_init()$/;"	f
ide_disk_ioctl	kernel/src/kernel/device.rs	/^pub fn ide_disk_ioctl(disk : *mut IdeDiskT, cmd : i64, _args : *mut c_void, _flags : u32) -> i64$/;"	f
ide_early_busy_wait	kernel/src/kernel/relocation.rs	/^fn ide_early_busy_wait(io_base : u16 ,mask : u8)$/;"	f
ide_early_pio_read_sector	kernel/src/kernel/relocation.rs	/^fn ide_early_pio_read_sector(iobase : u16, mut offset : *mut u16)$/;"	f
ide_early_pio_sync_read	kernel/src/kernel/relocation.rs	/^fn ide_early_pio_sync_read(start_block : u32, num_blocks : u8, dst : *mut u8)$/;"	f
ide_early_select_sector	kernel/src/kernel/relocation.rs	/^fn ide_early_select_sector(iobase : u16, selector : u8, lba : u64, cnt : u8)$/;"	f
ide_error	kernel/src/kernel/io.rs	/^fn ide_error(ctrl : &IdeCtrlT)$/;"	f
ide_identify	kernel/src/kernel/io.rs	/^fn ide_identify(disk : &mut IdeDiskT) -> i64$/;"	f
ide_init	kernel/src/kernel/io.rs	/^pub fn ide_init()$/;"	f
ide_install	kernel/src/kernel/io.rs	/^fn ide_install()$/;"	f
ide_part_init	kernel/src/kernel/io.rs	/^unsafe fn ide_part_init(disk : &mut IdeDiskT)$/;"	f
ide_part_ioctl	kernel/src/kernel/device.rs	/^pub fn ide_part_ioctl(part : *mut IdePart, cmd : i64, _args : *mut c_void,_flagss : u32) -> i64$/;"	f
ide_pio_read_sector	kernel/src/kernel/io.rs	/^fn ide_pio_read_sector(disk : &IdeDiskT, mut offset : *mut u16)$/;"	f
ide_pio_sync_read	kernel/src/kernel/io.rs	/^pub fn ide_pio_sync_read(disk : &IdeDiskT, start_block : u32, num_blocks : u8, dst : *mut u8)$/;"	f
ide_select_drive	kernel/src/kernel/io.rs	/^fn ide_select_drive(disk : &IdeDiskT)$/;"	f
ide_select_sector	kernel/src/kernel/io.rs	/^fn ide_select_sector(disk : &IdeDiskT, lba : u64, cnt : u8)$/;"	f
ide_swap_pairs	kernel/src/kernel/io.rs	/^fn ide_swap_pairs(buf : *mut c_char, len : u32)$/;"	f
idle	kernel/src/kernel/idle.rs	/^pub fn idle()$/;"	f
idle	kernel/src/kernel/mod.rs	/^pub mod idle;$/;"	m
idt_init	kernel/src/kernel/interrupt.rs	/^fn idt_init()$/;"	f
iget	kernel/src/fs/file.rs	/^    pub fn iget(&mut self, inode_idx : Idx) -> *mut Inode$/;"	f
inb	kernel/src/kernel/io.rs	/^pub fn inb(port : u16) -> u8$/;"	f
inc	kernel/src/boot/boot.asm	/^    inc dx$/;"	d
inc	kernel/src/boot/loader.asm	/^    inc dx$/;"	d
inc_nlink	kernel/src/fs/inode.rs	/^    pub fn inc_nlink(&mut self)$/;"	f
init	kernel/src/fs/file.rs	/^    pub fn init(&mut self)$/;"	f
init	kernel/src/kernel/console.rs	/^    pub fn init(&mut self)$/;"	f
init	kernel/src/kernel/keyboard.rs	/^    pub fn init(&mut self, keyboard_ref : &'a mut KeyBoard)$/;"	f
init	kernel/src/kernel/rtc.rs	/^    pub fn init()$/;"	f
init	kernel/src/mm/memory.rs	/^    fn init(&mut self, memory_descriptor : &mut MemoryDescriptor)$/;"	f
init	proc_macro/src/__init.rs	/^pub fn init(_attr: TokenStream, _func: TokenStream) -> TokenStream$/;"	f
init_8259a	kernel/src/kernel/interrupt.rs	/^fn init_8259a()$/;"	f
init_chdir	kernel/src/fs/mount.rs	/^pub fn init_chdir(filename : *const c_char) -> Err$/;"	f
init_crc32	kernel/src/crypto/crc32c.rs	/^pub fn init_crc32()$/;"	f
init_filesystem	kernel/src/fs/file.rs	/^pub fn init_filesystem()$/;"	f
init_kmalloc_info	kernel/src/mm/slub.rs	/^macro_rules! init_kmalloc_info {$/;"	d
init_linear_map_area	kernel/src/mm/memory.rs	/^    fn init_linear_map_area(pml4_ptr : *mut Pml4)$/;"	f
init_memory	kernel/src/mm/memory.rs	/^pub fn init_memory(magic : u32, address : *const c_void)$/;"	f
init_mount	kernel/src/fs/mount.rs	/^fn init_mount(dev_name : *const c_char, dir_name : *const c_char, type_page : *const c_char, flags : u32, data_page : *const c_void) -> Err$/;"	f
init_mount_tree	kernel/src/fs/mount.rs	/^pub fn init_mount_tree()$/;"	f
init_pdpt	kernel/src/mm/memory.rs	/^    fn init_pdpt(&mut self, pdpt_ptr : *mut Pdpt, total_size : &mut usize, dst_vaddr : &mut *mut c_void, dst_paddr : &mut *mut c_void)$/;"	f
init_pdt	kernel/src/mm/memory.rs	/^    fn init_pdt(&mut self, pdt_ptr : *mut Pdpt, total_size : &mut usize, dst_vaddr : &mut *mut c_void, dst_paddr : &mut *mut c_void)$/;"	f
init_pml4	kernel/src/mm/memory.rs	/^    fn init_pml4(&mut self, pml4_ptr : *mut Pml4, mut total_kernel_size : usize, mut dst_vaddr : *mut c_void, mut dst_paddr : *mut c_void)$/;"	f
init_pt	kernel/src/mm/memory.rs	/^    fn init_pt(&mut self, pt_ptr : *mut Pt, total_size : &mut usize, dst_vaddr : &mut *mut c_void, dst_paddr : &mut *mut c_void)$/;"	f
init_rootfs	kernel/src/fs/file.rs	/^pub fn init_rootfs()$/;"	f
init_shmem	kernel/src/mm/shmem.rs	/^pub fn init_shmem()$/;"	f
init_special_inode	kernel/src/fs/inode.rs	/^    pub fn init_special_inode(&mut self, mode : FileMode, dev : DevT)$/;"	f
init_thread	kernel/src/kernel/process.rs	/^fn init_thread()$/;"	f
init_used_page_counter	kernel/src/mm/memory.rs	/^    fn init_used_page_counter(&self, pages : usize)$/;"	f
inode	kernel/src/fs/mod.rs	/^pub mod inode;$/;"	m
input	kernel/src/kernel/mod.rs	/^pub mod input;$/;"	m
insert_request	kernel/src/kernel/device.rs	/^    fn insert_request(&mut self, request : *mut RequestDescriptor) -> bool$/;"	f
insert_to_fd	kernel/src/kernel/process.rs	/^    pub fn insert_to_fd(&mut self, file_t : *mut File) -> Fd$/;"	f
insert_to_task_table	kernel/src/kernel/process.rs	/^    pub fn insert_to_task_table(&mut self)$/;"	f
insert_vma	kernel/src/mm/mm_type.rs	/^    fn insert_vma(&mut self, mut new_vma : *mut VMAreaStruct) -> *mut VMAreaStruct$/;"	f
interrupt	kernel/src/kernel/mod.rs	/^pub mod interrupt;$/;"	m
interrupt_disable	kernel/src/kernel/interrupt.rs	/^pub fn interrupt_disable() -> bool$/;"	f
interrupt_entry	kernel/src/kernel/interrupt.asm	/^interrupt_entry:$/;"	l
interrupt_exit	kernel/src/kernel/interrupt.asm	/^interrupt_exit:$/;"	l
interrupt_exit	kernel/src/kernel/process.rs	/^    pub fn interrupt_exit(); $/;"	f
interrupt_init	kernel/src/kernel/interrupt.rs	/^pub fn interrupt_init()$/;"	f
invent_group_ids	kernel/src/fs/mount.rs	/^pub fn invent_group_ids(mnt : *mut Mount, recures : bool) -> Err$/;"	f
inw	kernel/src/kernel/io.rs	/^pub fn inw(port : u16) -> u16$/;"	f
io	kernel/src/kernel/mod.rs	/^pub mod io;$/;"	m
ioctl	kernel/src/kernel/ramdisk.rs	/^    fn ioctl(disk : *mut RamDisk, cmd : i64, _args : *mut c_void, flags : u32) -> i64$/;"	f
is_avaliable	kernel/src/kernel/buffer.rs	/^    pub fn is_avaliable(&self) -> bool$/;"	f
is_blk	kernel/src/fs/ext4.rs	/^pub fn is_blk(f_mode : u16) -> bool$/;"	f
is_chr	kernel/src/fs/ext4.rs	/^pub fn is_chr(f_mode : u16) -> bool$/;"	f
is_dir	kernel/src/fs/ext4.rs	/^pub fn is_dir(f_mode : u16) -> bool$/;"	f
is_empty	kernel/src/kernel/list.rs	/^    pub fn is_empty(&self) -> bool$/;"	f
is_err	kernel/src/kernel/errno_base.rs	/^pub fn is_err<T>(x : *mut T) -> bool$/;"	f
is_fifo	kernel/src/fs/ext4.rs	/^pub fn is_fifo(f_mode : u16) -> bool$/;"	f
is_file	kernel/src/fs/ext4.rs	/^pub fn is_file(f_mode : u16) -> bool$/;"	f
is_lnk	kernel/src/fs/ext4.rs	/^pub fn is_lnk(f_mode : u16) -> bool$/;"	f
is_mnt_new	kernel/src/fs/mount.rs	/^fn is_mnt_new(m : *mut Mount) -> bool$/;"	f
is_mnt_shared	kernel/src/fs/mount.rs	/^fn is_mnt_shared(dest_mnt : *mut Mount) -> bool$/;"	f
is_mounted	kernel/src/fs/mount.rs	/^    fn is_mounted(&mut self) -> bool$/;"	f
is_power_of_n	kernel/src/fs/ext4.rs	/^fn is_power_of_n(mut n : i64, p : i64) -> bool$/;"	f
is_reg	kernel/src/fs/ext4.rs	/^pub fn is_reg(f_mode : u16) -> bool$/;"	f
is_sock	kernel/src/fs/ext4.rs	/^pub fn is_sock(f_mode : u16) -> bool$/;"	f
jmp_dst	kernel/src/boot/loader.asm	/^jmp_dst:$/;"	l
kernel	kernel/src/lib.rs	/^pub mod kernel;$/;"	m
kernel_clone	kernel/src/kernel/fork.rs	/^pub fn kernel_clone(args : &KernelCloneArgs) -> Pid$/;"	f
kernel_init	kernel/src/bin/lee_os.rs	/^fn kernel_init()$/;"	f
kernel_relocation	kernel/src/kernel/relocation.rs	/^pub unsafe fn kernel_relocation(elf64_ehdr : *mut Elf64Ehdr)$/;"	f
keyboard	kernel/src/kernel/mod.rs	/^pub mod keyboard;$/;"	m
keyboard_init	kernel/src/kernel/keyboard.rs	/^pub fn keyboard_init()$/;"	f
keyboard_scan_code_set2_handler	kernel/src/kernel/keyboard.rs	/^unsafe fn keyboard_scan_code_set2_handler(vector : u32)$/;"	f
kill_block_super	kernel/src/fs/file.rs	/^    pub fn kill_block_super(&mut self, sb : *mut LogicalPart)$/;"	f
kill_litter_super	kernel/src/fs/super_block.rs	/^pub fn kill_litter_super(sb : *mut LogicalPart)$/;"	f
kmalloc_bootstrap	kernel/src/mm/memory.rs	/^    pub fn kmalloc_bootstrap(&mut self)$/;"	f
kmalloc_slab	kernel/src/mm/slub.rs	/^pub fn kmalloc_slab(size : usize,  flags : GFP) -> *mut KmemCache$/;"	f
kmem_cache_node_bootstrap	kernel/src/mm/slub.rs	/^    pub fn kmem_cache_node_bootstrap(&mut self, kmem_cache : &KmemCache)$/;"	f
kmem_cache_open	kernel/src/mm/slub.rs	/^    fn kmem_cache_open(&mut self, flags: page::GFP)$/;"	f
lang_items	builtins/src/lib.rs	/^pub mod lang_items;$/;"	m
lang_items	kernel/src/kernel/mod.rs	/^pub mod lang_items;$/;"	m
lang_items	lib/src/lib.rs	/^pub mod lang_items;$/;"	m
le	kernel/src/mm/mm_type.rs	/^    fn le(&self, other: &Self) -> bool {$/;"	f
leap_year	kernel/src/kernel/time.rs	/^    fn leap_year(year : u32) -> bool$/;"	f
lf	kernel/src/kernel/console.rs	/^    unsafe fn lf(&mut self)$/;"	f
libfs	kernel/src/fs/mod.rs	/^pub mod libfs;$/;"	m
link_kmem_caches	kernel/src/mm/memory.rs	/^    fn link_kmem_caches()$/;"	f
link_pages	kernel/src/mm/memory.rs	/^unsafe fn link_pages(vaddr : *const c_void, paddr : *const c_void, kernel_space : bool, writable : bool)$/;"	f
link_to_cache_list	kernel/src/mm/slub.rs	/^    pub fn link_to_cache_list(&mut self)$/;"	f
link_user_page	kernel/src/mm/memory.rs	/^pub fn link_user_page(vaddr : *const c_void, prot_bit : u64)$/;"	f
link_user_page_by_prot_bit	kernel/src/mm/memory.rs	/^fn link_user_page_by_prot_bit(vaddr : *const c_void, paddr : *const c_void, prot_bit : u64)$/;"	f
list	kernel/src/kernel/mod.rs	/^pub mod list;$/;"	m
list_bdev_fs_names	kernel/src/fs/file.rs	/^    pub fn list_bdev_fs_names(&mut self, mut buf : *mut c_char, mut size : usize) -> usize$/;"	f
load_all_segment	kernel/src/boot/loader.asm	/^load_all_segment:$/;"	l
load_bitmaps	kernel/src/fs/ext4.rs	/^    fn load_bitmaps(&mut self)$/;"	f
load_bss	kernel/src/kernel/relocation.rs	/^unsafe fn load_bss(elf64_phdr : *mut Elf64Phdr)$/;"	f
load_elf64	kernel/src/kernel/elf64.rs	/^pub fn load_elf64(file_t : *mut File) -> i64$/;"	f
load_entrys	kernel/src/fs/inode.rs	/^    pub fn load_entrys(&mut self, dentry : *mut DEntry)$/;"	f
load_segment64	kernel/src/kernel/elf64.rs	/^fn load_segment64(elf64_phdr : *mut Elf64Phdr, file_t : *mut File) -> bool$/;"	f
load_system64_header	kernel/src/boot/loader.asm	/^load_system64_header:$/;"	l
load_system_section	kernel/src/kernel/relocation.rs	/^unsafe fn load_system_section(elf64_phdr : *mut Elf64Phdr, kernel_size : &mut usize)$/;"	f
loading32	kernel/src/boot/loader.asm	/^loading32:$/;"	l
loading64	kernel/src/boot/loader.asm	/^loading64:$/;"	l
log2	kernel/src/kernel/math.rs	/^pub fn log2(mut x : f64) -> f64$/;"	f
logk	kernel/src/kernel/console.rs	/^macro_rules! logk {$/;"	d
long_mode	kernel/src/boot/loader.asm	/^long_mode:$/;"	l
look_up	kernel/src/fs/dcache.rs	/^    pub fn look_up(&mut self, name : &String) -> *mut DEntry$/;"	f
lookup_bdev	kernel/src/fs/file.rs	/^    pub fn lookup_bdev(&mut self, pathname : *const c_char, dev : &mut DevT) -> Err$/;"	f
lookup_constant	kernel/src/fs/fs_context.rs	/^fn lookup_constant(tbl : *const ConstantTable, name : &str, not_fount : u32) -> u32$/;"	f
lookup_mnt	kernel/src/fs/mount.rs	/^pub fn lookup_mnt(dentry : *mut DEntry) -> *mut VFSMount$/;"	f
lt	kernel/src/mm/mm_type.rs	/^    fn lt(&self, other: &Self) -> bool {$/;"	f
macros	lib/src/lib.rs	/^pub mod macros;$/;"	m
main	builtins/src/bin/init.rs	/^pub fn main()$/;"	f
main	builtins/src/lang_items.rs	/^fn main()$/;"	f
major	kernel/src/kernel/device.rs	/^pub fn major(dev : DevT) -> DevT$/;"	f
make_root	kernel/src/fs/dcache.rs	/^    pub fn make_root(root_inode : *mut Inode) -> *mut Self$/;"	f
match_name	kernel/src/fs/file.rs	/^    pub fn match_name(&self, name : *const c_char, next : &mut *mut c_char) -> bool$/;"	f
math	kernel/src/kernel/mod.rs	/^pub mod math;$/;"	m
max	kernel/src/mm/mm_type.rs	/^    fn max(self, other: Self) -> Self$/;"	f
memcpy_s	kernel/src/kernel/string.rs	/^pub unsafe fn memcpy_s<T : Copy>(mut dst : *mut T, dst_size : usize, mut src : *const T, src_size : usize)$/;"	f
memory	kernel/src/mm/mod.rs	/^pub mod memory;$/;"	m
memory_base	kernel/src/boot/loader.asm	/^memory_base equ 0; 内存开始的位置: 基地址$/;"	d
memory_limit	kernel/src/boot/loader.asm	/^memory_limit equ ((1024 * 1024 * 1024 * 4) \/ (1024 * 4)) - 1$/;"	d
memset	kernel/src/kernel/string.rs	/^pub unsafe fn memset(mut dst : *mut u8, value : u8, size : usize)$/;"	f
min	kernel/src/mm/mm_type.rs	/^    fn min(self, other: Self) -> Self$/;"	f
minor	kernel/src/kernel/device.rs	/^pub fn minor(dev : DevT) -> DevT$/;"	f
mkdir	kernel/src/fs/file.rs	/^    pub fn mkdir(&mut self, pathname : *const c_char, mode : FileMode) -> Err$/;"	f
mkdir	kernel/src/mm/shmem.rs	/^    pub fn mkdir(&mut self, flag : u32) -> *mut ShmemInodeInfo$/;"	f
mknod	kernel/src/mm/shmem.rs	/^    pub fn mknod(&mut self, flag : u32) -> *mut ShmemInodeInfo$/;"	f
mknodat	kernel/src/fs/file.rs	/^    pub fn mknodat(&mut self, dfd : u32, name : *const c_char, mode : FileMode, dev : DevT) -> Err$/;"	f
mktime	kernel/src/kernel/time.rs	/^    pub fn mktime(time : &TM) -> Time$/;"	f
mm	kernel/src/lib.rs	/^pub mod mm;$/;"	m
mm_type	kernel/src/mm/mod.rs	/^pub mod mm_type;$/;"	m
mmap	kernel/src/mm/mod.rs	/^pub mod mmap;$/;"	m
mnt_alloc_group_id	kernel/src/fs/mount.rs	/^fn mnt_alloc_group_id(mnt : *mut Mount) -> Err$/;"	f
mnt_idmapping	kernel/src/fs/mod.rs	/^pub mod mnt_idmapping;$/;"	m
mnt_init	kernel/src/fs/file.rs	/^pub fn mnt_init()$/;"	f
mnt_set_mountpoint	kernel/src/fs/mount.rs	/^fn mnt_set_mountpoint(mnt : *mut Mount, mp : *mut Mountpoint, child_mnt : *mut Mount)$/;"	f
mntget	kernel/src/fs/mount.rs	/^    pub fn mntget(&mut self)$/;"	f
mntput	kernel/src/fs/mount.rs	/^    pub fn mntput(&mut self)$/;"	f
mount	kernel/src/fs/mod.rs	/^pub mod mount;$/;"	m
mount_block_root	kernel/src/fs/super_block.rs	/^pub fn mount_block_root(root_device_name : *const c_char)$/;"	f
mount_root	kernel/src/fs/super_block.rs	/^fn mount_root()$/;"	f
mount_root_generic	kernel/src/fs/mount.rs	/^pub fn mount_root_generic(name : *const c_char, pretty_name : *const c_char, flags : u32) -> Err$/;"	f
mount_too_revealing	kernel/src/fs/mount.rs	/^fn mount_too_revealing(sb : *mut LogicalPart, new_mount_flags : &mut MntFlags) -> bool$/;"	f
name_length	kernel/src/fs/file.rs	/^    pub fn name_length(&self) -> usize$/;"	f
named	kernel/src/fs/namei.rs	/^pub fn named(path_name : *const c_char, next : &mut *mut c_char) -> Path$/;"	f
namei	kernel/src/fs/mod.rs	/^pub mod namei;$/;"	m
namei	kernel/src/fs/namei.rs	/^pub fn namei(path_name : *const c_char) -> Path$/;"	f
new	kernel/src/fs/ext4.rs	/^    fn new(parent : &LogicalPart) -> Self$/;"	f
new	kernel/src/fs/ext4.rs	/^    pub fn new() -> *mut Self$/;"	f
new	kernel/src/fs/file.rs	/^    pub fn new() -> *mut Self$/;"	f
new	kernel/src/fs/file.rs	/^    pub fn new() -> Self$/;"	f
new	kernel/src/fs/file.rs	/^    pub fn new(entry_ptr : *mut c_void, dir_entry_type : FSType) -> Self$/;"	f
new	kernel/src/fs/fs.rs	/^    pub fn new(host : *const Inode, fgp_mask : Pageflags, flags : FileFlag) -> *mut Self$/;"	f
new	kernel/src/fs/inode.rs	/^    pub fn new(i_operations : *const InodeOperations, i_perm : FSPermission) -> *mut Self$/;"	f
new	kernel/src/fs/mnt_idmapping.rs	/^    pub fn new() -> *mut Self$/;"	f
new	kernel/src/fs/mount.rs	/^    fn new(dentry : *mut DEntry) -> *mut Self$/;"	f
new	kernel/src/fs/mount.rs	/^    fn new(mnt_sb : *mut LogicalPart) -> *mut Self$/;"	f
new	kernel/src/fs/mount.rs	/^    pub fn new() -> *mut Self$/;"	f
new	kernel/src/kernel/bitmap.rs	/^    pub fn new(start_pos : *mut u8, size : usize) -> BitMap$/;"	f
new	kernel/src/kernel/buffer.rs	/^    pub fn new(buffer_size : usize) -> Self$/;"	f
new	kernel/src/kernel/input.rs	/^    pub fn new(_type : u16, _code : u16, _value : i32) -> Self$/;"	f
new	kernel/src/kernel/io.rs	/^    pub fn new(ctrl_block : *mut IdeCtrlT, disk_selector : u8, is_master : bool, lba_num : u32, heads : u32, cylinders : u32, sectors : u32) -> IdeDiskT$/;"	f
new	kernel/src/kernel/semaphore.rs	/^    pub fn new() -> Self$/;"	f
new	kernel/src/mm/mm_type.rs	/^    pub fn new(pcb_ptr : *mut process::ProcessControlBlock) -> MMStruct$/;"	f
new	kernel/src/mm/mm_type.rs	/^    pub fn new(strat : u64, end : u64, mm_struct : *mut MMStruct, flags : MmapType) -> VMAreaStruct$/;"	f
new	kernel/src/mm/mm_type.rs	/^    pub fn new(vma_ptr : *mut VMAreaStruct) -> VMAPtrCmp$/;"	f
new	kernel/src/mm/shmem.rs	/^    fn new() -> *mut Self$/;"	f
new	kernel/src/mm/shmem.rs	/^    pub fn new() -> *mut Self$/;"	f
new	kernel/src/mm/slub.rs	/^    fn new() -> KmemCacheNode$/;"	f
new	kernel/src/mm/slub.rs	/^    pub fn new() -> KmemCacheOrderObjects$/;"	f
new_child	kernel/src/fs/dcache.rs	/^    pub fn new_child(&mut self, name : &String) -> *mut Self$/;"	f
new_decode_dev	kernel/src/fs/dev.rs	/^pub fn new_decode_dev(dev : DevT) -> DevT$/;"	f
new_dirinfo	kernel/src/mm/shmem.rs	/^    fn new_dirinfo() -> Self$/;"	f
new_encode_dev	kernel/src/fs/dev.rs	/^pub fn new_encode_dev(dev : DevT) -> DevT$/;"	f
new_shrinklist	kernel/src/mm/shmem.rs	/^    fn new_shrinklist() -> Self$/;"	f
new_swaplist	kernel/src/mm/shmem.rs	/^    fn new_swaplist() -> Self$/;"	f
next	kernel/src/mm/slub.rs	/^    fn next(&self) -> *mut Slab$/;"	f
next_group	kernel/src/fs/mount.rs	/^fn next_group(mut m : *mut Mount, origin : *mut Mount) -> *mut Mount$/;"	f
next_mnt	kernel/src/fs/mount.rs	/^    fn next_mnt(&mut self, root : *mut Mount) -> *mut Mount$/;"	f
next_peer	kernel/src/fs/mount.rs	/^fn next_peer(p : *mut Mount) -> *mut Mount$/;"	f
next_slave	kernel/src/fs/mount.rs	/^    fn next_slave(&self) -> *mut Self$/;"	f
ns_common	kernel/src/fs/mod.rs	/^pub mod ns_common;$/;"	m
ntfs	kernel/src/fs/mod.rs	/^pub mod ntfs;$/;"	m
old_decode_dev	kernel/src/fs/dev.rs	/^pub fn old_decode_dev(dev : DevT) -> DevT$/;"	f
old_encode_dev	kernel/src/fs/dev.rs	/^pub fn old_encode_dev(dev : DevT) -> DevT$/;"	f
open_file	kernel/src/fs/file.rs	/^    pub fn open_file(&mut self, file_name : *const c_char, flags : FileFlag) -> *mut File$/;"	f
open_file	kernel/src/fs/file.rs	/^    pub fn open_file(&mut self, nr : Idx, flag : FileFlag) -> *mut File$/;"	f
open_long_mode	kernel/src/boot/loader.asm	/^open_long_mode:$/;"	l
open_long_mode_success	kernel/src/boot/loader.asm	/^open_long_mode_success:$/;"	l
outb	kernel/src/kernel/io.rs	/^pub fn outb(port : u16, value : u8)$/;"	f
outw	kernel/src/kernel/io.rs	/^pub fn outw(port : u16, value : u16)$/;"	f
page	kernel/src/mm/mod.rs	/^pub mod page;$/;"	m
page2phys	kernel/src/mm/memory.rs	/^pub fn page2phys(page : u64) -> *mut c_void$/;"	f
page2virt	kernel/src/mm/memory.rs	/^pub fn page2virt(page : u64) -> *mut c_void$/;"	f
page_fault	kernel/src/mm/memory.rs	/^extern "C" fn page_fault(vector : u64, regs : PtRegs)$/;"	f
page_fault_page_exist	kernel/src/mm/memory.rs	/^fn page_fault_page_exist(error : PageFaultErrorCode, vma : *mut VMAreaStruct, pg_fault_pos : *const c_void)$/;"	f
page_fault_page_not_exist	kernel/src/mm/memory.rs	/^fn page_fault_page_not_exist(error : PageFaultErrorCode, vma : *mut VMAreaStruct, pg_fault_pos : *const c_void)$/;"	f
panic	builtins/src/lang_items.rs	/^pub fn panic(_info: &PanicInfo) -> !$/;"	f
panic	kernel/src/bin/lee_os.rs	/^pub fn panic(_info: &PanicInfo) -> !$/;"	f
panic	lib/src/lang_items.rs	/^pub fn panic(_info: &PanicInfo) -> !$/;"	f
parse_monolithic_mount_data	kernel/src/fs/fs_context.rs	/^pub fn parse_monolithic_mount_data(fc : *mut FsContext, data : *mut c_void) -> Err$/;"	f
part_read	kernel/src/kernel/io.rs	/^pub fn part_read(part : &IdePart, start_block : u32, num_blocks : u8, dst : *mut u8)$/;"	f
part_sync_read	kernel/src/kernel/io.rs	/^pub fn part_sync_read(part : &IdePart, start_block : u32, num_blocks : u8, dst : *mut u8)$/;"	f
partial_cmp	kernel/src/mm/mm_type.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {$/;"	f
path	kernel/src/fs/mod.rs	/^pub mod path;$/;"	m
path_mount	kernel/src/fs/mount.rs	/^pub fn path_mount(dev_name : Arc<String>, path : Path, type_name : Arc<String>, flags : u32, data : *const c_void) -> Err$/;"	f
path_mounted	kernel/src/fs/mount.rs	/^fn path_mounted(path : &Path) -> bool$/;"	f
permission	kernel/src/fs/namei.rs	/^pub fn permission(inode : *mut Inode, perm : FSPermission) -> bool$/;"	f
phys2page	kernel/src/mm/memory.rs	/^pub fn phys2page(phys : *const c_void) -> u64$/;"	f
phys2virt	kernel/src/mm/memory.rs	/^pub fn phys2virt(paddr : *const c_void) -> *mut c_void$/;"	f
pit_init	kernel/src/kernel/clock.rs	/^fn pit_init()$/;"	f
pnode	kernel/src/fs/mod.rs	/^pub mod pnode;$/;"	m
pow	kernel/src/kernel/math.rs	/^pub fn pow(mut x : f64, y : f64) -> f64$/;"	f
prepare_protected_mode	kernel/src/boot/loader.asm	/^prepare_protected_mode:$/;"	l
prev	kernel/src/mm/slub.rs	/^    fn prev(&self) -> *mut Slab$/;"	f
print	kernel/src/boot/boot.asm	/^print:$/;"	l
print	kernel/src/boot/loader.asm	/^print:$/;"	l
print	lib/src/lib.rs	/^pub mod print;$/;"	m
print_ards	kernel/src/mm/memory.rs	/^fn print_ards(mut e820map_addr : *const E820Map)$/;"	f
print_entry_name	kernel/src/fs/file.rs	/^    pub fn print_entry_name(&self)$/;"	f
printk	kernel/src/kernel/console.rs	/^macro_rules! printk {$/;"	d
println	lib/src/macros.rs	/^macro_rules! println {$/;"	d
process	kernel/src/kernel/mod.rs	/^pub mod process;$/;"	m
process_init	kernel/src/kernel/process.rs	/^pub fn process_init()$/;"	f
process_relocation	kernel/src/kernel/relocation.rs	/^pub unsafe fn process_relocation(elf64_ehdr : *mut Elf64Ehdr, base_addr : u64)$/;"	f
propagate_mnt	kernel/src/fs/mount.rs	/^fn propagate_mnt(dest_mnt : *mut Mount, dest_mp : *mut Mountpoint, source_mnt : *mut Mount, tree_list : &BTreeSet<*mut Mount>) -> Err$/;"	f
propagate_one	kernel/src/fs/mount.rs	/^fn propagate_one(m : *mut Mount, dest_mp : *mut Mountpoint) -> Err$/;"	f
protect_mode	kernel/src/boot/loader.asm	/^protect_mode:$/;"	l
ptr_err	kernel/src/kernel/errno_base.rs	/^pub fn ptr_err<T>(ptr : *mut T) -> Err$/;"	f
put	kernel/src/fs/path.rs	/^    pub fn put(&mut self)$/;"	f
puts_context	kernel/src/fs/fs_context.rs	/^    pub fn puts_context(context : *mut Self)$/;"	f
ramdisk	kernel/src/kernel/mod.rs	/^pub mod ramdisk;$/;"	m
ramdisk_init	kernel/src/kernel/ramdisk.rs	/^pub fn ramdisk_init()$/;"	f
rdlock	kernel/src/kernel/semaphore.rs	/^    pub fn rdlock(&mut self)$/;"	f
rdunlock	kernel/src/kernel/semaphore.rs	/^    pub fn rdunlock(&mut self)$/;"	f
read	kernel/src/kernel/ramdisk.rs	/^    fn read(disk : *mut RamDisk, start_block : Idx, num_blocks : usize, buf : *mut c_void, flags : u32)$/;"	f
read	kernel/src/kernel/time.rs	/^    pub fn read() -> Self$/;"	f
read_bcd	kernel/src/kernel/time.rs	/^    pub fn read_bcd() -> Self$/;"	f
read_block	kernel/src/fs/file.rs	/^    pub fn read_block(&self, logic_block_no : usize) -> *mut Buffer$/;"	f
read_disk	kernel/src/boot/boot.asm	/^read_disk:$/;"	l
read_disk	kernel/src/boot/loader.asm	/^read_disk:$/;"	l
read_file	kernel/src/fs/file.rs	/^    pub fn read_file(&mut self, file_t : *mut File, buffer : *mut c_void, len : usize, offset : Off) -> i64$/;"	f
read_file_logic_block	kernel/src/fs/file.rs	/^    pub fn read_file_logic_block(&mut self, file_t : *mut File, block_idx : Idx) -> *mut Buffer$/;"	f
read_from_buffer	kernel/src/kernel/buffer.rs	/^    pub fn read_from_buffer(&mut self, dst : *mut c_void, offset : usize, len : usize)$/;"	f
read_from_device	kernel/src/kernel/buffer.rs	/^    pub fn read_from_device(&mut self, dev : DevT, idx : Idx, block_num : usize)$/;"	f
read_inode	kernel/src/fs/file.rs	/^    pub fn read_inode(&mut self, inode : *mut Inode, buffer : *mut c_void, len : usize, offset : Off) -> i64$/;"	f
read_inode	kernel/src/fs/file.rs	/^    pub fn read_inode(&mut self, inode : *mut Inode, buffer : *mut c_void, len : usize, offset : usize) -> i64$/;"	f
read_inode_logic_block	kernel/src/fs/file.rs	/^    pub fn read_inode_logic_block(&mut self, inode_t : *mut Inode, block_idx : Idx) -> *mut Buffer$/;"	f
read_super_block	kernel/src/fs/super_block.rs	/^fn read_super_block(dev : DevT) -> *mut c_void$/;"	f
readdisk_fin	kernel/src/boot/boot.asm	/^readdisk_fin:$/;"	l
real_mount	kernel/src/fs/mount.rs	/^fn real_mount(vfsmount : *mut VFSMount) -> *mut Mount$/;"	f
realloc	kernel/src/mm/memory.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	f
regist_device	kernel/src/kernel/device.rs	/^pub fn regist_device(dev_no : DevT, ioctl_fn : Option<DeviceIoCtlFn>, read_fn : Option<DeviceReadFn>, write_fn : Option<DeviceWriteFn>, priority_fn : Option<RequestPriorityFn>)$/;"	f
regist_irq	kernel/src/kernel/interrupt.rs	/^pub fn regist_irq(irq_func : HandlerFn, interrupt_no : u8)$/;"	f
register_filesystem	kernel/src/fs/file.rs	/^    pub fn register_filesystem(&mut self, fs : *mut FileSystemType) -> Err$/;"	f
release	kernel/src/kernel/semaphore.rs	/^    pub fn release(&mut self, cnt : i64)$/;"	f
release_all	kernel/src/mm/mm_type.rs	/^    pub fn release_all(&mut self)$/;"	f
release_buffer	kernel/src/fs/file.rs	/^    pub fn release_buffer(&mut self, buffer : *mut Buffer, idx : Idx)$/;"	f
release_file	kernel/src/fs/file.rs	/^    pub fn release_file(&mut self, file_t : *mut File)$/;"	f
release_inode	kernel/src/fs/file.rs	/^    pub fn release_inode(&mut self, inode : *mut Inode)$/;"	f
relocation	kernel/src/kernel/mod.rs	/^pub mod relocation;$/;"	m
reserve_inode	kernel/src/mm/shmem.rs	/^    fn reserve_inode(&mut self, inoref : &mut Ino) -> i64$/;"	f
reset_bitmap	kernel/src/kernel/bitmap.rs	/^    pub fn reset_bitmap(&mut self, start_pos : *mut u8, size : usize)$/;"	f
reverse32	kernel/src/crypto/crc32c.rs	/^pub fn reverse32(data : u32) -> u32 {$/;"	f
reverse8	kernel/src/crypto/crc32c.rs	/^pub fn reverse8(data : u8) -> u8 {$/;"	f
rtc	kernel/src/kernel/mod.rs	/^pub mod rtc;$/;"	m
scan_empty_space	kernel/src/mm/mm_type.rs	/^    pub fn scan_empty_space(&mut self, mut start : *const c_void, length : usize, mut max : *const c_void) -> *mut VMAreaStruct$/;"	f
sched	kernel/src/kernel/mod.rs	/^pub mod sched;$/;"	m
schedule	kernel/src/kernel/process.rs	/^pub unsafe fn schedule()$/;"	f
scroll_up	kernel/src/kernel/console.rs	/^    unsafe fn scroll_up(&mut self)$/;"	f
seek	kernel/src/fs/fs.rs	/^    pub fn seek(&self, idx : Idx) -> *mut c_void$/;"	f
semaphore	kernel/src/kernel/mod.rs	/^pub mod semaphore;$/;"	m
send_eoi	kernel/src/kernel/interrupt.rs	/^pub fn send_eoi(vector : u32)$/;"	f
set	kernel/src/kernel/bitmap.rs	/^    pub fn set(&mut self, mut idx : usize, length : usize, value : bool)$/;"	f
set_anon_super	kernel/src/fs/super_block.rs	/^fn set_anon_super(lp : *mut LogicalPart, data : *mut c_void) -> Err$/;"	f
set_anon_super_fc	kernel/src/fs/super_block.rs	/^fn set_anon_super_fc(lp : *mut LogicalPart, fc : *mut FsContext) -> Err$/;"	f
set_cr0	kernel/src/kernel/cpu.rs	/^pub fn set_cr0(cr0 : u64)$/;"	f
set_cr3_reg	kernel/src/mm/memory.rs	/^pub fn set_cr3_reg(pml4_ptr : *const c_void)$/;"	f
set_cursor	kernel/src/kernel/console.rs	/^    pub fn set_cursor(&self)$/;"	f
set_dev	kernel/src/kernel/buffer.rs	/^    pub fn set_dev(&mut self, dev : DevT)$/;"	f
set_file	kernel/src/mm/mm_type.rs	/^    pub fn set_file(&mut self, file_t : *mut File)$/;"	f
set_flags	kernel/src/mm/mm_type.rs	/^    pub fn set_flags(&mut self, flags : MmapType)$/;"	f
set_free_pointer	kernel/src/mm/memory.rs	/^pub fn set_free_pointer(kmem_struck : &slub::KmemCache, object : *const c_void, fp : *const c_void)$/;"	f
set_idx	kernel/src/kernel/buffer.rs	/^    pub fn set_idx(&mut self, idx : Idx)$/;"	f
set_interrupt_handler	kernel/src/kernel/interrupt.rs	/^pub fn set_interrupt_handler(irq_func : HandlerFn, interrupt_no : u8)$/;"	f
set_interrupt_mask	kernel/src/kernel/interrupt.rs	/^pub fn set_interrupt_mask(interrupt_no : u32, enable : bool)$/;"	f
set_interrupt_state	kernel/src/kernel/interrupt.rs	/^pub fn set_interrupt_state(state : bool)$/;"	f
set_ipwd	kernel/src/kernel/process.rs	/^    pub fn set_ipwd(&mut self, path : &Path)$/;"	f
set_iroot	kernel/src/kernel/process.rs	/^    pub fn set_iroot(&mut self, path : &Path)$/;"	f
set_mnt_shared	kernel/src/fs/pnode.rs	/^pub fn set_mnt_shared(mnt : &mut Mount)$/;"	f
set_next	kernel/src/kernel/device.rs	/^    fn set_next(&mut self, next : *mut RequestDescriptor)$/;"	f
set_next	kernel/src/mm/mm_type.rs	/^    pub fn set_next(&mut self, next : *mut VMAreaStruct)$/;"	f
set_next	kernel/src/mm/slub.rs	/^    fn set_next(&mut self, next : *mut Slab)$/;"	f
set_next	kernel/src/mm/slub.rs	/^    pub fn set_next(&mut self, next : *const KmemCache)$/;"	f
set_offset	kernel/src/mm/mm_type.rs	/^    pub fn set_offset(&mut self, offset : Off)$/;"	f
set_pdpt	kernel/src/mm/memory.rs	/^    fn set_pdpt(pdpt_ptr : *mut Pdpt, dst_vaddr : *const c_void, dst_paddr : *const c_void, big_page : bool, kernel_space : bool, writable : bool)$/;"	f
set_pdt	kernel/src/mm/memory.rs	/^    fn set_pdt(pdt_ptr : *mut Pdpt, dst_vaddr : *const c_void, dst_paddr : *const c_void, big_page : bool, kernel_space : bool, writable : bool)$/;"	f
set_pml4	kernel/src/mm/memory.rs	/^    fn set_pml4(pdpt_ptr : *mut Pdpt, dst_vaddr : *const c_void, dst_paddr : *const c_void, big_page : bool, kernel_space : bool, writable : bool)$/;"	f
set_prev	kernel/src/kernel/device.rs	/^    fn set_prev(&mut self, prev : *mut RequestDescriptor)$/;"	f
set_prev	kernel/src/mm/mm_type.rs	/^    pub fn set_prev(&mut self, prev : *mut VMAreaStruct)$/;"	f
set_prev	kernel/src/mm/slub.rs	/^    fn set_prev(&mut self, prev : *mut Slab)$/;"	f
set_prev	kernel/src/mm/slub.rs	/^    pub fn set_prev(&mut self, prev : *const KmemCache)$/;"	f
set_prot	kernel/src/mm/mm_type.rs	/^    pub fn set_prot(&mut self, prot : MmapType)$/;"	f
set_pt	kernel/src/mm/memory.rs	/^    fn set_pt(pt_entry : &mut PtEntry, dst_paddr : *const c_void, present : bool, writable : bool, every_one_avaliable : bool, pwt : bool, pcd : bool, accessed : bool, dirty : bool, pat : bool, global : bool)$/;"	f
set_running_process	kernel/src/kernel/sched.rs	/^pub fn set_running_process(pcb : *mut process::ProcessControlBlock)$/;"	f
set_screen	kernel/src/kernel/console.rs	/^    pub fn set_screen(&self)$/;"	f
set_syscall_return_value	kernel/src/kernel/syscall.rs	/^pub unsafe fn set_syscall_return_value(ret : u64)$/;"	f
set_tss64	kernel/src/kernel/global.rs	/^pub fn set_tss64(tss_ptr : *mut TaskStateSegment, rsp0 : u64, rsp1 : u64, rsp2 : u64, ist1 : u64, ist2 : u64, ist3 : u64, ist4 : u64, ist5 : u64, ist6 : u64, ist7 : u64)$/;"	f
setup_bdev_super	kernel/src/fs/super_block.rs	/^fn setup_bdev_super(sb : *mut LogicalPart, sb_flags : u32, fc : *mut FsContext) -> Err$/;"	f
sget_dev	kernel/src/fs/file.rs	/^    pub fn sget_dev(&mut self, fc : *mut FsContext, dev : DevT) -> *mut LogicalPart$/;"	f
sget_fc	kernel/src/fs/file.rs	/^    pub fn sget_fc(&mut self, fc : *mut FsContext, test : Option<fn(*mut LogicalPart, *mut FsContext) -> Err>, set : fn(*mut LogicalPart, *mut FsContext) -> Err) -> *mut LogicalPart$/;"	f
shmem	kernel/src/mm/mod.rs	/^pub mod shmem;$/;"	m
shmem_alloc_inode	kernel/src/mm/shmem.rs	/^    pub fn shmem_alloc_inode(&mut self, flag : u32) -> *mut ShmemInodeInfo$/;"	f
shmem_get_inode	kernel/src/mm/shmem.rs	/^fn shmem_get_inode(idmap : *mut MntIdmap, lp : *mut LogicalPart, dir : *mut Inode, mode : FileMode, dev : DevT, flags : FileFlag) -> *mut Inode$/;"	f
shmem_get_tree	kernel/src/mm/shmem.rs	/^pub fn shmem_get_tree(fc : *mut FsContext) -> Err$/;"	f
shmem_init_fs_context	kernel/src/mm/shmem.rs	/^pub fn shmem_init_fs_context(fs_context : *mut FsContext) -> Err$/;"	f
shmem_mkdir	kernel/src/mm/shmem.rs	/^pub fn shmem_mkdir(idmap : *mut MntIdmap, dir : *mut Inode, dentry : *mut DEntry, mode : FileMode) -> Err$/;"	f
shmem_mknod	kernel/src/mm/shmem.rs	/^pub fn shmem_mknod(idmap : *mut MntIdmap, dir : *mut Inode, dentry : *mut DEntry, mode : FileMode, dev : DevT) -> Err$/;"	f
simple_lookup	kernel/src/fs/libfs.rs	/^pub fn simple_lookup(_dir : *mut Inode, dentry : *mut DEntry, _flags : u64) -> *mut DEntry$/;"	f
size_index_elem	kernel/src/mm/slub.rs	/^fn size_index_elem(bytes : usize) -> usize$/;"	f
slab_nid	kernel/src/mm/slub.rs	/^    fn slab_nid(&mut self) -> usize$/;"	f
slub	kernel/src/mm/mod.rs	/^pub mod slub;$/;"	m
start_beep	kernel/src/kernel/clock.rs	/^pub fn start_beep()$/;"	f
str_cmp	kernel/src/boot/loader.asm	/^str_cmp:$/;"	l
strchr	kernel/src/kernel/string.rs	/^pub unsafe fn strchr(mut __s : *const c_char, __c : c_char) -> *mut c_char$/;"	f
string	kernel/src/kernel/mod.rs	/^pub mod string;$/;"	m
strsep	kernel/src/kernel/string.rs	/^pub unsafe fn strsep(stringp : *mut *mut c_char, delim : *const c_char) -> *mut c_char$/;"	f
super_block	kernel/src/fs/mod.rs	/^pub mod super_block;$/;"	m
super_init	kernel/src/fs/super_block.rs	/^pub fn super_init()$/;"	f
support_1G_big_page_msg	kernel/src/boot/loader.asm	/^support_1G_big_page_msg:$/;"	l
support_long_mode	kernel/src/boot/loader.asm	/^support_long_mode:$/;"	l
support_long_mode_done	kernel/src/boot/loader.asm	/^support_long_mode_done:$/;"	l
sys_execve	kernel/src/kernel/execve.rs	/^pub fn sys_execve(filename : *const c_char, argv : *mut *mut c_char, envp : *mut *mut c_char)$/;"	f
sys_exit	kernel/src/kernel/process.rs	/^pub fn sys_exit(error_code : i64)$/;"	f
sys_fork	kernel/src/kernel/fork.rs	/^pub fn sys_fork() -> Pid$/;"	f
sys_mknod	kernel/src/fs/namei.rs	/^pub fn sys_mknod(filename : *const c_char, mode : FileMode, dev : DevT)$/;"	f
sys_mmap	kernel/src/mm/mmap.rs	/^pub fn sys_mmap(addr : *const c_void, length : usize, port : MmapType, flags : MmapType, fd : Fd, offset : Off) -> *mut c_void$/;"	f
sys_mount	kernel/src/fs/mount.rs	/^pub fn sys_mount(dev_name : *const c_char, dir_name : *const c_char, fstype : *const c_char, flags : u32, data : *const c_void) -> Err$/;"	f
sys_open	kernel/src/fs/file.rs	/^pub fn sys_open(file_name : *const c_char, flags : FileFlag, mode : FSPermission)$/;"	f
sys_time	kernel/src/kernel/time.rs	/^pub fn sys_time() -> Time$/;"	f
sys_vfork	kernel/src/kernel/fork.rs	/^pub fn sys_vfork() -> Pid$/;"	f
sys_write	kernel/src/fs/file.rs	/^pub fn sys_write(fd : FileDescriptor, buf : *const c_void, count : usize)$/;"	f
sys_yield	kernel/src/kernel/process.rs	/^pub fn sys_yield()$/;"	f
syscall	kernel/src/kernel/mod.rs	/^pub mod syscall;$/;"	m
syscall_defs	kernel/src/kernel/mod.rs	/^pub mod syscall_defs;$/;"	m
syscall_defs	lib/src/lib.rs	/^pub mod syscall_defs;$/;"	m
syscall_function	kernel/src/kernel/syscall.rs	/^pub unsafe fn syscall_function(pt_regs : PtRegs)$/;"	f
syscall_init	kernel/src/kernel/syscall.rs	/^pub fn syscall_init()$/;"	f
system_relocate64	kernel/src/kernel/relocation.rs	/^unsafe fn system_relocate64(elf64_shdr : *mut Elf64Shdr, base_addr : u64)$/;"	f
task_switch	kernel/src/kernel/process.rs	/^pub unsafe fn task_switch(pcb : *mut ProcessControlBlock)$/;"	f
task_to_user_mode	kernel/src/kernel/process.rs	/^fn task_to_user_mode()$/;"	f
temporary_alloc_page_frame	kernel/src/mm/memory.rs	/^fn temporary_alloc_page_frame(num : usize) -> *mut c_void$/;"	f
test	kernel/src/kernel/execve.rs	/^unsafe fn test() -> !$/;"	f
test_and_set	kernel/src/kernel/bitmap.rs	/^    pub fn test_and_set(&mut self, idx : usize) -> bool$/;"	f
test_fs	kernel/src/fs/super_block.rs	/^unsafe fn test_fs()$/;"	f
time	kernel/src/kernel/mod.rs	/^pub mod time;$/;"	m
time_init	kernel/src/kernel/time.rs	/^pub fn time_init()$/;"	f
timer_expires	kernel/src/kernel/clock.rs	/^fn timer_expires() -> u64$/;"	f
timer_wakeup	kernel/src/kernel/clock.rs	/^fn timer_wakeup()$/;"	f
times	kernel/src/boot/boot.asm	/^times 510 - ($ - $$) db 0$/;"	l
to_file_mode	kernel/src/fs/ext4.rs	/^fn to_file_mode(file_mode : &Ext4FileMode) -> FileMode$/;"	f
to_next_entry	kernel/src/fs/file.rs	/^    pub fn to_next_entry(&mut self)$/;"	f
tole	kernel/src/crypto/mod.rs	/^macro_rules! tole {$/;"	d
total_pages	kernel/src/mm/memory.rs	/^    pub fn total_pages() -> usize$/;"	f
tss_init	kernel/src/kernel/global.rs	/^pub fn tss_init()$/;"	f
unistd	lib/src/lib.rs	/^pub mod unistd;$/;"	m
upround	kernel/src/kernel/math.rs	/^pub fn upround(x : u64, round : u64) -> u64$/;"	f
vfs_create_mount	kernel/src/fs/mount.rs	/^fn vfs_create_mount(fc : *mut FsContext) -> *mut VFSMount$/;"	f
vfs_get_super	kernel/src/fs/super_block.rs	/^fn vfs_get_super(fc : *mut FsContext, test : Option<fn(*mut LogicalPart, *mut FsContext) -> Err>, fill_super : fn(*mut LogicalPart, *mut FsContext) -> Err) -> Err$/;"	f
vfs_get_tree	kernel/src/fs/super_block.rs	/^pub fn vfs_get_tree(fc : *mut FsContext) -> Err$/;"	f
vfs_kern_mount	kernel/src/fs/mount.rs	/^pub fn vfs_kern_mount(_type : *mut FileSystemType, flags : u32, name : Arc<String>, data : *mut c_void) -> *mut VFSMount$/;"	f
vfs_parse_comma_sep	kernel/src/fs/fs_context.rs	/^fn vfs_parse_comma_sep(s : *mut *mut c_char) -> *mut c_char$/;"	f
vfs_parse_fs_param_source	kernel/src/fs/fs_context.rs	/^fn vfs_parse_fs_param_source(fc : *mut FsContext, param : &mut FsParameter) -> Err$/;"	f
vfs_parse_fs_string	kernel/src/fs/fs_context.rs	/^pub fn vfs_parse_fs_string(fc : *mut FsContext, key : &str, value : &Arc<String>) -> Err$/;"	f
vfs_parse_monolithic_sep	kernel/src/fs/fs_context.rs	/^fn vfs_parse_monolithic_sep(fc : *mut FsContext, data : *mut c_void, sep : fn(*mut *mut c_char) -> *mut c_char) -> Err$/;"	f
vfs_parse_sb_flag	kernel/src/fs/fs_context.rs	/^fn vfs_parse_sb_flag(fc : *mut FsContext, key : &String) -> Err$/;"	f
vfs_parsefs_param	kernel/src/fs/fs_context.rs	/^fn vfs_parsefs_param(fc : *mut FsContext, param : &mut FsParameter) -> Err$/;"	f
virt2page	kernel/src/mm/memory.rs	/^pub fn virt2page(addr : *const c_void) -> u64$/;"	f
virt2phys	kernel/src/mm/memory.rs	/^pub fn virt2phys(virt : *const c_void) -> *mut c_void$/;"	f
write	kernel/src/kernel/console.rs	/^    pub unsafe fn write(&mut self, mut buffer : *const i8, cnt : usize) -> usize$/;"	f
write	kernel/src/kernel/ramdisk.rs	/^    fn write(disk : *mut RamDisk, idx : Idx, count : usize, buf : *mut c_void, flags : u32)$/;"	f
write	lib/src/unistd.rs	/^pub fn write(fd : u32, buf : *const c_char, count : usize) -> usize$/;"	f
write_chr	kernel/src/kernel/console.rs	/^    unsafe fn write_chr(&mut self, chr : c_char)$/;"	f
write_disk	kernel/src/boot/boot.asm	/^write_disk:$/;"	l
write_str	kernel/src/kernel/console.rs	/^    fn write_str(&mut self, output_string : &str) ->fmt::Result$/;"	f
write_str	lib/src/print.rs	/^    fn write_str(&mut self, output_string : &str) -> fmt::Result$/;"	f
write_super_block_check_sum	kernel/src/fs/ext4.rs	/^pub fn write_super_block_check_sum(sb : *mut Ext4SuperBlock)$/;"	f
write_to_buffer	kernel/src/kernel/buffer.rs	/^    pub fn write_to_buffer(&mut self, src : *mut c_void, offset : usize, len : usize)$/;"	f
write_to_device	kernel/src/kernel/buffer.rs	/^    pub fn write_to_device(&mut self, dev : DevT, idx : Idx, block_num : usize)$/;"	f
wrlock	kernel/src/kernel/semaphore.rs	/^    pub fn wrlock(&mut self)$/;"	f
wrmsr	kernel/src/kernel/cpu.rs	/^pub  fn wrmsr(dst : u64, value : u64)$/;"	f
wrunlock	kernel/src/kernel/semaphore.rs	/^    pub fn wrunlock(&mut self)$/;"	f
x86_64_check_prot_writable	kernel/src/mm/memory.rs	/^fn x86_64_check_prot_writable(prot : u64) -> bool$/;"	f
x86_64_copy_kernel_space	kernel/src/mm/memory.rs	/^fn x86_64_copy_kernel_space(dst : *mut Pml4, src : *const Pml4)$/;"	f
x86_64_copy_pml4	kernel/src/mm/memory.rs	/^fn x86_64_copy_pml4(dst : *mut Pml4, src : *mut Pml4, mut start : *mut c_void, end : *mut c_void, clone_flags : &CloneFlags)$/;"	f
